[{"difficulty": 375.0, "summary": "Given a string, compute recursively the number of times lowercase \"hi\" appears in the string, however do not count \"hi\" that have an 'x' immedately before them.", "section": "Recursion-1", "solution": ["public int countHi2(String str){\nif(str.length() <= 3){\nif(str.contains(\"xhi\"))\nreturn 0;\nif(str.contains(\"hi\"))\nreturn 1;\nreturn 0;\n}\nif(str.startsWith(\"xhi\"))\nreturn countHi2(str.substring(3));\nif(str.startsWith(\"hi\"))\nreturn 1+countHi2(str.substring(2));\n\nreturn countHi2(str.substring(1));\n}", "/* Given a string, compute recursively the number of times lowercase \"hi\" \n * appears in the string, however do not count \"hi\" that have an 'x' \n * immedately before them.\n */\npublic int countHi2(String str) {\n    if(str.length() <= 1)\n        return 0;\n          \n    if(str.length() > 2 && str.substring(0, 3).equals(\"xhi\"))\n        return countHi2(str.substring(3));\n                    \n    if(str.substring(0, 2).equals(\"hi\"))\n        return 1 + countHi2(str.substring(2));\n                            \n    return countHi2(str.substring(1));\n}\n"], "url": "/prob/p143900", "title": "countHi2", "signature": "public int countHi2(String str)", "examples": [{"output": "1", "input": "countHi2(\"ahixhi\")"}, {"output": "2", "input": "countHi2(\"ahibhi\")"}, {"output": "0", "input": "countHi2(\"xhixhi\")"}]}, {"difficulty": 121.0, "summary": "Given an array of ints length 3, return a new array with the elements in reverse order, so {1, 2, 3} becomes {3, 2, 1}.", "section": "Array-1", "solution": ["public int[] reverse3(int[] nums){\nint[] reversed = {nums[2], nums[1], nums[0]};\nreturn reversed;\n}", "/* Given an array of ints length 3, return a new array with the elements in \n * reverse order, so {1, 2, 3} becomes {3, 2, 1}.\n */\npublic int[] reverse3(int[] nums) {\n    return new int[] {nums[2], nums[1], nums[0]};\n}\n"], "url": "/prob/p112409", "title": "reverse3", "signature": "public int[] reverse3(int[] nums)", "examples": [{"output": "[3, 2, 1]", "input": "reverse3([1, 2, 3])"}, {"output": "[9, 11, 5]", "input": "reverse3([5, 11, 9])"}, {"output": "[0, 0, 7]", "input": "reverse3([7, 0, 0])"}]}, {"difficulty": 327.0, "summary": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "section": "Array-3", "solution": ["public int countClumps(int[] nums){\nint clumps = 0;\nboolean isClump = false;\nfor(int i = 0; i < nums.length - 1; i++)\n{\nif(isClump)\n{\nif(nums[i] != nums[i+1])\nisClump = false;\n}\nelse if(nums[i] == nums[i+1])\n{\nisClump = true;\nclumps++;\n}\n}\nreturn clumps;\n}", "/* Say that a \"clump\" in an array is a series of 2 or more adjacent elements \n * of the same value. Return the number of clumps in the given array.\n */\npublic int countClumps(int[] nums) {\n    int count = 0;\n    int i = 0;\n      \n    while(i < nums.length) {\n        int val = nums[i];\n        i++;\n        int length = 1;\n        while(i < nums.length && nums[i] == val) {\n            i++;\n            length++;\n        }\n                                            \n        if(length > 1)\n            count++;\n    }\n                                                          \n    return count;\n}\n"], "url": "/prob/p193817", "title": "countClumps", "signature": "public int countClumps(int[] nums)", "examples": [{"output": "2", "input": "countClumps([1, 2, 2, 3, 4, 4])"}, {"output": "2", "input": "countClumps([1, 1, 2, 1, 1])"}, {"output": "1", "input": "countClumps([1, 1, 1, 1, 1])"}]}, {"difficulty": 109.0, "summary": "Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.", "section": "Array-1", "solution": ["public int[] makePi(){\nint[] pi = {3, 1, 4};\nreturn pi;\n}", "/* Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.\n */\npublic int[] makePi() {\n    int[] nums = {3, 1, 4};\n    return nums;\n}\n"], "url": "/prob/p167011", "title": "makePi", "signature": "public int[] makePi()", "examples": [{"output": "[3, 1, 4]", "input": "makePi()"}]}, {"difficulty": 151.0, "summary": "Start with 2 int arrays, a and b, of any length. Return how many of the arrays have 1 as their first element.", "section": "Array-1", "solution": ["public int start1(int[] a, int[] b){\nint ones = 0;\nif(a.length >= 1 && a[0] == 1)\nones += 1;\nif(b.length >= 1 && b[0] == 1)\nones += 1;\nreturn ones;\n}", "/* Start with 2 int arrays, a and b, of any length. Return how many of the \n * arrays have 1 as their first element.\n */\npublic int start1(int[] a, int[] b) {\n    int count = 0;\n    \n    if(a.length > 0 && a[0] == 1)\n        count++;\n              \n    if(b.length > 0 && b[0] == 1)\n        count++;\n                        \n    return count;\n}\n"], "url": "/prob/p109660", "title": "start1", "signature": "public int start1(int[] a, int[] b)", "examples": [{"output": "2", "input": "start1([1, 2, 3], [1, 3])"}, {"output": "1", "input": "start1([7, 2, 3], [1])"}, {"output": "1", "input": "start1([1, 2], [])"}]}, {"difficulty": 245.0, "summary": "A sandwich is two pieces of bread with something in between. Return the string that is between the first and last appearance of \"bread\" in the given string, or return the empty string \"\" if there are not two pieces of bread.", "section": "String-2", "solution": ["public String getSandwich(String str){\nint iFirst = str.indexOf(\"bread\");\nint iLast = str.lastIndexOf(\"bread\");\nif(iFirst != -1 && iLast != -1 && iFirst != iLast)\nreturn str.substring(iFirst+5, iLast);\nreturn \"\";\n}", "/* A sandwich is two pieces of bread with something in between. Return the \n * string that is between the first and last appearance of \"bread\" in the \n * given string, or return the empty string \"\" if there are not two pieces \n * of bread.\n */\npublic String getSandwich(String str) {\n    int first = -1;\n    int last = -1;\n      \n    for(int i = 0; i < str.length() - 5; i++) {\n        if(str.substring(i, i + 5).equals(\"bread\")) {\n            first = i;\n            break;\n        }\n    }\n                                \n    for(int i = str.length() - 5; i >= 0; i--) {\n        if(str.substring(i, i + 5).equals(\"bread\")) {\n            last = i;\n            break;\n        }\n    }\n                                                          \n    if(first != -1 && last != -1 && first != last)\n        return str.substring(first + 5, last);\n                                                                    \n    return \"\";\n}\n"], "url": "/prob/p129952", "title": "getSandwich", "signature": "public String getSandwich(String str)", "examples": [{"output": "\"jam\"", "input": "getSandwich(\"breadjambread\")"}, {"output": "\"jam\"", "input": "getSandwich(\"xxbreadjambreadyy\")"}, {"output": "\"\"", "input": "getSandwich(\"xxbreadyy\")"}]}, {"difficulty": 236.0, "summary": "Suppose the string \"yak\" is unlucky. Given a string, return a version where all the \"yak\" are removed, but the \"a\" can be any char. The \"yak\" strings will not overlap.", "section": "Warmup-2", "solution": ["public String stringYak(String str) {\n  String result = \"\";\n  \n  for (int i=0; i<str.length(); i++) {\n    // Look for i starting a \"yak\" -- advance i in that case\n    if (i+2<str.length() && str.charAt(i)=='y' && str.charAt(i+2)=='k') {\n      i =  i + 2;\n    } else { // Otherwise do the normal append\n      result = result + str.charAt(i);\n    }\n  }\n  \n  return result;\n}", "public String stringYak( String str ){\n{\nString result = \"\";\n\nfor ( int i = 0; i < str.length(); i++ )\n{\nif ( i + 2 < str.length() && str.charAt( i ) == 'y' && str.charAt( i + 2 ) == 'k' )\n{\ni += 2;\n}\nelse\n{\nresult += str.charAt( i );\n}\n}\n\nreturn result;\n}", "public String stringYak(String str){\nint len = str.length();\nint i = 0;\nchar ch;\nStringBuilder stbuild = new StringBuilder(len);\nwhile(i < len)\n{\nch = str.charAt(i);\nif(i+2 < len && ch == 'y' && str.charAt(i+2) == 'k')\ni += 3;\nelse\n{\nstbuild.append(ch);\ni++;\n}\n}\nreturn stbuild.toString();\n}", "/* Suppose the string \"yak\" is unlucky. Given a string, return a version where \n * all the \"yak\" are removed, but the \"a\" can be any char. The \"yak\" strings \n * will not overlap.\n */\npublic String stringYak(String str) {\n    char[] result = new char[str.length()];\n    int count = 0;\n\n    for(int i = 0; i < str.length();) {\n        if(i < str.length() - 2 && str.charAt(i) == 'y' && \n            str.charAt(i + 2) == 'k') {\n            i += 3;\n        } else {\n            result[count] = str.charAt(i);\n            count++;\n            i++;\n        }\n    } \n                                                     \n    return new String(result, 0, count);\n}\n"], "url": "/prob/p126212", "title": "stringYak", "signature": "public String stringYak(String str)", "examples": [{"output": "\"pak\"", "input": "stringYak(\"yakpak\")"}, {"output": "\"pak\"", "input": "stringYak(\"pakyak\")"}, {"output": "\"123ya\"", "input": "stringYak(\"yak123ya\")"}]}, {"difficulty": 115.0, "summary": "Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "section": "Logic-1", "solution": ["public int sortaSum( int a, int b ){\n{\nint sum = a + b;\n\nreturn ( 10 <= sum && sum <= 19 ) ? 20 : sum;\n}", "public int sortaSum(int a, int b){\nint sum = a + b;\nif(sum >= 10 && sum <= 19)\nreturn 20;\nreturn sum;\n}", "/* Given 2 ints, a and b, return their sum. However, sums in the \n * range 10..19 inclusive, are forbidden, so in that case just return 20.\n */\npublic int sortaSum(int a, int b) {\n    int sum = a + b;\n    \n    if(10 <= sum && sum <= 19)\n        return 20;\n              \n    return sum;\n}\n"], "url": "/prob/p183071", "title": "sortaSum", "signature": "public int sortaSum(int a, int b)", "examples": [{"output": "7", "input": "sortaSum(3, 4)"}, {"output": "20", "input": "sortaSum(9, 4)"}, {"output": "21", "input": "sortaSum(10, 11)"}]}, {"difficulty": 230.0, "summary": "Given a number n, create and return a new int array of length n, containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which case just return a length 0 array. You do not need a separate if-statement for the length-0 case; the for-loop should naturally execute 0 times in that case, so it just works. The syntax to make a new int array is: new int[desired_length]  \u00a0 (See also: ", "section": "Array-2", "solution": ["/* Given a number n, create and return a new int array of length n, \n * containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which \n * case just return a length 0 array. You do not need a separate if-statement \n * for the length-0 case; the for-loop should naturally execute 0 times in \n * that case, so it just works.\n */\npublic int[] fizzArray(int n) {\n    int[] arr = new int[n];\n    \n    for(int i = 0; i < n; i++)\n        arr[i] = i;\n              \n    return arr;\n}\n"], "url": "/prob/p180920", "title": "fizzArray", "signature": "public int[] fizzArray(int n)", "examples": [{"output": "[0, 1, 2, 3]", "input": "fizzArray(4)"}, {"output": "[0]", "input": "fizzArray(1)"}, {"output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "input": "fizzArray(10)"}]}, {"difficulty": 348.0, "summary": "Given an array of ints, compute recursively the number of times that the value 11 appears in the array. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.", "section": "Recursion-1", "solution": ["public int array11(int[] nums, int index){\nif(index == nums.length)\nreturn 0;\nif(nums[index] == 11)\nreturn 1 + array11(nums, index + 1);\nreturn array11(nums, index + 1);\n}", "/* Given an array of ints, compute recursively the number of times that the \n * value 11 appears in the array. We'll use the convention of considering only \n * the part of the array that begins at the given index. In this way, a \n * recursive call can pass index+1 to move down the array. The initial call \n * will pass in index as 0.\n */\npublic int array11(int[] nums, int index) {\n    if(index >= nums.length)\n        return 0;\n          \n    if(nums[index] == 11)\n        return 1 + array11(nums, index + 1);\n                    \n    return array11(nums, index + 1);\n}\n"], "url": "/prob/p135988", "title": "array11", "signature": "public int array11(int[] nums, int index)", "examples": [{"output": "1", "input": "array11([1, 2, 11], 0)"}, {"output": "2", "input": "array11([11, 11], 0)"}, {"output": "0", "input": "array11([1, 2, 3, 4], 0)"}]}, {"difficulty": 208.0, "summary": "Given a string, return true if the first instance of \"x\" in the string is immediately followed by another \"x\".", "section": "Warmup-2", "solution": ["public boolean doubleX( String str ){\n{\nint i = str.indexOf( 'x' );\n\nif ( i == -1 || i == str.length() - 1 )\n{\nreturn false;\n}\n\nreturn str.substring( i, i + 2 ).equals( \"xx\" );\n}", "/* Given a string, return true if the first instance of \"x\" in the string is \n * immediately followed by another \"x\".\n */\nboolean doubleX(String str) {\n    for(int i = 0; i < str.length() - 1; i++) {\n        if(str.charAt(i) == 'x') {\n            if(str.charAt(i + 1) == 'x')\n                return true;\n            else\n                return false;\n        }\n    }\n    return false;\n}\n"], "url": "/prob/p186759", "title": "doubleX", "signature": "boolean doubleX(String str)", "examples": [{"output": "true", "input": "doubleX(\"axxbb\")"}, {"output": "false", "input": "doubleX(\"axaxax\")"}, {"output": "true", "input": "doubleX(\"xxxxx\")"}]}, {"difficulty": 418.0, "summary": "Given an array of ints, is it possible to divide the ints into two groups, so that the sums of the two groups are the same. Every int must be in one group or the other. Write a recursive helper method that takes whatever arguments you like, and make the initial call to your recursive helper from splitArray(). (No loops needed.)", "section": "Recursion-2", "solution": [["public boolean splitArray(int[] nums){", "", "// recursive helper method"], "/* Given an array of ints, is it possible to divide the ints into two groups, \n * so that the sums of the two groups are the same. Every int must be in one \n * group or the other. Write a recursive helper method that takes whatever \n * arguments you like, and make the initial call to your recursive helper \n * from splitArray(). (No loops needed.)\n */\npublic boolean splitArray(int[] nums) {\n    return splitArrayHelper(0, nums, 0, 0);\n}\n\npublic boolean splitArrayHelper(int start, int[] nums, int group1, \n    int group2) {\n    if(start >= nums.length)\n        return group1 == group2;\n            \n    if(splitArrayHelper(start+1, nums, group1 + nums[start], group2))\n        return true;\n                      \n    if(splitArrayHelper(start+1, nums, group1, group2 + nums[start]))\n        return true;\n                                \n    return false;\n}\n"], "url": "/prob/p185204", "title": "splitArray", "signature": "public boolean splitArray(int[] nums)", "examples": [{"output": "true", "input": "splitArray([2, 2])"}, {"output": "false", "input": "splitArray([2, 3])"}, {"output": "true", "input": "splitArray([5, 2, 3])"}]}, {"difficulty": 160.0, "summary": "Given 2 int arrays, each length 2, return a new array length 4 containing all their elements.", "section": "Array-1", "solution": ["public int[] plusTwo(int[] a, int[] b){\nint[] combArr = {a[0], a[1], b[0], b[1]};\nreturn combArr;\n}", "/* Given 2 int arrays, each length 2, return a new array length 4 containing \n * all their elements.\n */\npublic int[] plusTwo(int[] a, int[] b) {\n    return new int[] {a[0], a[1], b[0], b[1]};\n}\n"], "url": "/prob/p180840", "title": "plusTwo", "signature": "public int[] plusTwo(int[] a, int[] b)", "examples": [{"output": "[1, 2, 3, 4]", "input": "plusTwo([1, 2], [3, 4])"}, {"output": "[4, 4, 2, 2]", "input": "plusTwo([4, 4], [2, 2])"}, {"output": "[9, 2, 3, 4]", "input": "plusTwo([9, 2], [3, 4])"}]}, {"difficulty": 278.0, "summary": "We'll say that an element in an array is \"alone\" if there are values before and after it, and those values are different from it. Return a version of the given array where every instance of the given value which is alone is replaced by whichever value to its left or right is larger.", "section": "Array-2", "solution": ["public int[] notAlone(int[] nums, int val){\nfor(int i = 1; i < nums.length - 1; i++)\n{\nif(nums[i] == val)\n{\nif(nums[i-1] != val && nums[i+1] != val)\nnums[i] = (nums[i-1] > nums[i+1]) ? nums[i-1] : nums[i+1];\n}\n}\nreturn nums;\n}", "/* We'll say that an element in an array is \"alone\" if there are values \n * before and after it, and those values are different from it. Return a \n * version of the given array where every instance of the given value which \n * is alone is replaced by whichever value to its left or right is larger.\n */\npublic int[] notAlone(int[] nums, int val) {\n    int[] arr = new int[nums.length];\n    \n    if(nums.length >= 1) {\n        arr[0] = nums[0];\n        arr[arr.length-1] = nums[nums.length-1];\n    }\n                  \n    for(int i = 1; i <= nums.length - 2; i++) {\n        if(nums[i] == val && nums[i] != nums[i-1] && nums[i] != nums[i+1])\n            arr[i] = Math.max(nums[i-1], nums[i+1]);\n        else\n            arr[i] = nums[i];\n    }\n                                            \n    return arr;\n}\n"], "url": "/prob/p169506", "title": "notAlone", "signature": "public int[] notAlone(int[] nums, int val)", "examples": [{"output": "[1, 3, 3]", "input": "notAlone([1, 2, 3], 2)"}, {"output": "[1, 3, 3, 5, 5, 2]", "input": "notAlone([1, 2, 3, 2, 5, 2], 2)"}, {"output": "[3, 4]", "input": "notAlone([3, 4], 3)"}]}, {"difficulty": 212.0, "summary": "Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.", "section": "Array-2", "solution": ["public int sum13(int[] nums){\nint sum = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] == 13)\ni++;\nelse\nsum += nums[i];\n}\nreturn sum;\n}", "/* Return the sum of the numbers in the array, returning 0 for an empty \n * array. Except the number 13 is very unlucky, so it does not count and \n * numbers that come immediately after a 13 also do not count.\n */\npublic int sum13(int[] nums) {\n    int sum = 0;\n    int i = 0;\n      \n    while(i < nums.length) {\n        if(nums[i] == 13) {\n            i += 2;\n        } else {\n            sum += nums[i];\n            i++;\n        }\n    }\n                                          \n    return sum;\n}\n"], "url": "/prob/p127384", "title": "sum13", "signature": "public int sum13(int[] nums)", "examples": [{"output": "6", "input": "sum13([1, 2, 2, 1])"}, {"output": "2", "input": "sum13([1, 1])"}, {"output": "6", "input": "sum13([1, 2, 2, 1, 13])"}]}, {"difficulty": 287.0, "summary": "Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero.", "section": "Array-2", "solution": ["public int[] zeroMax(int[] nums){\nint max;\nfor(int i = 0; i < nums.length - 1; i++)\n{\nif(nums[i] == 0)\n{\nmax = 0;\nfor(int k = i + 1; k < nums.length; k++)\n{\nif(nums[k] > max && nums[k] % 2 == 1)\nmax = nums[k];\n}\nif(max != 0)\nnums[i] = max;\n}\n}\nreturn nums;\n}", "/* Return a version of the given array where each zero value in the array is \n * replaced by the largest odd value to the right of the zero in the array. If \n * there is no odd value to the right of the zero, leave the zero as a zero.\n */\npublic int[] zeroMax(int[] nums) {\n    int i = nums.length - 1;\n    \n    while(i >= 0 && nums[i] % 2 == 0)\n        i--;\n              \n    for(int j = i - 1; j >= 0; j--) {\n        if(nums[j] == 0)\n            nums[j] = nums[i];\n                              \n        if(nums[j] % 2 == 1 && nums[j] > nums[i])\n            i = j;\n    }\n                                            \n    return nums;\n}\n"], "url": "/prob/p187050", "title": "zeroMax", "signature": "public int[] zeroMax(int[] nums)", "examples": [{"output": "[5, 5, 3, 3]", "input": "zeroMax([0, 5, 0, 3])"}, {"output": "[3, 4, 3, 3]", "input": "zeroMax([0, 4, 0, 3])"}, {"output": "[1, 1, 0]", "input": "zeroMax([0, 1, 0])"}]}, {"difficulty": 333.0, "summary": "Given a string, return a string where every appearance of the lowercase word \"is\" has been replaced with \"is not\". The word \"is\" should not be immediately preceeded or followed by a letter -- so for example the \"is\" in \"this\" does not count. (Note: Character.isLetter(char) tests if a char is a letter.)", "section": "String-3", "solution": ["public String notReplace(String str){\nint p = str.indexOf(\"is\");\nint check;\nwhile(p != -1)\n{\ncheck = 0;\nif(p > 0)\n{\nif(!Character.isLetter(str.charAt(p-1)))\ncheck++;\n}\nelse\ncheck++;\nif(p < str.length()-2)\n{\nif(!Character.isLetter(str.charAt(p+2)))\ncheck++;\n}\nelse\ncheck++;\nif(check == 2)\nstr = str.substring(0, p) + \"is not\" + str.substring(p+2);\np = str.indexOf(\"is\", p+2);\n}\nreturn str;\n}", "/* Given a string, return a string where every appearance of the lowercase \n * word \"is\" has been replaced with \"is not\". The word \"is\" should not be \n * immediately preceeded or followed by a letter -- so for example the \"is\" \n * in \"this\" does not count.\n */\npublic String notReplace(String str) {\n    if(str.equals(\"is\"))\n        return \"is not\";\n          \n    StringBuilder result = new StringBuilder();\n    int i = 0;\n                  \n    if(str.length() >= 3 && str.substring(0,2).equals(\"is\") &&\n        !Character.isLetter(str.charAt(2))) {\n        result.append(\"is not\");\n        i = 2;\n    }\n                                    \n    while(i < str.length()) {\n        if(!Character.isLetter(str.charAt(i))) {\n            result.append(str.charAt(i));\n            i++;\n        } else if(i >= 1 && i <= str.length()-3 && \n            !Character.isLetter(str.charAt(i-1)) &&\n            str.substring(i,i+2).equals(\"is\") &&\n            !Character.isLetter(str.charAt(i+2))) {\n            result.append(\"is not\");\n            i += 2;\n        } else if(i >= 1 && !Character.isLetter(str.charAt(i-1)) &&\n            str.substring(i).equals(\"is\")) {\n            result.append(\"is not\");\n            i += 2;\n        } else {\n            result.append(str.charAt(i));\n            i++;\n        }\n    }\n \n    return result.toString();\n}\n"], "url": "/prob/p154137", "title": "notReplace", "signature": "public String notReplace(String str)", "examples": [{"output": "\"is not test\"", "input": "notReplace(\"is test\")"}, {"output": "\"is not-is not\"", "input": "notReplace(\"is-is\")"}, {"output": "\"This is not right\"", "input": "notReplace(\"This is right\")"}]}, {"difficulty": 275.0, "summary": "Given a non-empty array of ints, return a new array containing the elements from the original array that come after the last 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.", "section": "Array-2", "solution": ["public int[] post4(int[] nums){\nint p = nums.length - 1;\nint[] arr;\nwhile(nums[p] != 4)\np--;\narr = new int[nums.length - 1 - p];\nfor(int i = p + 1; i < nums.length; i++)\narr[i - p - 1] = nums[i];\nreturn arr;\n}", "/* Given a non-empty array of ints, return a new array containing the \n * elements from the original array that come after the last 4 in the \n * original array. The original array will contain at least one 4. Note that \n * it is valid in java to create an array of length 0.\n */\npublic int[] post4(int[] nums) {\n    int i = nums.length - 1;\n    \n    while(nums[i] != 4)\n        i--;\n              \n    int[] arr = new int[nums.length - i - 1];\n                  \n    for(int j = 0; j < arr.length; j++)\n        arr[j] = nums[i + j + 1];\n                          \n    return arr;\n}\n"], "url": "/prob/p164144", "title": "post4", "signature": "public int[] post4(int[] nums)", "examples": [{"output": "[1, 2]", "input": "post4([2, 4, 1, 2])"}, {"output": "[2]", "input": "post4([4, 1, 4, 2])"}, {"output": "[1, 2, 3]", "input": "post4([4, 4, 1, 2, 3])"}]}, {"difficulty": 163.0, "summary": "Return true if the given string begins with \"mix\", except the 'm' can be anything, so \"pix\", \"9ix\" .. all count.", "section": "Warmup-1", "solution": ["public boolean mixStart(String str) {\n  // Check if string is too small\n  // (so substring() below does not go off the end)\n  if (str.length() < 3) return false;\n  \n  // Pull out length 2 string for the \"ix\" part\n  // (i.e. substring starting at index 1 and stopping just before 3).\n  String two = str.substring(1, 3);\n  \n  if (two.equals(\"ix\")) {\n    return true;\n  } else {\n    return false;\n  }\n  // This last part can be shortened to just:\n  // return(two.equals(\"ix\"));\n}", ["public boolean mixStart(String str){", "", "", "// Given a string, return a string made of the first 2 chars (if present),", "// however include first char only if it is 'o' and include the second only if it is 'z',", "// so \"ozymandias\" yields \"oz\"."], "/* Return true if the given string begins with \"mix\", except the 'm' can be \n * anything, so \"pix\", \"9ix\" .. all count.\n */\npublic boolean mixStart(String str) {\n    return str.length() >= 3 && str.substring(1, 3).equals(\"ix\");\n}\n"], "url": "/prob/p151713", "title": "mixStart", "signature": "public boolean mixStart(String str)", "examples": [{"output": "true", "input": "mixStart(\"mix snacks\")"}, {"output": "true", "input": "mixStart(\"pix snacks\")"}, {"output": "false", "input": "mixStart(\"piz snacks\")"}]}, {"difficulty": 142.0, "summary": "Given three ints, a b c, return true if they are in strict increasing order, such as 2 5 11, or 5 6 7, but not 6 5 7 or 5 5 7. However, with the exception that if \"equalOk\" is true, equality is allowed, such as 5 5 7 or 5 5 5.", "section": "Logic-1", "solution": ["public boolean inOrderEqual( int a, int b, int c, boolean equalOk ){\n{\nreturn equalOk ? ( a <= b && b <= c ) : ( a < b && b < c );\n}", "public boolean inOrderEqual(int a, int b, int c, boolean equalOk){\nif(equalOk)\nreturn (a <= b && b <= c);\nreturn (a < b && b < c);\n}", "/* Given three ints, a b c, return true if they are in strict increasing \n * order, such as 2 5 11, or 5 6 7, but not 6 5 7 or 5 5 7. However, with the \n * exception that if \"equalOk\" is true, equality is allowed, such as \n * 5 5 7 or 5 5 5.\n */\npublic boolean inOrderEqual(int a, int b, int c, boolean equalOk) {\n    if(equalOk)\n        return a <= b && b <= c;\n          \n    return a < b && b < c;\n}\n"], "url": "/prob/p140272", "title": "inOrderEqual", "signature": "public boolean inOrderEqual(int a, int b, int c, boolean equalOk)", "examples": [{"output": "true", "input": "inOrderEqual(2, 5, 11, false)"}, {"output": "false", "input": "inOrderEqual(5, 7, 6, false)"}, {"output": "true", "input": "inOrderEqual(5, 5, 7, true)"}]}, {"difficulty": 254.0, "summary": "Return a version of the given string, where for every star (*) in the string the star and the chars immediately to its left and right are gone. So \"ab*cd\" yields \"ad\" and \"ab**cd\" also yields \"ad\".", "section": "String-2", "solution": ["public String starOut(String str){\nint len = str.length();\nint[] indexes = new int[len];\nchar ch;\nStringBuilder stbuild = new StringBuilder(len);\nfor(int i = 0; i < len; i++)\n{\nif(str.charAt(i) == '*')\n{\nindexes[i] = 1;\nif(i >= 1)\nindexes[i-1] = 1;\nif(i < (len-1))\nindexes[i+1] = 1;\n}\n}\nfor(int i = 0; i < len; i++)\n{\nif(indexes[i] == 0)\nstbuild.append(str.charAt(i));\n}\nreturn stbuild.toString();\n}", "/* Return a version of the given string, where for every star (*) in the \n * string the star and the chars immediately to its left and right are gone. \n * So \"ab*cd\" yields \"ad\" and \"ab**cd\" also yields \"ad\".\n */\npublic String starOut(String str) {\n    if(str.length() < 1)\n        return \"\";\n        \n    if(str.length() == 1) {\n        if(str.charAt(0) == '*')\n            return \"\";\n        else\n            return str;\n    }\n                                    \n    char[] arr = new char[str.length()];\n    int count = 0;\n                                            \n                                                \n    if(str.charAt(0) != '*' && str.charAt(1) != '*') {\n        arr[count] = str.charAt(0);\n        count++;\n    }\n                                                              \n    for(int i = 1; i < str.length() - 1; i++) {\n        if(str.charAt(i-1)!='*' && str.charAt(i) != '*' && \n            str.charAt(i+1) != '*') {\n            arr[count] = str.charAt(i);\n            count++;\n        }\n    }\n                                                                                        \n    if(str.charAt(str.length()-1) != '*' && \n        str.charAt(str.length()-2) != '*') {\n        arr[count] = str.charAt(str.length() - 1);\n        count++;\n    }\n                                                                                                      \n    return new String(arr, 0, count);\n}\n"], "url": "/prob/p139564", "title": "starOut", "signature": "public String starOut(String str)", "examples": [{"output": "\"ad\"", "input": "starOut(\"ab*cd\")"}, {"output": "\"ad\"", "input": "starOut(\"ab**cd\")"}, {"output": "\"silly\"", "input": "starOut(\"sm*eilly\")"}]}, {"difficulty": 209.0, "summary": "Modify and return the given map as follows: for this problem the map may or may not contain the \"a\" and \"b\" keys. If both keys are present, append their 2 string values together and store the result under the key \"ab\".", "section": "Map-1", "solution": [], "url": "/prob/p107259", "title": "mapAB", "signature": "public Map<String, String> mapAB(Map<String, String> map)", "examples": [{"output": "{\"a\": \"Hi\", \"ab\": \"HiThere\", \"b\": \"There\"}", "input": "mapAB({\"a\": \"Hi\", \"b\": \"There\"})"}, {"output": "{\"a\": \"Hi\"}", "input": "mapAB({\"a\": \"Hi\"})"}, {"output": "{\"b\": \"There\"}", "input": "mapAB({\"b\": \"There\"})"}]}, {"difficulty": 330.0, "summary": "Given a string, compute recursively (no loops) the number of lowercase 'x' chars in the string.", "section": "Recursion-1", "solution": ["public int countX(String str){\nif(str.length() == 0)\nreturn 0;\nif(str.charAt(0) == 'x')\nreturn 1 + countX(str.substring(1));\nreturn countX(str.substring(1));\n}", "/* Given a string, compute recursively (no loops) the number of lowercase 'x' \n * chars in the string.\n */\npublic int countX(String str) {\n    if(str.length() == 0)\n        return 0;\n          \n    if(str.charAt(0) == 'x')\n        return 1 + countX(str.substring(1));\n                    \n    return countX(str.substring(1));\n}\n"], "url": "/prob/p170371", "title": "countX", "signature": "public int countX(String str)", "examples": [{"output": "4", "input": "countX(\"xxhixx\")"}, {"output": "3", "input": "countX(\"xhixhix\")"}, {"output": "0", "input": "countX(\"hi\")"}]}, {"difficulty": 187.0, "summary": "Given a string, return a new string where the last 3 chars are now in upper case. If the string has less than 3 chars, uppercase whatever is there. Note that str.toUpperCase() returns the uppercase version of a string.", "section": "Warmup-1", "solution": ["public String endUp(String str) {\n  if (str.length() <= 3) return str.toUpperCase();\n  int cut = str.length() - 3;\n  String front = str.substring(0, cut);\n  String back  = str.substring(cut);  // this takes from cut to the end\n  \n  return front + back.toUpperCase();\n}", "public String endUp(String str){\nint len = str.length() - 3;\nif(len >= 0)\nreturn (str.substring(0, len) + (str.substring(len)).toUpperCase());\nelse\nreturn str.toUpperCase();\n}", "/* Given a string, return a new string where the last 3 chars are now in \n * upper case. If the string has less than 3 chars, uppercase whatever is \n * there. Note that str.toUpperCase() returns the uppercase version of a \n * string.\n */\npublic String endUp(String str) {\n    if(str.length() < 3)\n        return str.toUpperCase();\n          \n    return str.substring(0, str.length() - 3) + \n        str.substring(str.length() - 3).toUpperCase();\n}\n"], "url": "/prob/p125268", "title": "endUp", "signature": "public String endUp(String str)", "examples": [{"output": "\"HeLLO\"", "input": "endUp(\"Hello\")"}, {"output": "\"hi thERE\"", "input": "endUp(\"hi there\")"}, {"output": "\"HI\"", "input": "endUp(\"hi\")"}]}, {"difficulty": 260.0, "summary": "Given a string and a non-empty ", "section": "String-2", "solution": ["public String wordEnds(String str, String word){\nint len = str.length();\nint wLen = word.length();\nint pos = str.indexOf(word);\nint i = 0;\nStringBuilder stbuild = new StringBuilder(len);\nwhile(pos != -1)\n{\ni = pos + wLen;\nif(pos >= 1)\nstbuild.append(str.charAt(pos-1));\nif(i < len)\nstbuild.append(str.charAt(pos+wLen));\npos = str.indexOf(word, i);\n}\nreturn stbuild.toString();\n}", "/* Given a string and a non-empty word string, return a string made of each \n * char just before and just after every appearance of the word in the \n * string. Ignore cases where there is no char before or after the word, and \n * a char may be included twice if it is between two words.\n */\npublic String wordEnds(String str, String word) {\n    StringBuffer result = new StringBuffer();\n    int i = 0;\n      \n    if(str.length() >= word.length() + 1 && \n        str.substring(0, word.length()).equals(word)) {\n        i = word.length() - 1;\n        result.append(str.charAt(i + 1));\n    }\n                        \n    while(i < str.length() - word.length()) {\n        if(str.substring(i + 1, i + 1 + word.length()).equals(word)) {\n            result.append(str.charAt(i));\n            i = i + word.length();\n            if(i < str.length() - 1) {\n                result.append(str.charAt(i + 1));\n            }\n        } else {\n            i++;\n        }\n    }\n                                                                                \n    return result.toString();\n}\n"], "url": "/prob/p147538", "title": "wordEnds", "signature": "public String wordEnds(String str, String word)", "examples": [{"output": "\"c13i\"", "input": "wordEnds(\"abcXY123XYijk\", \"XY\")"}, {"output": "\"13\"", "input": "wordEnds(\"XY123XY\", \"XY\")"}, {"output": "\"11\"", "input": "wordEnds(\"XY1XY\", \"XY\")"}]}, {"difficulty": 246.0, "summary": "We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the sum of the changes for a walk beginning at the start index and ending at the end index. For example, with the heights {5, 3, 6, 7, 2} and start=2, end=4 yields a sum of 1 + 5 = 6. The start end end index will both be valid indexes into the array with start <= end.", "section": "AP-1", "solution": ["/* We have an array of heights, representing the altitude along a walking \n * trail. Given start/end indexes into the array, return the sum of the \n * changes for a walk beginning at the start index and ending at the end \n * index. For example, with the heights {5, 3, 6, 7, 2} and start=2, end=4 \n * yields a sum of 1 + 5 = 6. The start end end index will both be valid \n * indexes into the array with start <= end.\n */\npublic int sumHeights(int[] heights, int start, int end) {\n    int sum = 0;\n    \n    for(int i = start; i < end; i++)\n        sum += Math.abs(heights[i] - heights[i+1]);\n              \n    return sum;\n}\n"], "url": "/prob/p148138", "title": "sumHeights", "signature": "public int sumHeights(int[] heights, int start, int end)", "examples": [{"output": "6", "input": "sumHeights([5, 3, 6, 7, 2], 2, 4)"}, {"output": "2", "input": "sumHeights([5, 3, 6, 7, 2], 0, 1)"}, {"output": "11", "input": "sumHeights([5, 3, 6, 7, 2], 0, 4)"}]}, {"difficulty": 181.0, "summary": "Given 2 int arrays, a and b, of any length, return a new array with the first element of each array. If either array is length 0, ignore that array.", "section": "Array-1", "solution": ["public int[] front11(int[] a, int[] b){\nint[] front;\nif(a.length >= 1)\n{\nif(b.length >= 1)\n{\nfront = new int[2];\nfront[0] = a[0];\nfront[1] = b[0];\n}\nelse\n{\nfront = new int[1];\nfront[0] = a[0];\n}\n}\nelse if(b.length >= 1)\n{\nfront = new int[1];\nfront[0] = b[0];\n}\nelse\nfront = new int[0];\nreturn front;\n}", "/* Given 2 int arrays, a and b, of any length, return a new array with the \n * first element of each array. If either array is length 0, ignore that array.\n */\npublic int[] front11(int[] a, int[] b) {\n    if(a.length > 0 && b.length > 0) {\n        return new int[] {a[0], b[0]};\n    } else if(a.length > 0) {\n        return new int[] {a[0]};\n    } else if(b.length > 0) {\n        return new int[] {b[0]};\n    }\n                      \n    return new int[0];\n}\n"], "url": "/prob/p128270", "title": "front11", "signature": "public int[] front11(int[] a, int[] b)", "examples": [{"output": "[1, 7]", "input": "front11([1, 2, 3], [7, 9, 8])"}, {"output": "[1, 2]", "input": "front11([1], [2])"}, {"output": "[1]", "input": "front11([1, 7], [])"}]}, {"difficulty": 106.0, "summary": "Given two strings, a and b, return the result of putting them together in the order abba, e.g. \"Hi\" and \"Bye\" returns \"HiByeByeHi\".", "section": "String-1", "solution": ["public String makeAbba(String a, String b) {{\nreturn a + b + b + a;\n}", ["public String makeAbba(String a, String b){", "", "", "// The web is built with HTML strings like \"<i>Yay</i>\" which draws Yay as italic text.", "// In this example, the \"i\" tag makes <i> and </i> which surround the word \"Yay\".", "// Given tag and word strings, create the HTML string with tags around the word, e.g. \"<i>Yay</i>\"."], "/* Given two strings, a and b, return the result of putting them together in \n * the order abba, e.g. \"Hi\" and \"Bye\" returns \"HiByeByeHi\".\n */\npublic String makeAbba(String a, String b) {\n    return a + b + b + a;\n}\n"], "url": "/prob/p161056", "title": "makeAbba", "signature": "public String makeAbba(String a, String b)", "examples": [{"output": "\"HiByeByeHi\"", "input": "makeAbba(\"Hi\", \"Bye\")"}, {"output": "\"YoAliceAliceYo\"", "input": "makeAbba(\"Yo\", \"Alice\")"}, {"output": "\"WhatUpUpWhat\"", "input": "makeAbba(\"What\", \"Up\")"}]}, {"difficulty": 142.0, "summary": "Given a string, take the first 2 chars and return the string with the 2 chars added at both the front and back, so \"kitten\" yields\"kikittenki\". If the string length is less than 2, use whatever chars are there.", "section": "Warmup-1", "solution": ["public String front22(String str) {\n  // First figure the number of chars to take\n  int take = 2;\n  if (take > str.length()) {\n    take = str.length();\n  }\n  \n  String front = str.substring(0, take);\n  return front + str + front;\n}", "public String front22( String str ){\n{\nString front = ( str.length() < 2 ) ? str : str.substring( 0, 2 );\n\nreturn front + str + front;\n}", "public String front22(String str){\nString temp;\nint len = str.length();\nif(len > 2)\nlen = 2;\ntemp = str.substring(0, len);\nreturn (temp + str + temp);\n}", "/* Given a string, take the first 2 chars and return the string with the 2 \n * chars added at both the front and back, so \"kitten\" yields\"kikittenki\". If \n * the string length is less than 2, use whatever chars are there.\n */\npublic String front22(String str) {\n    String front;\n    if(str.length() < 2)\n        front = str;\n    else\n        front = str.substring(0, 2);\n                  \n    return front + str + front;\n}\n"], "url": "/prob/p183592", "title": "front22", "signature": "public String front22(String str)", "examples": [{"output": "\"kikittenki\"", "input": "front22(\"kitten\")"}, {"output": "\"HaHaHa\"", "input": "front22(\"Ha\")"}, {"output": "\"ababcab\"", "input": "front22(\"abc\")"}]}, {"difficulty": 266.0, "summary": "Return an array that is \"left shifted\" by one -- so {6, 2, 5, 3} returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "section": "Array-2", "solution": ["public int[] shiftLeft(int[] nums){\nif(nums.length >= 2)\n{\nint temp = nums[0];\nfor(int i = 0; i < nums.length - 1; i++)\nnums[i] = nums[i+1];\nnums[nums.length-1] = temp;\n}\nreturn nums;\n}", "/* Return an array that is \"left shifted\" by one -- so {6, 2, 5, 3} returns \n * {2, 5, 3, 6}. You may modify and return the given array, or return a new \n * array.\n */\npublic int[] shiftLeft(int[] nums) {\n    if(nums.length < 1)\n        return nums;\n          \n    int first = nums[0];\n              \n    for(int i = 1; i < nums.length; i++)\n        nums[i - 1] = nums[i];\n                        \n    nums[nums.length - 1] = first;\n                            \n    return nums;\n}\n"], "url": "/prob/p105031", "title": "shiftLeft", "signature": "public int[] shiftLeft(int[] nums)", "examples": [{"output": "[2, 5, 3, 6]", "input": "shiftLeft([6, 2, 5, 3])"}, {"output": "[2, 1]", "input": "shiftLeft([1, 2])"}, {"output": "[1]", "input": "shiftLeft([1])"}]}, {"difficulty": 387.0, "summary": "Given a string and a non-empty substring ", "section": "Recursion-1", "solution": ["public boolean strCopies(String str, String sub, int n){\nif(n == 0)\nreturn true;\nif(str.length() < sub.length())\nreturn false;\nif(str.substring(0, sub.length()).equals(sub))\nreturn strCopies(str.substring(1), sub, n - 1);\nreturn strCopies(str.substring(1), sub, n);\n}", "/* Given a string and a non-empty substring sub, compute recursively if at \n * least n copies of sub appear in the string somewhere, possibly with \n * overlapping. N will be non-negative.\n */\npublic boolean strCopies(String str, String sub, int n) {\n    if(n == 0)\n        return true;\n          \n    if(str.length() < sub.length())\n        return false;\n                  \n    if(str.substring(0, sub.length()).equals(sub))\n        return strCopies(str.substring(1), sub, n-1);\n                            \n    return strCopies(str.substring(1), sub, n);\n}\n"], "url": "/prob/p118182", "title": "strCopies", "signature": "public boolean strCopies(String str, String sub, int n)", "examples": [{"output": "true", "input": "strCopies(\"catcowcat\", \"cat\", 2)"}, {"output": "false", "input": "strCopies(\"catcowcat\", \"cow\", 2)"}, {"output": "true", "input": "strCopies(\"catcowcat\", \"cow\", 1)"}]}, {"difficulty": 221.0, "summary": "Given three ints, a b c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "section": "Logic-2", "solution": ["public boolean evenlySpaced(int a, int b, int c){\nint temp;\nif(b > a)\n{\ntemp = a;\na = b;\nb = temp;\n}\nif(c > b)\n{\ntemp = b;\nb =c;\nc = temp;\n}\nif(b > a)\n{\ntemp = a;\na = b;\nb = temp;\n}\nreturn(a - b == b - c);\n}", "/* Given three ints, a b c, one of them is small, one is medium and one is \n * large. Return true if the three values are evenly spaced, so the \n * difference between small and medium is the same as the difference between \n * medium and large.\n */\npublic boolean evenlySpaced(int a, int b, int c) {\n    int temp;\n    if(a > b) {\n        temp = a;\n        a = b;\n        b = temp;\n    }\n                    \n    if(b > c) {\n        temp = b;\n        b = c;\n        c = temp;\n    }\n                                      \n    if(a > b) {\n        temp = a;\n        a = b;\n        b = temp;\n    }\n                                                        \n    return b - a == c - b;\n}\n"], "url": "/prob/p198700", "title": "evenlySpaced", "signature": "public boolean evenlySpaced(int a, int b, int c)", "examples": [{"output": "true", "input": "evenlySpaced(2, 4, 6)"}, {"output": "true", "input": "evenlySpaced(4, 6, 2)"}, {"output": "false", "input": "evenlySpaced(4, 6, 3)"}]}, {"difficulty": 215.0, "summary": "Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.", "section": "Array-2", "solution": ["public int sum67(int[] nums){\nint sum = 0;\nboolean sixMode = false;\nfor(int i = 0; i < nums.length; i++)\n{\nif(sixMode)\n{\nif(nums[i] == 7)\nsixMode = false;\n}\nelse if(nums[i] == 6)\nsixMode = true;\nelse\nsum += nums[i];\n}\nreturn sum;\n}", "/* Return the sum of the numbers in the array, except ignore sections of \n * numbers starting with a 6 and extending to the next 7 (every 6 will be \n * followed by at least one 7). Return 0 for no numbers.\n */\npublic int sum67(int[] nums) {\n    int sum = 0;\n    boolean inRange = false;\n      \n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 6)\n            inRange = true;\n\n        if(!inRange)\n            sum += nums[i];\n                                        \n        if(inRange && nums[i] == 7)\n            inRange = false;\n                                                        \n    }\n                                                            \n    return sum;\n}\n"], "url": "/prob/p111327", "title": "sum67", "signature": "public int sum67(int[] nums)", "examples": [{"output": "5", "input": "sum67([1, 2, 2])"}, {"output": "5", "input": "sum67([1, 2, 2, 6, 99, 99, 7])"}, {"output": "4", "input": "sum67([1, 1, 6, 7, 2])"}]}, {"difficulty": 360.0, "summary": "Given an array of strings, return a Map<String, Boolean> where each different string is a key and its value is true if that string appears 2 or more times in the array.", "section": "Map-2", "solution": [], "url": "/prob/p190862", "title": "wordMultiple", "signature": "public Map<String, Boolean> wordMultiple(String[] strings)", "examples": [{"output": "{\"a\": true, \"b\": true, \"c\": false}", "input": "wordMultiple([\"a\", \"b\", \"a\", \"c\", \"b\"])"}, {"output": "{\"a\": false, \"b\": false, \"c\": false}", "input": "wordMultiple([\"c\", \"b\", \"a\"])"}, {"output": "{\"c\": true}", "input": "wordMultiple([\"c\", \"c\", \"c\", \"c\"])"}]}, {"difficulty": 133.0, "summary": "Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.", "section": "String-1", "solution": ["public String left2(String str) {{\nreturn str.substring(2) + str.substring(0, 2);\n}", ["public String left2(String str){", "", "", "// Given a string, return a \"rotated right 2\" version where the last 2 chars are moved to the start.", "// The string length will be at least 2."], "/* Given a string, return a \"rotated left 2\" version where the first 2 chars \n * are moved to the end. The string length will be at least 2.\n */\npublic String left2(String str) {\n    return str.substring(2) + str.substring(0, 2);\n}\n"], "url": "/prob/p197720", "title": "left2", "signature": "public String left2(String str)", "examples": [{"output": "\"lloHe\"", "input": "left2(\"Hello\")"}, {"output": "\"vaja\"", "input": "left2(\"java\")"}, {"output": "\"Hi\"", "input": "left2(\"Hi\")"}]}, {"difficulty": 203.0, "summary": "Given a list of integers, return a list of those numbers, omitting any that are between 13 and 19 inclusive.", "section": "Functional-2", "solution": [], "url": "/prob/p137274", "title": "noTeen", "signature": "public List<Integer> noTeen(List<Integer> nums)", "examples": [{"output": "[12, 20]", "input": "noTeen([12, 13, 19, 20])"}, {"output": "[1, 1]", "input": "noTeen([1, 14, 1])"}, {"output": "[]", "input": "noTeen([15])"}]}, {"difficulty": 184.0, "summary": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57. Note that the % \"mod\" operator computes remainders, so 17 % 10 is 7.", "section": "Warmup-1", "solution": ["public boolean lastDigit(int a, int b) {\n  // True if the last digits are the same\n  return(a % 10 == b % 10);\n}", "public boolean lastDigit( int a, int b, int c ){\n{\nint aLastDigit = a % 10;\nint bLastDigit = b % 10;\nint cLastDigit = c % 10;\n\nreturn aLastDigit == bLastDigit || bLastDigit == cLastDigit || aLastDigit == cLastDigit;\n}", ["public boolean lastDigit(int a, int b){", "", "", "// Given a string, return a new string where the last 3 chars are now in upper case.", "// If the string has less than 3 chars, uppercase whatever is there.", "// Note that str.toUpperCase() returns the uppercase version of a string."], "/* Given two non-negative int values, return true if they have the same last \n * digit, such as with 27 and 57. Note that the % \"mod\" operator computes \n * remainders, so 17 % 10 is 7.\n */\npublic boolean lastDigit(int a, int b) {\n    return a % 10 == b % 10;\n}\n"], "url": "/prob/p125339", "title": "lastDigit", "signature": "public boolean lastDigit(int a, int b)", "examples": [{"output": "true", "input": "lastDigit(7, 17)"}, {"output": "false", "input": "lastDigit(6, 17)"}, {"output": "true", "input": "lastDigit(3, 113)"}]}, {"difficulty": 246.2, "summary": "(A variation on the sumHeights problem.) We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the number of \"big\" steps for a walk starting at the start index and ending at the end index. We'll say that  step is big if it is 5 or more up or down. The start end end index will both be valid indexes into the array with start <= end.", "section": "AP-1", "solution": ["/* We have an array of heights, representing the altitude along a walking \n * trail. Given start/end indexes into the array, return the number of \"big\" \n * steps for a walk starting at the start index and ending at the end index. \n * We'll say that step is big if it is 5 or more up or down. The start end end \n * index will both be valid indexes into the array with start <= end.\n */\npublic int bigHeights(int[] heights, int start, int end) {\n    int count = 0;\n    \n    for(int i = start; i < end; i++) {\n        if(Math.abs(heights[i] - heights[i+1]) >= 5)\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p197710", "title": "bigHeights", "signature": "public int bigHeights(int[] heights, int start, int end)", "examples": [{"output": "1", "input": "bigHeights([5, 3, 6, 7, 2], 2, 4)"}, {"output": "0", "input": "bigHeights([5, 3, 6, 7, 2], 0, 1)"}, {"output": "1", "input": "bigHeights([5, 3, 6, 7, 2], 0, 4)"}]}, {"difficulty": 172.0, "summary": "Given 2 int values, return whichever value is nearest to the value 10, or return 0 in the event of a tie. Note that Math.abs(n) returns the absolute value of a number.", "section": "Warmup-1", "solution": ["public int close10(int a, int b) {\n  int aDiff = Math.abs(a - 10);\n  int bDiff = Math.abs(b - 10);\n  \n  if (aDiff < bDiff) {\n    return a;\n  }\n  if (bDiff < aDiff) {\n    return b;\n  }\n  return 0;  // i.e. aDiff == bDiff\n  \n  // Solution notes: aDiff/bDiff local vars clean the code up a bit.\n  // Could have \"else\" before the second if and the return 0.\n}", "public int close10(int a, int b){\nint ma = Math.abs(10-a);\nint mb = Math.abs(10-b);\nif (ma < mb)\nreturn a;\nif (mb < ma)\nreturn b;\nreturn 0;\n}", "/* Given 2 int values, return whichever value is nearest to the value 10, or \n * return 0 in the event of a tie. Note that Math.abs(n) returns the absolute \n * value of a number.\n */\npublic int close10(int a, int b) {\n    int distA = Math.abs(a - 10);\n    int distB = Math.abs(b - 10);\n      \n    if(distA == distB)\n        return 0;\n                \n    return distA < distB ? a : b;\n}\n"], "url": "/prob/p172021", "title": "close10", "signature": "public int close10(int a, int b)", "examples": [{"output": "8", "input": "close10(8, 13)"}, {"output": "8", "input": "close10(13, 8)"}, {"output": "0", "input": "close10(13, 7)"}]}, {"difficulty": 212.0, "summary": "Given an array of scores, compute the int average of the first half and the second half, and return whichever is larger. We'll say that the second half begins at index length/2. The array length will be at least 2. To practice decomposition, write a separate helper method ", "section": "AP-1", "solution": ["/* Given an array of scores, compute the int average of the first half and the \n * second half, and return whichever is larger. We'll say that the second half \n * begins at index length/2. The array length will be at least 2. To practice \n * decomposition, write a separate helper method <br>int average(int[] scores, \n * int start, int end) { which computes the average of the elements between \n * indexes start..end. Call your helper method twice to implement \n * scoresAverage().\n */\npublic int scoresAverage(int[] scores) {\n    int first = average(scores, 0, scores.length / 2);\n    int second = average(scores, scores.length / 2, scores.length);\n    return Math.max(first, second);\n}\n\npublic int average(int[] scores, int start, int end) {\n    int sum = 0;\n          \n    for(int i = start; i < end; i++)\n        sum += scores[i];\n\n    return sum / (end - start);\n}\n"], "url": "/prob/p123837", "title": "scoresAverage", "signature": "public int scoresAverage(int[] scores)", "examples": [{"output": "4", "input": "scoresAverage([2, 2, 4, 4])"}, {"output": "4", "input": "scoresAverage([4, 4, 4, 2, 2, 2])"}, {"output": "4", "input": "scoresAverage([3, 4, 5, 1, 2, 3])"}]}, {"difficulty": 215.0, "summary": "Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so \"hixxxhi\" yields 1 (we won't count the end substring).", "section": "Warmup-2", "solution": ["public int last2(String str) {\n  // Screen out too-short string case.\n  if (str.length() < 2) return 0;\n  \n  String end = str.substring(str.length()-2);\n  // Note: substring() with 1 value goes through the end of the string\n  int count = 0;\n  \n  // Check each substring length 2 starting at i\n  for (int i=0; i<str.length()-2; i++) {\n    String sub = str.substring(i, i+2);\n    if (sub.equals(end)) {  // Use .equals() with strings\n      count++;\n    }\n  }\n\n  return count;\n}", "public int last2( String str ){\n{\nif ( str.length() < 2 )\n{\nreturn 0;\n}\n\nString end = str.substring( str.length() - 2 );\nint count = 0;\n\nfor ( int i = 0; i < str.length() - 2; i++ )\n{\nString sub = str.substring( i, i + 2 );\n\nif ( sub.equals( end ) )\n{\ncount++;\n}\n}\n\nreturn count;\n}", "public int last2(String str){\nint len = str.length() - 2;\nint count = 0;\nif(len >= 0)\n{\nString end = str.substring(len);\nfor(int i = 0; i < len; i++)\n{\nif(str.substring(i, i+2).equals(end))\ncount++;\n}\n}\nreturn count;\n}", "/* Given a string, return the count of the number of times that a substring \n * length 2 appears in the string and also as the last 2 chars of the string, \n * so \"hixxxhi\" yields 1 (we won't count the end substring).\n */\npublic int last2(String str) {\n    if(str.length() < 2)\n        return 0;\n          \n    String end = str.substring(str.length() - 2);\n    int count = 0;\n                \n    for(int i = 0; i < str.length() - 2; i++) {\n        if(str.substring(i, i + 2).equals(end))\n            count++;\n    }\n                                \n    return count;\n}\n"], "url": "/prob/p178318", "title": "last2", "signature": "public int last2(String str)", "examples": [{"output": "1", "input": "last2(\"hixxhi\")"}, {"output": "1", "input": "last2(\"xaxxaxaxx\")"}, {"output": "2", "input": "last2(\"axxxaaxx\")"}]}, {"difficulty": 115.0, "summary": "Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.", "section": "String-1", "solution": ["public String extraEnd(String str) {{\nString result = str.substring(str.length() - 2);\n\nreturn result + result + result;\n}", "public String extraEnd(String str){\nint len = str.length();\nString temp = str.substring(len-2, len);\nreturn (temp + temp + temp);\n}", "/* Given a string, return a new string made of 3 copies of the last 2 chars \n * of the original string. The string length will be at least 2.\n */\npublic String extraEnd(String str) {\n    String last = str.substring(str.length() - 2);\n    return last + last + last;\n}\n"], "url": "/prob/p108853", "title": "extraEnd", "signature": "public String extraEnd(String str)", "examples": [{"output": "\"lololo\"", "input": "extraEnd(\"Hello\")"}, {"output": "\"ababab\"", "input": "extraEnd(\"ab\")"}, {"output": "\"HiHiHi\"", "input": "extraEnd(\"Hi\")"}]}, {"difficulty": 306.0, "summary": "Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, and the value is that string's length.", "section": "Map-2", "solution": [], "url": "/prob/p125327", "title": "wordLen", "signature": "public Map<String, Integer> wordLen(String[] strings)", "examples": [{"output": "{\"bb\": 2, \"a\": 1}", "input": "wordLen([\"a\", \"bb\", \"a\", \"bb\"])"}, {"output": "{\"that\": 4, \"and\": 3, \"this\": 4}", "input": "wordLen([\"this\", \"and\", \"that\", \"and\"])"}, {"output": "{\"code\": 4, \"bug\": 3}", "input": "wordLen([\"code\", \"code\", \"code\", \"bug\"])"}]}, {"difficulty": 106.0, "summary": "We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble.", "section": "Warmup-1", "solution": ["public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {\n  if (aSmile && bSmile) {\n    return true;\n  }\n  if (!aSmile && !bSmile) {\n    return true;\n  }\n  return false;\n  // The above can be shortened to:\n  //   return ((aSmile && bSmile) || (!aSmile && !bSmile));\n  // Or this very short version (think about how this is the same as the above)\n  //   return (aSmile == bSmile);\n}", "public boolean monkeyTrouble( boolean aSmile, boolean bSmile ){\n{\nreturn !( aSmile || bSmile ) || ( aSmile && bSmile );\n}", ["public boolean monkeyTrouble(boolean aSmile, boolean bSmile){", "", "", "// Given two int values, return their sum. Unless the two values are the same, then return double their sum."], "/* We have two monkeys, a and b, and the parameters aSmile and bSmile indicate \n * if each is smiling. We are in trouble if they are both smiling or if \n * neither of them is smiling. Return true if we are in trouble.\n */\npublic boolean monkeyTrouble(boolean aSmile, boolean bSmile) {\n    return aSmile == bSmile;\n}\n"], "url": "/prob/p181646", "title": "monkeyTrouble", "signature": "public boolean monkeyTrouble(boolean aSmile, boolean bSmile)", "examples": [{"output": "true", "input": "monkeyTrouble(true, true)"}, {"output": "true", "input": "monkeyTrouble(false, false)"}, {"output": "false", "input": "monkeyTrouble(true, false)"}]}, {"difficulty": 127.0, "summary": "Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0.", "section": "Array-1", "solution": ["public int sum2(int[] nums){\nif(nums.length >= 2)\nreturn (nums[0] + nums[1]);\nif(nums.length == 1)\nreturn nums[0];\nreturn 0;\n}", "/* Given an array of ints, return the sum of the first 2 elements in the \n * array. If the array length is less than 2, just sum up the elements that \n * exist, returning 0 if the array is length 0.\n */\npublic int sum2(int[] nums) {\n    if(nums.length == 0)\n        return 0;\n          \n    if(nums.length == 1)\n        return nums[0];\n                    \n    return nums[0] + nums[1];\n}\n"], "url": "/prob/p190968", "title": "sum2", "signature": "public int sum2(int[] nums)", "examples": [{"output": "3", "input": "sum2([1, 2, 3])"}, {"output": "2", "input": "sum2([1, 1])"}, {"output": "2", "input": "sum2([1, 1, 1, 1])"}]}, {"difficulty": 154.0, "summary": "Given a string and an index, return a string length 2 starting at the given index. If the index is too big or too small to define a string length 2, use the first 2 chars. The string length will be at least 2.", "section": "String-1", "solution": ["public String twoChar(String str, int index){\nif(index <= str.length()-2 && index >= 0)\nreturn str.substring(index, index+2);\nreturn str.substring(0, 2);\n}", "/* Given a string and an index, return a string length 2 starting at the \n * given index. If the index is too big or too small to define a string \n * length 2, use the first 2 chars. The string length will be at least 2.\n */\npublic String twoChar(String str, int index) {\n    if(index + 2 > str.length() || index < 0)\n        return str.substring(0, 2);\n          \n    return str.substring(index, index + 2);\n}\n"], "url": "/prob/p144623", "title": "twoChar", "signature": "public String twoChar(String str, int index)", "examples": [{"output": "\"ja\"", "input": "twoChar(\"java\", 0)"}, {"output": "\"va\"", "input": "twoChar(\"java\", 2)"}, {"output": "\"ja\"", "input": "twoChar(\"java\", 3)"}]}, {"difficulty": 212.0, "summary": "Given a list of strings, return a list of the strings, omitting any string length 3 or 4.", "section": "Functional-2", "solution": [], "url": "/prob/p184496", "title": "no34", "signature": "public List<String> no34(List<String> strings)", "examples": [{"output": "[\"a\", \"bb\"]", "input": "no34([\"a\", \"bb\", \"ccc\"])"}, {"output": "[\"a\", \"bb\"]", "input": "no34([\"a\", \"bb\", \"ccc\", \"dddd\"])"}, {"output": "[\"apple\"]", "input": "no34([\"ccc\", \"dddd\", \"apple\"])"}]}, {"difficulty": 178.0, "summary": "Given a string, return true if the first 2 chars in the string also appear at the end of the string, such as with \"edited\".", "section": "String-1", "solution": ["public boolean frontAgain(String str) {{\nif (str == null || str.length() < 2) {\nreturn false;\n}\n\nString front = str.substring(0, 2);\nString end = str.substring(str.length() - 2);\n\nreturn front.equals(end);\n}", "public boolean frontAgain(String str){\nint len = str.length();\nif(len >= 2)\nreturn str.substring(0, 2).equals(str.substring(len-2, len));\nelse\nreturn false;\n}", "/* Given a string, return true if the first 2 chars in the string also appear \n * at the end of the string, such as with \"edited\".\n */\npublic boolean frontAgain(String str) {\n    if(str.length() < 2)\n        return false;\n    return str.substring(0, 2).equals(str.substring(str.length() - 2));\n}\n"], "url": "/prob/p196652", "title": "frontAgain", "signature": "public boolean frontAgain(String str)", "examples": [{"output": "true", "input": "frontAgain(\"edited\")"}, {"output": "false", "input": "frontAgain(\"edit\")"}, {"output": "true", "input": "frontAgain(\"ed\")"}]}, {"difficulty": 284.0, "summary": "Return a version of the given array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces a the end of the array should be 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "section": "Array-2", "solution": ["public int[] withoutTen(int[] nums){\nint[] arr = new int[nums.length];\nint p = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] != 10)\n{\narr[p] = nums[i];\np++;\n}\n}\n// Java arrays are initialized to 0 so no need to set the last elements to 0\nreturn arr;\n}", "/* Return a version of the given array where all the 10's have been removed. \n * The remaining elements should shift left towards the start of the array as \n * needed, and the empty spaces a the end of the array should be 0. So \n * {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given \n * array or make a new array.\n */\npublic int[] withoutTen(int[] nums) {\n    int i = 0;\n    \n    while(i < nums.length && nums[i] != 10)\n        i++;\n              \n    for(int j = i + 1; j < nums.length; j++) {\n        if(nums[j] != 10) {\n            nums[i] = nums[j];\n            nums[j] = 10;\n            i++;\n        }\n    }\n                                              \n    for( ; i < nums.length; i++)\n        nums[i] = 0;\n                                                      \n    return nums;\n}\n"], "url": "/prob/p196976", "title": "withoutTen", "signature": "public int[] withoutTen(int[] nums)", "examples": [{"output": "[1, 2, 0, 0]", "input": "withoutTen([1, 10, 10, 2])"}, {"output": "[2, 0, 0]", "input": "withoutTen([10, 2, 10])"}, {"output": "[1, 99, 0]", "input": "withoutTen([1, 99, 10])"}]}, {"difficulty": 115.0, "summary": "We have a loud talking parrot. The \"hour\" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.", "section": "Warmup-1", "solution": ["public boolean parrotTrouble(boolean talking, int hour) {\n  return (talking && (hour < 7 || hour > 20));\n  // Need extra parenthesis around the || clause\n  // since && binds more tightly than ||\n  // && is like arithmetic *, || is like arithmetic +\n}", "public boolean parrotTrouble( boolean talking, int hour ){\n{\nreturn talking && ( hour > 20 || hour < 7 );\n}", ["public boolean parrotTrouble(boolean talking, int hour){", "", "", "// Given 2 ints, a and b", "// return true if one if them is 10 or if their sum is 10."], "/* We have a loud talking parrot. The \"hour\" parameter is the current hour \n * time in the range 0..23. We are in trouble if the parrot is talking and the \n * hour is before 7 or after 20. Return true if we are in trouble.\n */\npublic boolean parrotTrouble(boolean talking, int hour) {\n    return talking && (hour < 7 || hour > 20);\n}\n"], "url": "/prob/p140449", "title": "parrotTrouble", "signature": "public boolean parrotTrouble(boolean talking, int hour)", "examples": [{"output": "true", "input": "parrotTrouble(true, 6)"}, {"output": "false", "input": "parrotTrouble(true, 7)"}, {"output": "false", "input": "parrotTrouble(false, 6)"}]}, {"difficulty": 269.0, "summary": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "section": "Array-2", "solution": ["public int[] tenRun(int[] nums){\nint tenMode = -1;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] % 10 == 0)\ntenMode = nums[i];\nelse if(tenMode != -1)\nnums[i] = tenMode;\n}\nreturn nums;\n}", "/* For each multiple of 10 in the given array, change all the values \n * following it to be that multiple of 10, until encountering another \n * multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.\n */\npublic int[] tenRun(int[] nums) {\n    int current;\n    int i = 0;\n      \n    while(i < nums.length && nums[i] % 10 != 0)\n        i++;\n                \n    if(i >= nums.length)\n        return nums;\n                          \n    current = nums[i]; \n    i++;\n                                \n    while(i < nums.length) {\n        if(nums[i] % 10 == 0)\n            current = nums[i];\n        else\n            nums[i] = current;\n        i++;\n    }\n                                                              \n    return nums; \n}\n"], "url": "/prob/p199484", "title": "tenRun", "signature": "public int[] tenRun(int[] nums)", "examples": [{"output": "[2, 10, 10, 10, 20, 20]", "input": "tenRun([2, 10, 3, 4, 20, 5])"}, {"output": "[10, 10, 20, 20]", "input": "tenRun([10, 1, 20, 2])"}, {"output": "[10, 10, 10, 20]", "input": "tenRun([10, 1, 9, 20])"}]}, {"difficulty": 250.0, "summary": "Given a string, compute a new string by moving the first char to come after the next two chars, so \"abc\" yields \"bca\". Repeat this process for each subsequent group of 3 chars, so \"abcdef\" yields \"bcaefd\". Ignore any group of fewer than 3 chars at the end.", "section": "String-2", "solution": [], "url": "/prob/p122943", "title": "oneTwo", "signature": "public String oneTwo(String str)", "examples": [{"output": "\"bca\"", "input": "oneTwo(\"abc\")"}, {"output": "\"cat\"", "input": "oneTwo(\"tca\")"}, {"output": "\"catdog\"", "input": "oneTwo(\"tcagdo\")"}]}, {"difficulty": 209.0, "summary": "Given 3 int values, a b c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "section": "Logic-2", "solution": ["public int luckySum(int a, int b, int c){\nif(a == 13)\nreturn 0;\nif(b == 13)\nreturn a;\nif(c == 13)\nreturn (a + b);\nreturn (a + b + c);\n}", "/* Given 3 int values, a b c, return their sum. However, if one of the values \n * is 13 then it does not count towards the sum and values to its right do \n * not count. So for example, if b is 13, then both b and c do not count.\n */\npublic int luckySum(int a, int b, int c) {\n    if(a == 13)\n        return 0;\n           \n    if(b == 13)\n        return a;\n                     \n    if(c == 13)\n        return a + b;\n                               \n    return a + b + c;\n}\n"], "url": "/prob/p130788", "title": "luckySum", "signature": "public int luckySum(int a, int b, int c)", "examples": [{"output": "6", "input": "luckySum(1, 2, 3)"}, {"output": "3", "input": "luckySum(1, 2, 13)"}, {"output": "1", "input": "luckySum(1, 13, 3)"}]}, {"difficulty": 306.0, "summary": "Return an array that contains exactly the same numbers as the given array, but rearranged so that every 3 is immediately followed by a 4. Do not move the 3's, but every other number may move. The array contains the same number of 3's and 4's, every 3 has a number after it that is not a 3, and a 3 appears in the array before any 4.", "section": "Array-3", "solution": ["public int[] fix34(int[] nums){\nint j = 1;\nfor(int i = 0; i < nums.length - 1; i++)\n{\nif(nums[i] == 3 && nums[i+1] != 4)\n{\nfor(; nums[j] != 4; j++);\nnums[j] = nums[i+1];\nnums[i+1] = 4;\n}\n}\nreturn nums;\n}", "/* Return an array that contains exactly the same numbers as the given array, \n * but rearranged so that every 3 is immediately followed by a 4. Do not move \n * the 3's, but every other number may move. The array contains the same \n * number of 3's and 4's, every 3 has a number after it that is not a 3 or 4, \n * and a 3 appears in the array before any 4.\n */\npublic int[] fix34(int[] nums) {\n    int i = 0;\n    \n    while(i < nums.length && nums[i] != 3)\n        i++;\n              \n    int j = i + 1;\n                  \n    while(j < nums.length && nums[j] != 4)\n        j++;\n                            \n    while(i < nums.length) {\n        if(nums[i] == 3) {\n            int temp = nums[i+1];\n            nums[i+1] = nums[j];\n            nums[j] = temp;\n                                                          \n            while(j < nums.length && nums[j] != 4)\n                j++;\n        }\n        i++;\n    }\n\n    return nums;\n}\n"], "url": "/prob/p159339", "title": "fix34", "signature": "public int[] fix34(int[] nums)", "examples": [{"output": "[1, 3, 4, 1]", "input": "fix34([1, 3, 1, 4])"}, {"output": "[1, 3, 4, 1, 1, 3, 4]", "input": "fix34([1, 3, 1, 4, 4, 3, 1])"}, {"output": "[3, 4, 2, 2]", "input": "fix34([3, 2, 2, 4])"}]}, {"difficulty": 351.0, "summary": "Given an array of ints, compute recursively if the array contains somewhere a value followed in the array by that value times 10. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.", "section": "Recursion-1", "solution": ["public boolean array220(int[] nums, int index){\nif(index >= nums.length - 1)\nreturn false;\nif(nums[index] * 10 == nums[index+1])\nreturn true;\nreturn array220(nums, index + 1);\n}", "/* Given an array of ints, compute recursively if the array contains somewhere \n * a value followed in the array by that value times 10. We'll use the \n * convention of considering only the part of the array that begins at the \n * given index. In this way, a recursive call can pass index+1 to move down \n * the array. The initial call will pass in index as 0.\n */\npublic boolean array220(int[] nums, int index) {\n    if(index >= nums.length - 1)\n        return false;\n          \n    return nums[index+1] == 10 * nums[index] || array220(nums, index + 1);\n}\n"], "url": "/prob/p173469", "title": "array220", "signature": "public boolean array220(int[] nums, int index)", "examples": [{"output": "true", "input": "array220([1, 2, 20], 0)"}, {"output": "true", "input": "array220([3, 30], 0)"}, {"output": "false", "input": "array220([3], 0)"}]}, {"difficulty": 321.0, "summary": "Given a string, return the longest substring that appears at both the beginning and end of the string without overlapping. For example, sameEnds(\"abXab\") is \"ab\".", "section": "String-3", "solution": ["public String sameEnds(String string){\nString temp;\nint p = string.length();\nint i;\nif(p%2 == 1)\n{\ni = p/2;\np = i + 1;\n}\nelse\n{\ni = p/2;\np = i;\n}\nfor(; i >= 1; i--, p++)\n{\ntemp = string.substring(0, i);\nif(temp.equals(string.substring(p)))\nreturn temp;\n}\nreturn \"\";\n}", "/* Given a string, return the longest substring that appears at both the \n * beginning and end of the string without overlapping. For example, \n * sameEnds(\"abXab\") is \"ab\".\n */\npublic String sameEnds(String string) {\n    int start = (int) Math.ceil((double) string.length() / 2);\n    int end = string.length() / 2;\n      \n    for(int i = 0; i < string.length() / 2; i++) {\n        if(string.substring(0, end).equals(string.substring(start))) {\n            return string.substring(0, end);\n        } else {\n            start++;\n            end--;\n        }\n    }\n                                          \n    return \"\";\n}\n"], "url": "/prob/p131516", "title": "sameEnds", "signature": "public String sameEnds(String string)", "examples": [{"output": "\"ab\"", "input": "sameEnds(\"abXYab\")"}, {"output": "\"x\"", "input": "sameEnds(\"xx\")"}, {"output": "\"x\"", "input": "sameEnds(\"xxx\")"}]}, {"difficulty": 312.0, "summary": "We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we'll say have 3 ears, because they each have a raised foot. Recursively return the number of \"ears\" in the bunny line 1, 2, ... n (without loops or multiplication).", "section": "Recursion-1", "solution": ["public int bunnyEars2(int bunnies){\nif(bunnies == 0)\nreturn 0;\nif(bunnies % 2 == 1)\nreturn 2 + bunnyEars2(bunnies-1);\nreturn 3 + bunnyEars2(bunnies-1);\n}", "/* We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies \n * (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we'll say \n * have 3 ears, because they each have a raised foot. Recursively return the \n * number of \"ears\" in the bunny line 1, 2, ... n (without loops or \n * multiplication).\n */\npublic int bunnyEars2(int bunnies) {\n    if(bunnies == 0)\n        return 0;\n          \n    if(bunnies % 2 == 1)\n        return 2 + bunnyEars2(bunnies-1);\n                    \n    return 3 + bunnyEars2(bunnies-1);\n}\n"], "url": "/prob/p107330", "title": "bunnyEars2", "signature": "public int bunnyEars2(int bunnies)", "examples": [{"output": "0", "input": "bunnyEars2(0)"}, {"output": "2", "input": "bunnyEars2(1)"}, {"output": "5", "input": "bunnyEars2(2)"}]}, {"difficulty": 203.0, "summary": "Given a list of integers, return a list where each integer is multiplied with itself.", "section": "Functional-1", "solution": [], "url": "/prob/p139586", "title": "square", "signature": "public List<Integer> square(List<Integer> nums)", "examples": [{"output": "[1, 4, 9]", "input": "square([1, 2, 3])"}, {"output": "[36, 64, 36, 64, 1]", "input": "square([6, 8, -6, -8, 1])"}, {"output": "[]", "input": "square([])"}]}, {"difficulty": 172.0, "summary": "Given a string of any length, return a new string where the last 2 chars, if present, are swapped, so \"coding\" yields \"codign\".", "section": "String-1", "solution": ["public String lastTwo(String str){\nint len = str.length();\nif(len >= 2)\nreturn str.substring(0, len-2)+str.charAt(len-1)+str.charAt(len-2);\nelse\nreturn str;\n}", "/* Given a string of any length, return a new string where the last 2 chars, \n * if present, are swapped, so \"coding\" yields \"codign\".\n */\npublic String lastTwo(String str) {\n    if(str.length() < 2)\n        return str;\n          \n    return str.substring(0, str.length() - 2) + str.charAt(str.length() - 1) +\n        str.charAt(str.length() - 2);\n}\n"], "url": "/prob/p194786", "title": "lastTwo", "signature": "public String lastTwo(String str)", "examples": [{"output": "\"codign\"", "input": "lastTwo(\"coding\")"}, {"output": "\"cta\"", "input": "lastTwo(\"cat\")"}, {"output": "\"ba\"", "input": "lastTwo(\"ab\")"}]}, {"difficulty": 360.0, "summary": "Given a string, compute recursively a new string where all the lowercase 'x' chars have been moved to the end of the string.", "section": "Recursion-1", "solution": ["public String endX(String str){\nif(str.length() == 0)\nreturn str;\nif(str.charAt(0) == 'x')\nreturn endX(str.substring(1)) + 'x';\nreturn str.charAt(0) + endX(str.substring(1));\n}", "/* Given a string, compute recursively a new string where all the lowercase \n * 'x' chars have been moved to the end of the string.\n */\npublic String endX(String str) {\n    if(str.length() <= 1)\n        return str;\n          \n    if(str.charAt(0) == 'x')\n        return endX(str.substring(1)) + 'x';\n                    \n    return str.charAt(0) + endX(str.substring(1));\n}\n"], "url": "/prob/p105722", "title": "endX", "signature": "public String endX(String str)", "examples": [{"output": "\"rexx\"", "input": "endX(\"xxre\")"}, {"output": "\"hixxxx\"", "input": "endX(\"xxhixx\")"}, {"output": "\"hihixxx\"", "input": "endX(\"xhixhix\")"}]}, {"difficulty": 190.0, "summary": "Given a non-empty string and an int N, return the string made starting with char 0, and then every Nth char of the string. So if N is 3, use char 0, 3, 6, ... and so on. N is 1 or more.", "section": "Warmup-1", "solution": ["public String everyNth(String str, int n) {\n  String result = \"\";\n  \n  // Look at every nth char\n  for (int i=0; i<str.length(); i = i + n) {\n    result = result + str.charAt(i);\n  }\n  return result;\n}", "public String everyNth(String str, int n){\nStringBuilder stbuild = new StringBuilder();\nfor(int i = 0; i < str.length(); i += n)\nstbuild.append(str.charAt(i));\nreturn stbuild.toString();\n}", "/* Given a non-empty string and an int N, return the string made starting \n * with char 0, and then every Nth char of the string. So if N is 3, use \n * char 0, 3, 6, ... and so on. N is 1 or more.\n */\npublic String everyNth(String str, int n) {\n    int nSize = (int) Math.ceil((double) str.length() / n);\n    char[] nchar = new char[nSize];\n    int index = 0;\n        \n    for(int i = 0; i < str.length(); i += n) {\n        nchar[index] = str.charAt(i);\n        index++;\n    }\n                      \n    return new String(nchar);\n}\n"], "url": "/prob/p196441", "title": "everyNth", "signature": "public String everyNth(String str, int n)", "examples": [{"output": "\"Mrce\"", "input": "everyNth(\"Miracle\", 2)"}, {"output": "\"aceg\"", "input": "everyNth(\"abcdefg\", 2)"}, {"output": "\"adg\"", "input": "everyNth(\"abcdefg\", 3)"}]}, {"difficulty": 118.0, "summary": "Given 2 ints, a and b, return true if one if them is 10 or if their sum is 10.", "section": "Warmup-1", "solution": ["public boolean makes10(int a, int b) {\n  return (a == 10 || b == 10 || a+b == 10);\n}", "public boolean makes10( int a, int b ){\n{\nreturn a == 10 || b == 10 || ( a + b ) == 10;\n}", ["public boolean makes10(int a, int b){", "", "", "// Given an int n, return true if it is within 10 of 100 or 200.", "// Note: Math.abs(num) computes the absolute value of a number."], "/* Given 2 ints, a and b, return true if one if them is 10 or if their sum is \n * 10.\n */\npublic boolean makes10(int a, int b) {\n    return a == 10 || b == 10 || a + b == 10;\n}\n"], "url": "/prob/p182873", "title": "makes10", "signature": "public boolean makes10(int a, int b)", "examples": [{"output": "true", "input": "makes10(9, 10)"}, {"output": "false", "input": "makes10(9, 9)"}, {"output": "true", "input": "makes10(1, 9)"}]}, {"difficulty": 242.0, "summary": "Given arrays nums1 and nums2 of the same length, for every element in nums1, consider the corresponding element in nums2 (at the same index). Return the count of the number of times that the two elements differ by 2 or less, but are not equal.", "section": "Array-2", "solution": ["public int matchUp(int[] nums1, int[] nums2){\nint count = 0;\nint diff;\nfor(int i = 0; i < nums1.length; i++)\n{\ndiff = Math.abs(nums1[i] - nums2[i]);\nif(diff <= 2 && diff != 0)\ncount++;\n}\nreturn count;\n}", "/* Given arrays nums1 and nums2 of the same length, for every element in \n * nums1, consider the corresponding element in nums2 (at the same index). \n * Return the count of the number of times that the two elements differ by 2 \n * or less, but are not equal.\n */\npublic int matchUp(int[] nums1, int[] nums2) {\n    int count = 0;\n    \n    for(int i = 0; i < nums1.length; i++) {\n        if(Math.abs(nums1[i] - nums2[i]) <= 2 && nums1[i] != nums2[i])\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p136254", "title": "matchUp", "signature": "public int matchUp(int[] nums1, int[] nums2)", "examples": [{"output": "2", "input": "matchUp([1, 2, 3], [2, 3, 10])"}, {"output": "3", "input": "matchUp([1, 2, 3], [2, 3, 5])"}, {"output": "2", "input": "matchUp([1, 2, 3], [2, 3, 3])"}]}, {"difficulty": 303.0, "summary": "Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).", "section": "Recursion-1", "solution": ["public int factorial(int n){\nif(n == 1)\nreturn 1;\nreturn n*factorial(n-1);\n}", "/* Given n of 1 or more, return the factorial of n, which is \n * n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).\n */\npublic int factorial(int n) {\n    if(n == 1)\n        return 1;\n          \n    return n * factorial(n - 1);\n}\n"], "url": "/prob/p154669", "title": "factorial", "signature": "public int factorial(int n)", "examples": [{"output": "1", "input": "factorial(1)"}, {"output": "2", "input": "factorial(2)"}, {"output": "6", "input": "factorial(3)"}]}, {"difficulty": 151.0, "summary": "Given a string and an int n, return a string made of the first and last n chars from the string. The string length will be at least n.", "section": "String-1", "solution": [["public String nTwice(String str, int n){", "", "", "// Given a string and an index, return a string length 2 starting at the given index.", "// If the index is too big or too small to define a string length 2, use the first 2 chars.", "// The string length will be at least 2."], "/* Given a string and an int n, return a string made of the first and last n \n * chars from the string. The string length will be at least n.\n */\npublic String nTwice(String str, int n) {\n    return str.substring(0, n) + str.substring(str.length() - n);\n}\n"], "url": "/prob/p174148", "title": "nTwice", "signature": "public String nTwice(String str, int n)", "examples": [{"output": "\"Helo\"", "input": "nTwice(\"Hello\", 2)"}, {"output": "\"Choate\"", "input": "nTwice(\"Chocolate\", 3)"}, {"output": "\"Ce\"", "input": "nTwice(\"Chocolate\", 1)"}]}, {"difficulty": 224.0, "summary": "Given an array of ints, return true if the sum of all the 2's in the array is exactly 8.", "section": "Array-2", "solution": ["public boolean sum28(int[] nums){\nint sum = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] == 2)\nsum += 2;\n}\nreturn (sum == 8);\n}", "/* Given an array of ints, return true if the sum of all the 2's in the array \n * is exactly 8.\n */\npublic boolean sum28(int[] nums) {\n    int sum = 0;\n    \n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 2)\n            sum += nums[i];\n    }\n                    \n    return sum == 8;\n}\n"], "url": "/prob/p199612", "title": "sum28", "signature": "public boolean sum28(int[] nums)", "examples": [{"output": "true", "input": "sum28([2, 3, 2, 2, 4, 2])"}, {"output": "false", "input": "sum28([2, 3, 2, 2, 4, 2, 2])"}, {"output": "false", "input": "sum28([1, 2, 3, 4])"}]}, {"difficulty": 139.0, "summary": "Given an int array length 2, return true if it does not contain a 2 or 3.", "section": "Array-1", "solution": ["public boolean no23(int[] nums){\nif(nums[0] == 2 || nums[0] == 3)\nreturn false;\nreturn !(nums[1] == 2 || nums[1] == 3);\n}", "/* Given an int array length 2, return true if it does not contain a 2 or 3.\n */\npublic boolean no23(int[] nums) {\n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 2 || nums[i] == 3)\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p175689", "title": "no23", "signature": "public boolean no23(int[] nums)", "examples": [{"output": "true", "input": "no23([4, 5])"}, {"output": "false", "input": "no23([4, 2])"}, {"output": "false", "input": "no23([3, 5])"}]}, {"difficulty": 210.0, "summary": "Given a list of strings, return a list where each string has \"y\" added at its start and end.", "section": "Functional-1", "solution": [], "url": "/prob/p177528", "title": "moreY", "signature": "public List<String> moreY(List<String> strings)", "examples": [{"output": "[\"yay\", \"yby\", \"ycy\"]", "input": "moreY([\"a\", \"b\", \"c\"])"}, {"output": "[\"yhelloy\", \"ytherey\"]", "input": "moreY([\"hello\", \"there\"])"}, {"output": "[\"yyayy\"]", "input": "moreY([\"yay\"])"}]}, {"difficulty": 220.0, "summary": "Given a list of non-negative integers, return an integer list of the rightmost digits. (Note: use %)", "section": "Functional-1", "solution": [], "url": "/prob/p152194", "title": "rightDigit", "signature": "public List<Integer> rightDigit(List<Integer> nums)", "examples": [{"output": "[1, 2, 3]", "input": "rightDigit([1, 22, 93])"}, {"output": "[6, 8, 6, 8, 1]", "input": "rightDigit([16, 8, 886, 8, 1])"}, {"output": "[0, 0]", "input": "rightDigit([10, 0])"}]}, {"difficulty": 136.0, "summary": "Given a string, return a \"rotated right 2\" version where the last 2 chars are moved to the start. The string length will be at least 2.", "section": "String-1", "solution": ["public String right2(String str) {{\nreturn str.substring(str.length() - 2) + str.substring(0, str.length() - 2);\n}", "public String right2(String str){\nint len = str.length()-2;\nreturn (str.substring(len) + str.substring(0, len));\n}", "/* Given a string, return a \"rotated right 2\" version where the last 2 chars \n * are moved to the start. The string length will be at least 2.\n */\npublic String right2(String str) {\n    return str.substring(str.length() - 2) + \n        str.substring(0, str.length() - 2);\n}\n"], "url": "/prob/p130781", "title": "right2", "signature": "public String right2(String str)", "examples": [{"output": "\"loHel\"", "input": "right2(\"Hello\")"}, {"output": "\"vaja\"", "input": "right2(\"java\")"}, {"output": "\"Hi\"", "input": "right2(\"Hi\")"}]}, {"difficulty": 245.0, "summary": "Given an array of ints, return true if the array contains two 7's next to each other, or there are two 7's separated by one element, such as with {7, 1, 7}.", "section": "Array-2", "solution": ["public boolean has77(int[] nums){\nfor(int i = 0; i < nums.length - 1; i++)\n{\nif(nums[i] == 7)\n{\nif(nums[i+1] == 7)\nreturn true;\nelse if(i < nums.length - 2 && nums[i+2] == 7)\nreturn true;\n}\n}\nreturn false;\n}", "/* Given an array of ints, return true if the array contains two 7's next \n * to each other, or there are two 7's separated by one element, such as \n * with {7, 1, 7}.\n */\npublic boolean has77(int[] nums) {\n    for(int i = 0; i < nums.length - 1; i++) {\n        if(nums[i] == 7 && nums[i+1] == 7)\n            return true;\n                  \n        if(i <= nums.length - 3 && nums[i] == 7 && nums[i+2] == 7)\n            return true;\n    }\n                                \n    return false;\n}\n"], "url": "/prob/p168357", "title": "has77", "signature": "public boolean has77(int[] nums)", "examples": [{"output": "true", "input": "has77([1, 7, 7])"}, {"output": "true", "input": "has77([1, 7, 1, 7])"}, {"output": "false", "input": "has77([1, 7, 1, 1, 7])"}]}, {"difficulty": 306.0, "summary": "Given two strings, ", "section": "String-3", "solution": ["public String withoutString(String base, String remove){\nint blen = base.length();\nint rlen = remove.length();\nint current = 0;\nint place;\nStringBuilder stbuild = new StringBuilder(blen);\nString blow = base.toLowerCase();\nString rlow = remove.toLowerCase();\nplace = blow.indexOf(rlow);\nwhile(place != -1)\n{\nfor(; current < place; current++)\n{\nstbuild.append(base.charAt(current));\n}\ncurrent = place+rlen;\nplace = blow.indexOf(rlow, current);\n}\nfor(; current < blen; current++)\n{\nstbuild.append(base.charAt(current));\n}\nreturn stbuild.toString();\n}", "/* Given two strings, base and remove, return a version of the base string \n * where all instances of the remove string have been removed (not case \n * sensitive). You may assume that the remove string is length 1 or more. \n * Remove only non-overlapping instances, so with \"xxx\" removing \"xx\" \n * leaves \"x\".\n */\npublic String withoutString(String base, String remove) {\n    char[] arr = new char[base.length()];\n    int count = 0;\n    int i = 0;\n        \n    while(i <= base.length() - remove.length()) {\n        if(base.substring(i, i + remove.length()).toLowerCase().equals(\n            remove.toLowerCase())) {\n            i += remove.length();\n        } else {\n            arr[count] = base.charAt(i);\n            count++;\n            i++;\n        }\n    }\n                                                        \n    while(i < base.length()) {\n        arr[count] = base.charAt(i);\n        count++;\n        i++;\n    }\n                                                                          \n    return new String(arr, 0, count);\n}\n"], "url": "/prob/p192570", "title": "withoutString", "signature": "public String withoutString(String base, String remove)", "examples": [{"output": "\"He there\"", "input": "withoutString(\"Hello there\", \"llo\")"}, {"output": "\"Hllo thr\"", "input": "withoutString(\"Hello there\", \"e\")"}, {"output": "\"Hello there\"", "input": "withoutString(\"Hello there\", \"x\")"}]}, {"difficulty": 166.0, "summary": "Given an array of ints of odd length, return a new array length 3 containing the elements from the middle of the array. The array length will be at least 3.", "section": "Array-1", "solution": ["public int[] midThree(int[] nums){\nint[] halfArr = new int[3];\nint half = nums.length/2;\nhalfArr[0] = nums[half-1];\nhalfArr[1] = nums[half];\nhalfArr[2] = nums[half+1];\nreturn halfArr;\n}", "/* Given an array of ints of odd length, return a new array length 3 \n * containing the elements from the middle of the array. The array length \n * will be at least 3.\n */\npublic int[] midThree(int[] nums) {\n    int[] arr = new int[3];\n    arr[0] = nums[nums.length / 2 - 1];\n    arr[1] = nums[nums.length / 2];\n    arr[2] = nums[nums.length / 2 + 1];\n    return arr;\n}\n"], "url": "/prob/p155713", "title": "midThree", "signature": "public int[] midThree(int[] nums)", "examples": [{"output": "[2, 3, 4]", "input": "midThree([1, 2, 3, 4, 5])"}, {"output": "[7, 5, 3]", "input": "midThree([8, 6, 7, 5, 3, 0, 9])"}, {"output": "[1, 2, 3]", "input": "midThree([1, 2, 3])"}]}, {"difficulty": 142.0, "summary": "Given a string, return a version without both the first and last char of the string. The string may be any length, including 0.", "section": "String-1", "solution": ["public String withouEnd2(String str) {{\nreturn (str.length() <= 2) ? \"\" : str.substring(1, str.length() - 1);\n}", "public String withouEnd2(String str){\nint len = str.length();\nif(len >= 3)\nreturn str.substring(1, len-1);\nreturn \"\";\n}"], "url": "/prob/p174254", "title": "withouEnd2", "signature": "public String withouEnd2(String str)", "examples": [{"output": "\"ell\"", "input": "withouEnd2(\"Hello\")"}, {"output": "\"b\"", "input": "withouEnd2(\"abc\")"}, {"output": "\"\"", "input": "withouEnd2(\"ab\")"}]}, {"difficulty": 218.0, "summary": "Given a map of food keys and topping values, modify and return the map as follows:  if the key \"potato\" has a value, set that as the value for the key \"fries\". If the key \"salad\" has a value, set that as the value for the key \"spinach\".", "section": "Map-1", "solution": [], "url": "/prob/p128461", "title": "topping3", "signature": "public Map<String, String> topping3(Map<String, String> map)", "examples": [{"output": "{\"potato\": \"ketchup\", \"fries\": \"ketchup\"}", "input": "topping3({\"potato\": \"ketchup\"})"}, {"output": "{\"potato\": \"butter\", \"fries\": \"butter\"}", "input": "topping3({\"potato\": \"butter\"})"}, {"output": "{\"spinach\": \"oil\", \"salad\": \"oil\", \"potato\": \"ketchup\", \"fries\": \"ketchup\"}", "input": "topping3({\"salad\": \"oil\", \"potato\": \"ketchup\"})"}]}, {"difficulty": 315.0, "summary": "We'll say that a \"triple\" in a string is a char appearing three times in a row. Return the number of triples in the given string. The triples may overlap.", "section": "String-3", "solution": ["public int countTriple(String str){\nint count = 0;\nint lim = str.length() - 2;\nfor(int i = 0; i < lim; i++)\n{\nif(str.charAt(i) == str.charAt(i+1) && str.charAt(i) == str.charAt(i+2))\ncount++;\n}\nreturn count;\n}", "/* We'll say that a \"triple\" in a string is a char appearing three times in a \n * row. Return the number of triples in the given string. The triples may \n * overlap.\n */\npublic int countTriple(String str) {\n    int count = 0;\n    \n    for(int i = 0; i <= str.length() - 3; i++) {\n        if(str.charAt(i) == str.charAt(i+1) && \n            str.charAt(i) == str.charAt(i+2))\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p195714", "title": "countTriple", "signature": "public int countTriple(String str)", "examples": [{"output": "1", "input": "countTriple(\"abcXXXabc\")"}, {"output": "3", "input": "countTriple(\"xxxabyyyycd\")"}, {"output": "0", "input": "countTriple(\"a\")"}]}, {"difficulty": 166.0, "summary": "Given 2 strings, a and b, return a new string made of the first char of a and the last char of b, so \"yo\" and \"java\" yields \"ya\". If either string is length 0, use '@' for its missing char.", "section": "String-1", "solution": ["public String lastChars(String a, String b){\nint lenB = b.length();\nString combStr = \"\";\ncombStr += (a.length() >= 1) ? a.charAt(0) : '@';\ncombStr += (lenB >= 1) ? b.charAt(lenB-1) : '@';\nreturn combStr;\n}", "/* Given 2 strings, a and b, return a new string made of the first char of a \n * and the last char of b, so \"yo\" and \"java\" yields \"ya\". If either string \n * is length 0, use '@' for its missing char.\n */\npublic String lastChars(String a, String b) {\n    String first = \"@\";\n    String last = \"@\";;\n      \n    if(a.length() > 0)\n        first = a.substring(0,1);\n                \n    if(b.length() > 0)\n        last = b.substring(b.length() - 1);\n                          \n    return first + last;\n}\n"], "url": "/prob/p138183", "title": "lastChars", "signature": "public String lastChars(String a, String b)", "examples": [{"output": "\"ls\"", "input": "lastChars(\"last\", \"chars\")"}, {"output": "\"ya\"", "input": "lastChars(\"yo\", \"java\")"}, {"output": "\"h@\"", "input": "lastChars(\"hi\", \"\")"}]}, {"difficulty": 130.0, "summary": "Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.", "section": "String-1", "solution": ["public String nonStart(String a, String b) {{\nreturn a.substring(1) + b.substring(1);\n}", ["public String nonStart(String a, String b){", "", "", "// Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end.", "// The string length will be at least 2."], "/* Given 2 strings, return their concatenation, except omit the first char of \n * each. The strings will be at least length 1.\n */\npublic String nonStart(String a, String b) {\n    return a.substring(1) + b.substring(1);\n}\n"], "url": "/prob/p143825", "title": "nonStart", "signature": "public String nonStart(String a, String b)", "examples": [{"output": "\"ellohere\"", "input": "nonStart(\"Hello\", \"There\")"}, {"output": "\"avaode\"", "input": "nonStart(\"java\", \"code\")"}, {"output": "\"hotlava\"", "input": "nonStart(\"shotl\", \"java\")"}]}, {"difficulty": 306.0, "summary": "We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).", "section": "Recursion-1", "solution": ["public int bunnyEars(int bunnies){\nif(bunnies == 0)\nreturn 0;\nreturn 2+bunnyEars(bunnies-1);\n}", "/* We have a number of bunnies and each bunny has two big floppy ears. We \n * want to compute the total number of ears across all the bunnies recursively \n * (without loops or multiplication).\n */\npublic int bunnyEars(int bunnies) {\n    if(bunnies == 0)\n        return 0;\n          \n    return 2 + bunnyEars(bunnies - 1);\n}\n"], "url": "/prob/p183649", "title": "bunnyEars", "signature": "public int bunnyEars(int bunnies)", "examples": [{"output": "0", "input": "bunnyEars(0)"}, {"output": "2", "input": "bunnyEars(1)"}, {"output": "4", "input": "bunnyEars(2)"}]}, {"difficulty": 354.0, "summary": "Given a string, compute recursively a new string where all the adjacent chars are now separated by a \"*\".", "section": "Recursion-1", "solution": ["public String allStar(String str){\nif(str.length() < 2)\nreturn str;\nreturn str.charAt(0) + \"*\" + allStar(str.substring(1));\n}", "/* Given a string, compute recursively a new string where all the adjacent \n * chars are now separated by a \"*\".\n */\npublic String allStar(String str) {\n    if(str.length() <= 1)\n        return str;\n          \n    return str.charAt(0) + \"*\" + allStar(str.substring(1));\n}\n"], "url": "/prob/p183394", "title": "allStar", "signature": "public String allStar(String str)", "examples": [{"output": "\"h*e*l*l*o\"", "input": "allStar(\"hello\")"}, {"output": "\"a*b*c\"", "input": "allStar(\"abc\")"}, {"output": "\"a*b\"", "input": "allStar(\"ab\")"}]}, {"difficulty": 333.0, "summary": "Given a string, compute recursively (no loops) the number of times lowercase \"hi\" appears in the string.", "section": "Recursion-1", "solution": ["public int countHi( String str ){\n{\nint hiCount = 0;\n\nfor ( int i = str.indexOf( \"hi\" ); i != -1; i = str.indexOf( \"hi\", i + 1 ) )\n{\nhiCount++;\n}\n\nreturn hiCount;\n}", "public int countHi(String str){\nint len = str.length()-1;\nint times = 0;\nfor(int i = 0; i < len; i++)\n{\nif(str.charAt(i) == 'h' && str.charAt(i+1) == 'i')\ntimes++;\n}\nreturn times;\n}", "/* Given a string, compute recursively (no loops) the number of times \n * lowercase \"hi\" appears in the string.\n */\npublic int countHi(String str) {\n    if(str.length() < 2)\n        return 0;\n          \n    if(str.substring(0, 2).equals(\"hi\"))\n        return 1 + countHi(str.substring(2));\n                    \n    return countHi(str.substring(1));\n}\n"], "url": "/prob/p184029", "title": "countHi", "signature": "public int countHi(String str)", "examples": [{"output": "1", "input": "countHi(\"xxhixx\")"}, {"output": "2", "input": "countHi(\"xhixhix\")"}, {"output": "1", "input": "countHi(\"hi\")"}]}, {"difficulty": 215.0, "summary": "Given three ints, a b c, return true if one of b or c is \"close\" (differing from a by at most 1), while the other is \"far\", differing from both other values by 2 or more. Note: Math.abs(num) computes the absolute value of a number.", "section": "Logic-2", "solution": ["public boolean closeFar(int a, int b, int c){\nreturn (Math.abs(b-a) <= 1 && Math.abs(c-a) >= 2 && Math.abs(c-b) >= 2\n|| Math.abs(c-a) <= 1 && Math.abs(b-a) >= 2 && Math.abs(b-c) >= 2);\n}", "/* Given three ints, a b c, return true if one of b or c is \"close\" \n * (differing from a by at most 1), while the other is \"far\", differing from \n * both other values by 2 or more. Note: Math.abs(num) computes the absolute \n * value of a number.\n */\npublic boolean closeFar(int a, int b, int c) {\n    return (isClose(a, b) && isFar(a, b, c)) ||\n        (isClose(a, c) && isFar(a, c, b));\n}\n\npublic boolean isClose(int a, int b) {\n    return Math.abs(a - b) <= 1;\n}\n\npublic boolean isFar(int a, int b, int c) {\n    return Math.abs(a - c) >= 2 && Math.abs(b - c) >= 2;\n}\n"], "url": "/prob/p138990", "title": "closeFar", "signature": "public boolean closeFar(int a, int b, int c)", "examples": [{"output": "true", "input": "closeFar(1, 2, 10)"}, {"output": "false", "input": "closeFar(1, 2, 3)"}, {"output": "true", "input": "closeFar(4, 1, 3)"}]}, {"difficulty": 157.0, "summary": "You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.", "section": "Logic-1", "solution": ["public int redTicket( int a, int b, int c ){\n{\nif ( a == 2 && b == 2 && c == 2 )\n{\nreturn 10;\n}\nif ( a == b && b == c )\n{\nreturn 5;\n}\nif ( a != b && a != c )\n{\nreturn 1;\n}\nreturn 0;\n}", "public int redTicket(int a, int b, int c){\nif(a == b && b == c)\n{\nif(a == 2)\nreturn 10;\nreturn 5;\n}\nif(a != b && a !=c)\nreturn 1;\nreturn 0;\n}", "/* You have a red lottery ticket showing ints a, b, and c, each of which is \n * 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if \n * they are all the same, the result is 5. Otherwise so long as both b and c \n * are different from a, the result is 1. Otherwise the result is 0.\n */\npublic int redTicket(int a, int b, int c) {\n    if(a == 2 && b == 2 && c == 2)\n        return 10;\n          \n    if(a == b && b == c)\n        return 5;\n                    \n    if(a != b && a != c)\n        return 1;\n                            \n    return 0;\n}\n"], "url": "/prob/p170833", "title": "redTicket", "signature": "public int redTicket(int a, int b, int c)", "examples": [{"output": "10", "input": "redTicket(2, 2, 2)"}, {"output": "0", "input": "redTicket(2, 2, 1)"}, {"output": "5", "input": "redTicket(0, 0, 0)"}]}, {"difficulty": 424.0, "summary": "Given an array of ints, is it possible to divide the ints into two groups, so that the sum of the two groups is the same, with these constraints: all the values that are multiple of 5 must be in one group, and all the values that are a multiple of 3 (and not a multiple of 5) must be in the other. (No loops needed.)", "section": "Recursion-2", "solution": [["public boolean split53(int[] nums){", "", "// // recursive helper method"], "/* Given an array of ints, is it possible to divide the ints into two groups, \n * so that the sum of the two groups is the same, with these constraints: all \n * the values that are multiple of 5 must be in one group, and all the values \n * that are a multiple of 3 (and not a multiple of 5) must be in the other. \n * (No loops needed.)\n */\npublic boolean split53(int[] nums) {\n    return split53Helper(0, nums, 0, 0);\n}\n\npublic boolean split53Helper(int start, int[] nums, int mult5, int mult3) {\n    if(start >= nums.length)\n        return mult5 == mult3;\n            \n    if(nums[start] % 5 == 0)\n        return split53Helper(start+1, nums, mult5 + nums[start], mult3);\n                      \n    if(nums[start] % 3 == 0)\n        return split53Helper(start+1, nums, mult5, mult3 + nums[start]);\n                                \n    if(split53Helper(start+1, nums, mult5 + nums[start], mult3))\n        return true;\n                                          \n    if(split53Helper(start+1, nums, mult5, mult3 + nums[start]))\n        return true;\n                                                    \n    return false;\n}\n"], "url": "/prob/p168295", "title": "split53", "signature": "public boolean split53(int[] nums)", "examples": [{"output": "true", "input": "split53([1, 1])"}, {"output": "false", "input": "split53([1, 1, 1])"}, {"output": "true", "input": "split53([2, 4, 2])"}]}, {"difficulty": 218.0, "summary": "Return true if the given string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.). So \"xxyz\" counts but \"x.xyz\" does not.", "section": "String-2", "solution": ["public boolean xyzThere( String str ){\n{\nboolean result = false;\n\nfor ( int i = 0; i < str.length() - 2; i++ )\n{\nif ( \"xyz\".equals( str.substring( i, i + 3 ) ) )\n{\nif ( i == 0 || str.charAt( i - 1 ) != '.' )\n{\nreturn true;\n}\n}\n}\n\nreturn result;\n}", "public boolean xyzThere(String str){\nint len = str.length() - 2;\nfor(int i = 0; i < len; i++)\n{\nif(str.charAt(i) == 'x' && str.charAt(i+1) == 'y' && str.charAt(i+2) == 'z')\n{\nif(i == 0 || str.charAt(i-1) != '.')\nreturn true;\n}\n}\nreturn false;\n}", "/* Return true if the given string contains an appearance of \"xyz\" where the \n * xyz is not directly preceeded by a period (.). So \"xxyz\" counts but \n * \"x.xyz\" does not.\n */\npublic boolean xyzThere(String str) {\n    if(str.length() >= 3 && str.substring(0, 3).equals(\"xyz\"))\n        return true;\n          \n    for(int i = 1; i < str.length() - 2; i++) {\n        if(str.charAt(i - 1) != '.' && str.substring(i, i + 3).equals(\"xyz\"))\n            return true;\n    }\n                          \n    return false;\n}\n"], "url": "/prob/p136594", "title": "xyzThere", "signature": "public boolean xyzThere(String str)", "examples": [{"output": "true", "input": "xyzThere(\"abcxyz\")"}, {"output": "false", "input": "xyzThere(\"abc.xyz\")"}, {"output": "true", "input": "xyzThere(\"xyz.abc\")"}]}, {"difficulty": 227.0, "summary": "We'll say that a positive int divides itself if every digit in the number divides into the number evenly. So for example 128 divides itself since 1, 2, and 8 all divide into 128 evenly. We'll say that 0 does not divide into anything evenly, so no number with a 0 digit divides itself. Note: use % to get the rightmost digit, and / to discard the rightmost digit.", "section": "AP-1", "solution": ["/* We'll say that a positive int divides itself if every digit in the number \n * divides into the number evenly. So for example 128 divides itself since \n * 1, 2, and 8 all divide into 128 evenly. We'll say that 0 does not divide \n * into anything evenly, so no number with a 0 digit divides itself.\n */\npublic boolean dividesSelf(int n) {\n\n    for(int val = n; val != 0; val /= 10) {\n        int digit = val % 10;\n        if(digit == 0 || n % digit != 0)\n            return false;\n    }\n                      \n    return true;\n}\n"], "url": "/prob/p165941", "title": "dividesSelf", "signature": "public boolean dividesSelf(int n)", "examples": [{"output": "true", "input": "dividesSelf(128)"}, {"output": "true", "input": "dividesSelf(12)"}, {"output": "false", "input": "dividesSelf(120)"}]}, {"difficulty": 254.0, "summary": "Given an array of ints, return true if the value 3 appears in the array exactly 3 times, and no 3's are next to each other.", "section": "Array-2", "solution": ["public boolean haveThree(int[] nums){\nint count = 0;\nboolean isPerv3 = false;\nfor(int i = 0 ; i < nums.length && count <= 3; i++)\n{\nif(nums[i] == 3)\n{\nif(isPerv3)\nreturn false;\nelse\n{\ncount++;\nisPerv3 = true;\n}\n}\nelse\nisPerv3 = false;\n}\nreturn (count == 3);\n}", "/* Given an array of ints, return true if the value 3 appears in the array \n * exactly 3 times, and no 3's are next to each other.\n */\npublic boolean haveThree(int[] nums) {\n    int count = 0;\n    \n    if(nums.length >= 1 && nums[0] == 3)\n        count++;\n\n    for(int i = 1; i < nums.length; i++) {\n        if(nums[i - 1] == 3 && nums[i] == 3)\n            return false;\n                            \n        if(nums[i] == 3)\n            count++;\n    }\n                                          \n    return count == 3;\n}\n"], "url": "/prob/p109783", "title": "haveThree", "signature": "public boolean haveThree(int[] nums)", "examples": [{"output": "true", "input": "haveThree([3, 1, 3, 1, 3])"}, {"output": "false", "input": "haveThree([3, 1, 3, 3])"}, {"output": "false", "input": "haveThree([3, 4, 3, 3, 4])"}]}, {"difficulty": 212.0, "summary": "Given a non-empty string like \"Code\" return a string like \"CCoCodCode\".", "section": "Warmup-2", "solution": ["public String stringSplosion(String str) {\n  String result = \"\";\n  // On each iteration, add the substring of the chars 0..i\n  for (int i=0; i<str.length(); i++) {\n    result = result + str.substring(0, i+1);\n  }\n  return result;\n}", "public String stringSplosion( String str ){\n{\nString result = \"\";\n\nfor ( int i = 0; i < str.length(); i++ )\n{\nresult += str.substring( 0, i + 1 );\n}\nreturn result;\n}", "public String stringSplosion(String str){\nStringBuilder stbuild;\nint len = str.length();\nint bufferSize = 1;\nfor(int i = 2; i <= len; i++)\nbufferSize *= i;\nstbuild = new StringBuilder(bufferSize);\nfor(int i = 1; i <= len; i++)\n{\nfor(int j = 0; j < i; j++)\nstbuild.append(str.charAt(j));\n}\nreturn stbuild.toString();\n}", "/* Given a non-empty string like \"Code\" return a string like \"CCoCodCode\".\n */\npublic String stringSplosion(String str) {\n    int size = (str.length() * (str.length() + 1)) / 2;\n    char[] result = new char[size];\n      \n    int index = 0;\n    for(int i = 0; i < str.length(); i++) {\n        for(int j = 0; j <= i; j++) {\n            result[index] = str.charAt(j);\n            index++;\n        }\n    }\n                                  \n    return new String(result);\n}\n"], "url": "/prob/p117334", "title": "stringSplosion", "signature": "public String stringSplosion(String str)", "examples": [{"output": "\"CCoCodCode\"", "input": "stringSplosion(\"Code\")"}, {"output": "\"aababc\"", "input": "stringSplosion(\"abc\")"}, {"output": "\"aab\"", "input": "stringSplosion(\"ab\")"}]}, {"difficulty": 403.0, "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target? This is a classic backtracking recursion problem. Once you understand the recursive backtracking strategy in this problem, you can use the same pattern for many problems to search a space of choices. Rather than looking at the whole array, our convention is to consider the part of the array starting at index ", "section": "Recursion-2", "solution": ["public boolean groupSum(int start, int[] nums, int target){\nif(target == 0)\nreturn true;\nif(start == nums.length)\nreturn false;\nif(groupSum(start + 1, nums, target - nums[start]))\nreturn true;\nreturn groupSum(start + 1, nums, target);\n}", "/* Given an array of ints, is it possible to choose a group of some of the \n * ints, such that the group sums to the given target? This is a classic \n * backtracking recursion problem. Rather than looking at the whole array, \n * our convention is to consider the part of the array starting at index \n * start and continuing to the end of the array. The caller can specify the \n * whole array simply by passing start as 0. No loops are needed -- the \n * recursive calls progress down the array.\n */\npublic boolean groupSum(int start, int[] nums, int target) {\n    if(start >= nums.length)\n        return target == 0;\n          \n    if(groupSum(start+1, nums, target - nums[start]))\n        return true;\n                    \n    if(groupSum(start+1, nums, target))\n        return true;\n                              \n    return false;\n}\n"], "url": "/prob/p145416", "title": "groupSum", "signature": "public boolean groupSum(int start, int[] nums, int target)", "examples": [{"output": "true", "input": "groupSum(0, [2, 4, 8], 10)"}, {"output": "true", "input": "groupSum(0, [2, 4, 8], 14)"}, {"output": "false", "input": "groupSum(0, [2, 4, 8], 9)"}]}, {"difficulty": 200.0, "summary": "Given a list of integers, return a list of the integers, omitting any that are less than 0.", "section": "Functional-2", "solution": [], "url": "/prob/p103456", "title": "noNeg", "signature": "public List<Integer> noNeg(List<Integer> nums)", "examples": [{"output": "[1]", "input": "noNeg([1, -2])"}, {"output": "[3, 3]", "input": "noNeg([-3, -3, 3, 3])"}, {"output": "[]", "input": "noNeg([-1, -1, -1])"}]}, {"difficulty": 109.0, "summary": "The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.", "section": "Logic-1", "solution": ["public boolean squirrelPlay( int temp, boolean isSummer ){\n{\nreturn isSummer ? ( 60 <= temp && temp <= 100 ) : ( 60 <= temp && temp <= 90 );\n}", "public boolean squirrelPlay(int temp, boolean isSummer){\nif(isSummer)\nreturn (temp >= 60 && temp <= 100);\nreturn (temp >= 60 && temp <= 90);\n}", "/* The squirrels in Palo Alto spend most of the day playing. In particular, \n * they play if the temperature is between 60 and 90 (inclusive). Unless it \n * is summer, then the upper limit is 100 instead of 90. Given an int \n * temperature and a boolean isSummer, return true if the squirrels play and \n * false otherwise.\n */\npublic boolean squirrelPlay(int temp, boolean isSummer) {\n    if(isSummer && 60 <= temp && temp <= 100)\n        return true;\n          \n    if(!isSummer && 60 <= temp && temp <= 90)\n        return true;\n                    \n    return false;\n}\n"], "url": "/prob/p141061", "title": "squirrelPlay", "signature": "public boolean squirrelPlay(int temp, boolean isSummer)", "examples": [{"output": "true", "input": "squirrelPlay(70, false)"}, {"output": "false", "input": "squirrelPlay(95, false)"}, {"output": "true", "input": "squirrelPlay(95, true)"}]}, {"difficulty": 233.0, "summary": "Given an array of ints, return true if it contains no 1's or it contains no 4's.", "section": "Array-2", "solution": ["public boolean no14(int[] nums){\nboolean noOne = true, noFour = true;\nfor(int i = 0; i < nums.length && (noOne || noFour); i++)\n{\nif(nums[i] == 1)\nnoOne = false;\nelse if(nums[i] == 4)\nnoFour = false;\n}\nreturn (noOne || noFour);\n}", "/* Given an array of ints, return true if it contains no 1's or it contains \n * no 4's.\n */\npublic boolean no14(int[] nums) {\n    boolean has1 = false;\n    boolean has4 = false;\n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 1)\n            has1 = true;\n                      \n        if(nums[i] == 4)\n            has4 = true;\n    }\n                                    \n    return !has1 || !has4;\n}\n"], "url": "/prob/p136648", "title": "no14", "signature": "public boolean no14(int[] nums)", "examples": [{"output": "true", "input": "no14([1, 2, 3])"}, {"output": "false", "input": "no14([1, 2, 3, 4])"}, {"output": "true", "input": "no14([2, 3, 4])"}]}, {"difficulty": 350.0, "summary": "The classic word-count algorithm: given an array of strings, return a Map<String, Integer> with a key for each different string, with the value the number of times that string appears in the array.", "section": "Map-2", "solution": [], "url": "/prob/p117630", "title": "wordCount", "signature": "public Map<String, Integer> wordCount(String[] strings)", "examples": [{"output": "{\"a\": 2, \"b\": 2, \"c\": 1}", "input": "wordCount([\"a\", \"b\", \"a\", \"c\", \"b\"])"}, {"output": "{\"a\": 1, \"b\": 1, \"c\": 1}", "input": "wordCount([\"c\", \"b\", \"a\"])"}, {"output": "{\"c\": 4}", "input": "wordCount([\"c\", \"c\", \"c\", \"c\"])"}]}, {"difficulty": 163.0, "summary": "You have a blue lottery ticket, with ints a, b, and c on it. This makes three pairs, which we'll call ab, bc, and ac. Consider the sum of the numbers in each pair. If any pair sums to exactly 10, the result is 10. Otherwise if the ab sum is exactly 10 more than either bc or ac sums, the result is 5. Otherwise the result is 0.", "section": "Logic-1", "solution": ["public int blueTicket( int a, int b, int c ){\n{\nint ab = a + b;\nint bc = b + c;\nint ac = a + c;\n\nif ( ab == 10 || bc == 10 || ac == 10 )\n{\nreturn 10;\n}\nif ( ab - bc == 10 || ab - ac == 10 )\n{\nreturn 5;\n}\n\nreturn 0;\n}", "public int blueTicket(int a, int b, int c){\nint ab = a + b;\nint bc = b + c;\nint ca = c + a;\nif(ab == 10 || bc == 10 || ca == 10)\nreturn 10;\nif(ab == bc + 10 || ab == ca + 10)\nreturn 5;\nreturn 0;\n}", "/* You have a blue lottery ticket, with ints a, b, and c on it. This makes \n * three pairs, which we'll call ab, bc, and ac. Consider the sum of the \n * numbers in each pair. If any pair sums to exactly 10, the result is 10. \n * Otherwise if the ab sum is exactly 10 more than either bc or ac sums, the \n * result is 5. Otherwise the result is 0.\n */\npublic int blueTicket(int a, int b, int c) {\n    int ab = a + b;\n    int bc = b + c;\n    int ac = a + c;\n        \n    if(ab == 10 || bc == 10 || ac == 10)\n        return 10;\n                  \n    if(ab == bc + 10 || ab == ac + 10)\n        return 5;\n                            \n    return 0;\n}\n"], "url": "/prob/p192267", "title": "blueTicket", "signature": "public int blueTicket(int a, int b, int c)", "examples": [{"output": "10", "input": "blueTicket(9, 1, 0)"}, {"output": "0", "input": "blueTicket(9, 2, 0)"}, {"output": "10", "input": "blueTicket(6, 1, 4)"}]}, {"difficulty": 121.0, "summary": "Given a number n, return true if n is in the range 1..10, inclusive. Unless outsideMode is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "section": "Logic-1", "solution": ["public boolean in1To10( int n, boolean outsideMode ){\n{\nreturn outsideMode ? ( n <= 1 || 10 <= n ) : ( 1 <= n && n <= 10 );\n}", "public boolean in1To10(int n, boolean outsideMode){\nif(outsideMode)\nreturn (n <= 1 || n >= 10);\nreturn (n >= 1 && n <= 10);\n}", "/* Given a number n, return true if n is in the range 1..10, inclusive. \n * Unless \"outsideMode\" is true, in which case return true if the number is \n * less or equal to 1, or greater or equal to 10.\n */\npublic boolean in1To10(int n, boolean outsideMode) {\n    if(outsideMode)\n        return n <= 1 || 10 <= n;\n          \n    return 1 <= n && n <= 10;\n}\n"], "url": "/prob/p137365", "title": "in1To10", "signature": "public boolean in1To10(int n, boolean outsideMode)", "examples": [{"output": "true", "input": "in1To10(5, false)"}, {"output": "false", "input": "in1To10(11, false)"}, {"output": "true", "input": "in1To10(11, true)"}]}, {"difficulty": 353.0, "summary": "Given an array of non-empty strings, return a Map<String, String> with a key for every different first character seen, with the value of all the strings starting with that character appended together in the order they appear in the array.", "section": "Map-2", "solution": [], "url": "/prob/p168493", "title": "firstChar", "signature": "public Map<String, String> firstChar(String[] strings)", "examples": [{"output": "{\"s\": \"saltsoda\", \"t\": \"teatoast\"}", "input": "firstChar([\"salt\", \"tea\", \"soda\", \"toast\"])"}, {"output": "{\"a\": \"aaaAA\", \"b\": \"bb\", \"c\": \"cccCC\", \"d\": \"d\"}", "input": "firstChar([\"aa\", \"bb\", \"cc\", \"aAA\", \"cCC\", \"d\"])"}, {"output": "{}", "input": "firstChar([])"}]}, {"difficulty": 148.0, "summary": "Given three ints, a b c, return true if one of them is 10 or more less than one of the others.", "section": "Logic-1", "solution": ["public boolean lessBy10( int a, int b, int c ){\n{\nreturn Math.abs( a - b ) >= 10 || Math.abs( a - c ) >= 10 || Math.abs( b - c ) >= 10;\n}", ["public boolean lessBy10(int a, int b, int c){", "", "", "// Return the sum of two 6-sided dice rolls, each in the range 1..6.", "// However, if noDoubles is true, if the two dice show the same value,", "// increment one die to the next value, wrapping around to 1 if its value was 6."], "/* Given three ints, a b c, return true if one of them is 10 or more less \n * than one of the others.\n */\npublic boolean lessBy10(int a, int b, int c) {\n    return  Math.abs(a - b) >= 10 || Math.abs(a - c) >= 10 || \n        Math.abs(b - c) >= 10;\n}\n"], "url": "/prob/p179196", "title": "lessBy10", "signature": "public boolean lessBy10(int a, int b, int c)", "examples": [{"output": "true", "input": "lessBy10(1, 7, 11)"}, {"output": "false", "input": "lessBy10(1, 7, 10)"}, {"output": "true", "input": "lessBy10(11, 1, 7)"}]}, {"difficulty": 254.0, "summary": "Start with two arrays of strings, a and b, each in alphabetical order, possibly with duplicates. Return the count of the number of strings which appear in both arrays. The best \"linear\" solution makes a single pass over both arrays, taking advantage of the fact that they are in alphabetical order.", "section": "AP-1", "solution": ["/* Start with two arrays of strings, a and b, each in alphabetical order, \n * possibly with duplicates. Return the count of the number of strings which \n * appear in both arrays. The best \"linear\" solution makes a single pass over \n * both arrays, taking advantage of the fact that they are in alphabetical \n * order.\n */\npublic int commonTwo(String[] a, String[] b) {\n    int count = 0;\n    int aIndex = 0;\n    int bIndex = 0;\n        \n    if(a[0].equals(b[0])) {\n        count++;\n        aIndex++;\n        bIndex++;\n    } else if(a[0].compareTo(b[0]) < 0) {\n        aIndex++;\n    } else {\n        bIndex++;\n    }\n                                      \n    while(aIndex < a.length && bIndex < b.length) {\n        if(aIndex > 0 && a[aIndex-1].equals(a[aIndex])) {\n            aIndex++;\n        } else if(a[aIndex].equals(b[bIndex])) {\n            count++;\n            aIndex++;\n            bIndex++;\n        } else if(a[aIndex].compareTo(b[bIndex]) < 0) {\n            aIndex++;\n        } else {\n            bIndex++;\n        }\n    }\n    \n    return count;\n}\n"], "url": "/prob/p100369", "title": "commonTwo", "signature": "public int commonTwo(String[] a, String[] b)", "examples": [{"output": "2", "input": "commonTwo([\"a\", \"c\", \"x\"], [\"b\", \"c\", \"d\", \"x\"])"}, {"output": "3", "input": "commonTwo([\"a\", \"c\", \"x\"], [\"a\", \"b\", \"c\", \"x\", \"z\"])"}, {"output": "3", "input": "commonTwo([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"])"}]}, {"difficulty": 330.0, "summary": "Given a string, return the sum of the numbers appearing in the string, ignoring all other characters. A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char) tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts a string to an int.)", "section": "String-3", "solution": ["public int sumNumbers(String str){\nint len = str.length();\nint start = - 1;\nint end = 0;\nint sum = 0;\nfor(int i = 0; i < len; i++)\n{\nif(start == -1)\n{\nif(Character.isDigit(str.charAt(i)))\n{\nstart = i;\nend = i+1;\n}\n}\nelse\n{\nif(Character.isDigit(str.charAt(i)))\nend++;\nelse\n{\nsum += Integer.parseInt(str.substring(start,end));\nstart = -1;\n}\n}\n}\nif(start != -1)\nsum += Integer.parseInt(str.substring(start,end));\nreturn sum;\n}", "/* Given a string, return the sum of the numbers appearing in the string, \n * ignoring all other characters. A number is a series of 1 or more digit \n * chars in a row.\n */\npublic int sumNumbers(String str) {\n    int sum = 0;\n    int i = 0;\n    int begin;\n    int end;\n          \n    while(i < str.length() && !Character.isDigit(str.charAt(i)))\n        i++;\n                    \n    begin = i;\n    end = i;\n                          \n    while(i < str.length()) {\n        if(!Character.isDigit(str.charAt(i))) {\n            sum += Integer.parseInt(str.substring(begin, end));\n            while(i < str.length() && !Character.isDigit(str.charAt(i)))\n                i++;\n                                                            \n            begin = i;\n            end = i;\n        } else {\n            end++;\n            i++;\n        }\n    }\n                                                                                                \n    if(end > begin)\n        sum += Integer.parseInt(str.substring(begin, end));\n                                                                                                        \n    return sum;\n}\n"], "url": "/prob/p121193", "title": "sumNumbers", "signature": "public int sumNumbers(String str)", "examples": [{"output": "123", "input": "sumNumbers(\"abc123xyz\")"}, {"output": "44", "input": "sumNumbers(\"aa11b33\")"}, {"output": "18", "input": "sumNumbers(\"7 11\")"}]}, {"difficulty": 263.0, "summary": "Return true if the array contains, somewhere, three increasing adjacent numbers like .... 4, 5, 6, ... or 23, 24, 25.", "section": "Array-2", "solution": ["public boolean tripleUp(int[] nums){\nboolean prevUp = false;\nfor(int i = 0; i < nums.length - 1; i++)\n{\nif(nums[i+1] - nums[i] == 1)\n{\nif(prevUp)\nreturn true;\nelse\nprevUp = true;\n}\nelse\nprevUp = false;\n}\nreturn false;\n}", "/* Return true if the array contains, somewhere, three increasing adjacent \n * numbers like .... 4, 5, 6, ... or 23, 24, 25.\n */\npublic boolean tripleUp(int[] nums) {\n    for(int i = 0; i <= nums.length - 3; i++) {\n        if(nums[i] + 1 == nums[i+1] && nums[i+1] + 1 == nums[i+2])\n            return true;\n    }\n                \n    return false;\n}\n"], "url": "/prob/p137874", "title": "tripleUp", "signature": "public boolean tripleUp(int[] nums)", "examples": [{"output": "true", "input": "tripleUp([1, 4, 5, 6, 2])"}, {"output": "true", "input": "tripleUp([1, 2, 3])"}, {"output": "false", "input": "tripleUp([1, 2, 4])"}]}, {"difficulty": 336.0, "summary": "Given a string, compute recursively (no loops) a new string where all the lowercase 'x' chars have been changed to 'y' chars.", "section": "Recursion-1", "solution": ["public String changeXY(String str){\nchar ch;\nif(str.length() == 0)\nreturn str;\nch = str.charAt(0);\nif(ch == 'x')\nreturn 'y' + changeXY(str.substring(1));\nreturn ch + changeXY(str.substring(1));\n}", "/* Given a string, compute recursively (no loops) a new string where all the \n * lowercase 'x' chars have been changed to 'y' chars.\n */\npublic String changeXY(String str) {\n    if(str.length() == 0)\n        return str;\n          \n    if(str.charAt(0) == 'x')\n        return 'y' + changeXY(str.substring(1));\n                    \n    return str.charAt(0) + changeXY(str.substring(1));\n}\n"], "url": "/prob/p101372", "title": "changeXY", "signature": "public String changeXY(String str)", "examples": [{"output": "\"codey\"", "input": "changeXY(\"codex\")"}, {"output": "\"yyhiyy\"", "input": "changeXY(\"xxhixx\")"}, {"output": "\"yhiyhiy\"", "input": "changeXY(\"xhixhix\")"}]}, {"difficulty": 209.0, "summary": "Given a list of strings, return a list of the strings, omitting any string length 4 or more.", "section": "Functional-2", "solution": [], "url": "/prob/p194496", "title": "noLong", "signature": "public List<String> noLong(List<String> strings)", "examples": [{"output": "[\"not\", \"too\"]", "input": "noLong([\"this\", \"not\", \"too\", \"long\"])"}, {"output": "[\"a\", \"bbb\"]", "input": "noLong([\"a\", \"bbb\", \"cccc\"])"}, {"output": "[]", "input": "noLong([\"cccc\", \"cccc\", \"cccc\"])"}]}, {"difficulty": 103.0, "summary": "Given a string name, e.g. \"Bob\", return a greeting of the form \"Hello Bob!\".", "section": "String-1", "solution": ["public String helloName(String name) {{\nreturn \"Hello \" + name + \"!\";\n}", ["public String helloName(String name){", "", "", "// Given two strings, a and b, return the result of putting them together in the order abba,", "// e.g. \"Hi\" and \"Bye\" returns \"HiByeByeHi\"."], "/* Given a string name, e.g. \"Bob\", return a greeting of the form \"Hello Bob!\".\n */\npublic String helloName(String name) {\n    return \"Hello \" + name + \"!\";\n}\n"], "url": "/prob/p171896", "title": "helloName", "signature": "public String helloName(String name)", "examples": [{"output": "\"Hello Bob!\"", "input": "helloName(\"Bob\")"}, {"output": "\"Hello Alice!\"", "input": "helloName(\"Alice\")"}, {"output": "\"Hello X!\"", "input": "helloName(\"X\")"}]}, {"difficulty": 309.0, "summary": "Given a string, return true if the number of appearances of \"is\" anywhere in the string is equal to the number of appearances of \"not\" anywhere in the string (case sensitive).", "section": "String-3", "solution": ["public boolean equalIsNot(String str){\nint balance = 0;\nint p;\np = str.indexOf(\"is\");\nwhile(p != -1)\n{\nbalance++;\np = str.indexOf(\"is\", p+2);\n}\np = str.indexOf(\"not\");\nwhile(p != -1)\n{\nbalance--;\np = str.indexOf(\"not\", p+3);\n}\nreturn (balance == 0);\n}", "/* Given a string, return true if the number of appearances of \"is\" anywhere \n * in the string is equal to the number of appearances of \"not\" anywhere in \n * the string (case sensitive).\n */\npublic boolean equalIsNot(String str) {\n    int is = 0;\n    int not = 0;\n      \n    for(int i = 0; i <= str.length() - 3; i++) {\n        if(str.substring(i, i + 2).equals(\"is\")) {\n            is++;\n        } else if(str.substring(i, i + 3).equals(\"not\")) {\n            not++;\n        }\n    }\n                                    \n    if(str.length() >= 2 && str.substring(str.length() - 2).equals(\"is\"))\n        is++;\n                                              \n    return is == not;\n}\n"], "url": "/prob/p141736", "title": "equalIsNot", "signature": "public boolean equalIsNot(String str)", "examples": [{"output": "false", "input": "equalIsNot(\"This is not\")"}, {"output": "true", "input": "equalIsNot(\"This is notnot\")"}, {"output": "true", "input": "equalIsNot(\"noisxxnotyynotxisi\")"}]}, {"difficulty": 148.0, "summary": "Given a string, return true if it ends in \"ly\".", "section": "String-1", "solution": ["public boolean endsLy(String str){\nint len = str.length();\nif(len >= 2)\nreturn (str.substring(str.length()-2).equals(\"ly\"));\nreturn false;\n}", "/* Given a string, return true if it ends in \"ly\".\n */\npublic boolean endsLy(String str) {\n    if(str.length() < 2)\n        return false;\n          \n    return str.substring(str.length() - 2).equals(\"ly\");\n}\n"], "url": "/prob/p103895", "title": "endsLy", "signature": "public boolean endsLy(String str)", "examples": [{"output": "true", "input": "endsLy(\"oddly\")"}, {"output": "false", "input": "endsLy(\"y\")"}, {"output": "false", "input": "endsLy(\"oddy\")"}]}, {"difficulty": 324.0, "summary": "We'll say that a \"mirror\" section in an array is a group of contiguous elements such that somewhere in the array, the same group appears in reverse order. For example, the largest mirror section in {1, 2, 3, 8, 9, 3, 2, 1} is length 3 (the {1, 2, 3} part). Return the size of the largest mirror section found in the given array.", "section": "Array-3", "solution": ["public int maxMirror(int[] nums){\nint span;\nint maxSpan = 0;\nint left;\nint right;\nfor(int i = 0; i < nums.length; i++)\n{\nleft = i;\nright = lastIndexOf(nums, nums[i], nums.length - 1);\nwhile(right != -1)\n{\nspan = 0;\nleft = i;\ndo\n{\nleft++;\nright--;\nspan++;\n}\twhile(left < nums.length && right >= 0 && nums[left] == nums[right]);\nif(span > maxSpan)\nmaxSpan = span;\nright = lastIndexOf(nums, nums[i], right);\n}\n}\nreturn maxSpan;\n}", "/* We'll say that a \"mirror\" section in an array is a group of contiguous \n * elements such that somewhere in the array, the same group appears in \n * reverse order. For example, the largest mirror section in \n * {1, 2, 3, 8, 9, 3, 2, 1} is length 3 (the {1, 2, 3} part). Return the size \n * of the largest mirror section found in the given array.\n */\npublic int maxMirror(int[] nums) {\n    int max = 0;\n    \n    for(int i = 0; i < nums.length; i++) {\n        int count = 0;\n        for(int j = nums.length - 1; j >= 0 && i + count < nums.length; j--) {\n            if(nums[i + count] == nums[j]) {\n                count++;\n            } else {\n                max = Math.max(max, count);\n                count = 0;\n            }\n        }\n                                                                \n        max = Math.max(max, count);\n    }\n\n    return max;\n}\n\n// I think this version is easier to understand but it has 3 nested loops\n// instead of just 2.\n/*\npublic int maxMirror(int[] nums) {\n    int max = 0;\n    \n    for(int start = 0; start < nums.length; start++) {\n        for(int begin = nums.length - 1; begin >= 0; begin--) {\n            int size = 0;\n            int i = start;\n            int j = begin;\n                                  \n            while(i < nums.length && j >= 0 && nums[i] == nums[j]) {\n                size++;\n                i++;\n                j--;\n            }\n                                                                              \n            max = Math.max(max, size);\n        }\n    }\n                                                                                            \n    return max;\n}\n*/\n"], "url": "/prob/p196409", "title": "maxMirror", "signature": "public int maxMirror(int[] nums)", "examples": [{"output": "3", "input": "maxMirror([1, 2, 3, 8, 9, 3, 2, 1])"}, {"output": "3", "input": "maxMirror([1, 2, 1, 4])"}, {"output": "2", "input": "maxMirror([7, 1, 2, 9, 7, 2, 1])"}]}, {"difficulty": 236.0, "summary": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "section": "Array-2", "solution": ["public boolean isEverywhere(int[] nums, int val){\nfor(int i = 0; i < nums.length-1; i++)\n{\nif(nums[i] != val && nums[i+1] != val)\nreturn false;\n}\nreturn true;\n}", "/* We'll say that a value is \"everywhere\" in an array if for every pair of \n * adjacent elements in the array, at least one of the pair is that value. \n * Return true if the given value is everywhere in the array.\n */\npublic boolean isEverywhere(int[] nums, int val) {\n    for(int i = 0; i < nums.length - 1; i++) {\n        if(nums[i] != val && nums[i + 1] != val)\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p110222", "title": "isEverywhere", "signature": "public boolean isEverywhere(int[] nums, int val)", "examples": [{"output": "true", "input": "isEverywhere([1, 2, 1, 3], 1)"}, {"output": "false", "input": "isEverywhere([1, 2, 1, 3], 2)"}, {"output": "false", "input": "isEverywhere([1, 2, 1, 3, 4], 1)"}]}, {"difficulty": 212.0, "summary": "Given 3 int values, a b c, return their sum. However, if any of the values is a teen -- in the range 13..19 inclusive -- then that value counts as 0, except 15 and 16 do not count as a teens. Write a separate helper \"public int fixTeen(int n) {\"that takes in an int value and returns that value fixed for the teen rule. In this way, you avoid repeating the teen code 3 times (i.e. \"decomposition\"). Define the helper below and at the same indent level as the main noTeenSum().", "section": "Logic-2", "solution": [["public int noTeenSum(int a, int b, int c){", "", "// For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values. To avoid code repetition, write a separate helper \"public int round10(int num) {\" and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", ""], "/* Given 3 int values, a b c, return their sum. However, if any of the values \n * is a teen -- in the range 13..19 inclusive -- then that value counts as 0, \n * except 15 and 16 do not count as a teens. Write a separate helper \n * \"public int fixTeen(int n) {\"that takes in an int value and returns that \n * value fixed for the teen rule. In this way, you avoid repeating the teen \n * code 3 times (i.e. \"decomposition\"). Define the helper below and at the \n * same indent level as the main noTeenSum().\n */\npublic int noTeenSum(int a, int b, int c) {\n    return fixTeen(a) + fixTeen(b) + fixTeen(c);\n}\n\npublic int fixTeen(int n) {\n    if(13 <= n && n <= 19 && n != 15 && n != 16)\n        return 0;\n            \n    return n;\n}\n"], "url": "/prob/p182879", "title": "noTeenSum", "signature": "public int noTeenSum(int a, int b, int c)", "examples": [{"output": "6", "input": "noTeenSum(1, 2, 3)"}, {"output": "3", "input": "noTeenSum(2, 13, 1)"}, {"output": "3", "input": "noTeenSum(2, 1, 14)"}]}, {"difficulty": 133.0, "summary": "Given an array of ints, return a new array length 2 containing the first and last elements from the original array. The original array will be length 1 or more.", "section": "Array-1", "solution": ["public int[] makeEnds(int[] nums){\nint[] temp = {nums[0], nums[nums.length-1]};\nreturn temp;\n}", "/* Given an array of ints, return a new array length 2 containing the first \n * and last elements from the original array. The original array will be \n * length 1 or more.\n */\npublic int[] makeEnds(int[] nums) {\n    return new int[] {nums[0], nums[nums.length - 1]};\n}\n"], "url": "/prob/p101230", "title": "makeEnds", "signature": "public int[] makeEnds(int[] nums)", "examples": [{"output": "[1, 3]", "input": "makeEnds([1, 2, 3])"}, {"output": "[1, 4]", "input": "makeEnds([1, 2, 3, 4])"}, {"output": "[7, 2]", "input": "makeEnds([7, 4, 6, 2])"}]}, {"difficulty": 224.0, "summary": "We'll say that a String is xy-balanced if for all the 'x' chars in the string, there exists a 'y' char somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "section": "String-2", "solution": ["public boolean xyBalance(String str){\nint len = str.length() - 1;\nchar ch;\nfor(int i = len; i >= 0; i--)\n{\nch = str.charAt(i);\nif(ch == 'x')\nreturn false;\nelse if(ch == 'y')\nreturn true;\n}\nreturn true;\n}", "/* We'll say that a String is xy-balanced if for all the 'x' chars in the \n * string, there exists a 'y' char somewhere later in the string. So \"xxy\" is \n * balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true \n * if the given string is xy-balanced.\n */\npublic boolean xyBalance(String str) {\n    boolean y = false;\n    for(int i = str.length() - 1; i >= 0; i--) {\n        if(str.charAt(i) == 'y')\n            y = true;\n                    \n        if(str.charAt(i) == 'x' && !y)\n            return false;\n    }\n                                  \n    return true;\n}\n"], "url": "/prob/p134250", "title": "xyBalance", "signature": "public boolean xyBalance(String str)", "examples": [{"output": "true", "input": "xyBalance(\"aaxbby\")"}, {"output": "false", "input": "xyBalance(\"aaxbb\")"}, {"output": "false", "input": "xyBalance(\"yaaxbb\")"}]}, {"difficulty": 209.0, "summary": "Return true if the string \"cat\" and \"dog\" appear the same number of times in the given string.", "section": "String-2", "solution": ["public boolean catDog( String str ){\n{\nint catCount = 0;\nint dogCount = 0;\n\nfor ( int i = 0; i < str.length() - 2; i++ )\n{\nif ( \"cat\".equals( str.substring( i, i + 3 ) ) )\n{\ncatCount++;\n}\nif ( \"dog\".equals( str.substring( i, i + 3 ) ) )\n{\ndogCount++;\n}\n}\n\nreturn catCount == dogCount;\n}", "public boolean catDog(String str){\n\nint len = str.length()-2;\nint diff = 0;\nfor(int i = 0; i < len; i++)\n{\nif(str.charAt(i) == 'c')\n{\nif(str.charAt(i+1) == 'a' && str.charAt(i+2) == 't')\ndiff++;\n}\nelse if(str.charAt(i) == 'd')\n{\nif(str.charAt(i+1) == 'o' && str.charAt(i+2) == 'g')\ndiff--;\n}\n}\nreturn (diff == 0);\n}", "/* Return true if the string \"cat\" and \"dog\" appear the same number of times \n * in the given string.\n */\npublic boolean catDog(String str) {\n    int cat = 0;\n    int dog = 0;\n      \n    for(int i = 0; i < str.length() - 2; i++) {\n        if(str.substring(i, i + 3).equals(\"cat\"))\n            cat++;\n                        \n        if(str.substring(i, i + 3).equals(\"dog\"))\n            dog++;\n    }\n                                      \n    return cat == dog;\n}\n"], "url": "/prob/p111624", "title": "catDog", "signature": "public boolean catDog(String str)", "examples": [{"output": "true", "input": "catDog(\"catdog\")"}, {"output": "false", "input": "catDog(\"catcat\")"}, {"output": "true", "input": "catDog(\"1cat1cadodog\")"}]}, {"difficulty": 224.0, "summary": "Modify and return the given map as follows: if exactly one of the keys \"a\" or \"b\" has a value in the map (but not both), set the other to have that same value in the map.", "section": "Map-1", "solution": [], "url": "/prob/p115012", "title": "mapAB3", "signature": "public Map<String, String> mapAB3(Map<String, String> map)", "examples": [{"output": "{\"a\": \"aaa\", \"b\": \"aaa\", \"c\": \"cake\"}", "input": "mapAB3({\"a\": \"aaa\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"bbb\", \"b\": \"bbb\", \"c\": \"cake\"}", "input": "mapAB3({\"b\": \"bbb\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"cake\"}", "input": "mapAB3({\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"cake\"})"}]}, {"difficulty": 215.0, "summary": "Given a map of food keys and their topping values, modify and return the map as follows: if the key \"ice cream\" has a value, set that as the value for the key \"yogurt\" also. If the key \"spinach\" has a value, change that value to \"nuts\".", "section": "Map-1", "solution": [], "url": "/prob/p196458", "title": "topping2", "signature": "public Map<String, String> topping2(Map<String, String> map)", "examples": [{"output": "{\"yogurt\": \"cherry\", \"ice cream\": \"cherry\"}", "input": "topping2({\"ice cream\": \"cherry\"})"}, {"output": "{\"yogurt\": \"cherry\", \"spinach\": \"nuts\", \"ice cream\": \"cherry\"}", "input": "topping2({\"spinach\": \"dirt\", \"ice cream\": \"cherry\"})"}, {"output": "{\"yogurt\": \"salt\"}", "input": "topping2({\"yogurt\": \"salt\"})"}]}, {"difficulty": 140.0, "summary": "Return true if the given non-negative number is a multiple of 3 or a multiple of 5. Use the % \"mod\" operator -- see ", "section": "Warmup-1", "solution": ["public boolean or35(int n) {\n  return (n % 3 == 0) || (n % 5 == 0);\n}", "public boolean or35( int n ){\n{\nreturn n % 3 == 0 || n % 5 == 0;\n}", "/* Return true if the given non-negative number is a multiple of 3 or a \n * multiple of 5. Use the % \"mod\" operator.\n */\npublic boolean or35(int n) {\n    return n % 3 == 0 || n % 5 == 0;\n}\n"], "url": "/prob/p112564", "title": "or35", "signature": "public boolean or35(int n)", "examples": [{"output": "true", "input": "or35(3)"}, {"output": "true", "input": "or35(10)"}, {"output": "false", "input": "or35(8)"}]}, {"difficulty": 112.0, "summary": "Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.", "section": "Array-1", "solution": [["public boolean commonEnd(int[] a, int[] b){", "", "", "// Given an array of ints length 3, return the sum of all the elements."], "/* Given 2 arrays of ints, a and b, return true if they have the same first \n * element or they have the same last element. Both arrays will be length 1 or \n * more.\n */\npublic boolean commonEnd(int[] a, int[] b) {\n    return a[0] == b[0] || a[a.length - 1] == b[b.length - 1];\n}\n"], "url": "/prob/p191991", "title": "commonEnd", "signature": "public boolean commonEnd(int[] a, int[] b)", "examples": [{"output": "true", "input": "commonEnd([1, 2, 3], [7, 3])"}, {"output": "false", "input": "commonEnd([1, 2, 3], [7, 3, 2])"}, {"output": "true", "input": "commonEnd([1, 2, 3], [1, 3])"}]}, {"difficulty": 139.0, "summary": "Given three ints, a b c, return true if b is greater than a, and c is greater than b. However, with the exception that if \"bOk\" is true, b does not need to be greater than a.", "section": "Logic-1", "solution": ["public boolean inOrder( int a, int b, int c, boolean bOk ){\n{\nreturn bOk ? ( b < c ) : ( a < b && b < c );\n}", "public boolean inOrder(int a, int b, int c, boolean bOk){\nif(bOk)\nreturn (c > b);\nreturn (b > a && c > b);\n}", "/* Given three ints, a b c, return true if b is greater than a, and c is \n * greater than b. However, with the exception that if \"bOk\" is true, b does \n * not need to be greater than a.\n */\npublic boolean inOrder(int a, int b, int c, boolean bOk) {\n    if(bOk)\n        return c > b;\n        \n    return b > a && c > b;\n}\n"], "url": "/prob/p154188", "title": "inOrder", "signature": "public boolean inOrder(int a, int b, int c, boolean bOk)", "examples": [{"output": "true", "input": "inOrder(1, 2, 4, false)"}, {"output": "false", "input": "inOrder(1, 2, 1, false)"}, {"output": "true", "input": "inOrder(1, 1, 2, true)"}]}, {"difficulty": 154.0, "summary": "Given two int values, return whichever value is larger. However if the two values have the same remainder when divided by 5, then the return the smaller value. However, in all cases, if the two values are the same, return 0. Note: the % \"mod\" operator computes the remainder, e.g. 7 % 5 is 2.", "section": "Logic-1", "solution": ["public int maxMod5( int a, int b ){\n{\nif ( a == b )\n{\nreturn 0;\n}\nif ( a % 5 == b % 5 )\n{\nreturn a < b ? a : b;\n}\n\nreturn a > b ? a : b;\n}", "public int maxMod5(int a, int b){\nif(a == b)\nreturn 0;\nif(a % 5 == b % 5)\nreturn (a < b) ? a : b;\nreturn (a > b) ? a : b;\n}", "/* Given two int values, return whichever value is larger. However if the two \n * values have the same remainder when divided by 5, then the return the \n * smaller value. However, in all cases, if the two values are the same, \n * return 0.\n */\npublic int maxMod5(int a, int b) {\n    if(a == b)\n        return 0;\n          \n    if(a % 5 == b % 5)\n        return a < b ? a : b;\n                    \n    return a > b ? a : b;\n}\n"], "url": "/prob/p115384", "title": "maxMod5", "signature": "public int maxMod5(int a, int b)", "examples": [{"output": "3", "input": "maxMod5(2, 3)"}, {"output": "6", "input": "maxMod5(6, 2)"}, {"output": "3", "input": "maxMod5(3, 2)"}]}, {"difficulty": 139.0, "summary": "Given a string, take the last char and return a new string with the last char added at the front and back, so \"cat\" yields \"tcatt\". The original string will be length 1 or more.", "section": "Warmup-1", "solution": ["public String backAround(String str) {\n  // Get the last char\n  String last = str.substring(str.length() - 1);\n  return last + str + last;\n}", "public String backAround( String str ){\n{\nreturn str.charAt( str.length() - 1 ) + str + str.charAt( str.length() - 1 );\n}", "public String backAround(String str){\nint len = str.length() - 1;\nreturn (str.charAt(len) + str + str.charAt(len));\n}", "/* Given a string, take the last char and return a new string with the last \n * char added at the front and back, so \"cat\" yields \"tcatt\". The original \n * string will be length 1 or more.\n */\npublic String backAround(String str) {\n    char last = str.charAt(str.length() - 1);\n    return last + str + last;\n}\n"], "url": "/prob/p161642", "title": "backAround", "signature": "public String backAround(String str)", "examples": [{"output": "\"tcatt\"", "input": "backAround(\"cat\")"}, {"output": "\"oHelloo\"", "input": "backAround(\"Hello\")"}, {"output": "\"aaa\"", "input": "backAround(\"a\")"}]}, {"difficulty": 145.0, "summary": "Given a string, return true if the string starts with \"hi\" and false otherwise.", "section": "Warmup-1", "solution": ["public boolean startHi(String str) {\n  // First test if the string is not at least length 2\n  // (so the substring() below does not go past the end).\n  if (str.length() < 2) return false;\n  \n  // Pull out the string of the first two chars\n  String firstTwo = str.substring(0, 2);\n  \n  // Test if it is equal to \"hi\"\n  if (firstTwo.equals(\"hi\")) {\n    return true;\n  } else {\n    return false;\n  }\n  // This last part can be shortened to: return(firstTwo.equals(\"hi\"));\n}", "public boolean startHi( String str ){\n{\nreturn str.startsWith( \"hi\" );\n}", ["public boolean startHi(String str){", "", "", "// Given two temperatures, return true if one is less than 0 and the other is greater than 100."], "/* Given a string, return true if the string starts with \"hi\" and false \n * otherwise.\n */\npublic boolean startHi(String str) {\n    return str.length() >= 2 && str.substring(0, 2).equals(\"hi\");\n}\n"], "url": "/prob/p191022", "title": "startHi", "signature": "public boolean startHi(String str)", "examples": [{"output": "true", "input": "startHi(\"hi there\")"}, {"output": "true", "input": "startHi(\"hi\")"}, {"output": "false", "input": "startHi(\"hello hi\")"}]}, {"difficulty": 239.0, "summary": "Given an array of ints, return the number of times that two 6's are next to each other in the array. Also count instances where the second \"6\" is actually a 7.", "section": "Warmup-2", "solution": ["public int array667(int[] nums) {\n  int count = 0;\n  // Note: iterate to length-1, so can use i+1 in the loop\n  for (int i=0; i < (nums.length-1); i++) {\n    if (nums[i] == 6) {\n      if (nums[i+1] == 6 || nums[i+1] == 7) {\n        count++;\n      }\n    }\n  }\n  return count;\n}", "public int array667( int[] nums ){\n{\nint count = 0;\n\nfor ( int i = 0; i < nums.length - 1; i++ )\n{\nif ( nums[i] == 6 && ( nums[i + 1] == 6 || nums[i + 1] == 7 ) )\n{\ncount++;\n}\n}\n\nreturn count;\n}", "public int array667(int[] nums){\nint counter = 0;\nfor(int i = 1; i < nums.length; i++)\n{\nif((nums[i] == 7 || nums[i] == 6) && nums[i-1] == 6)\ncounter++;\n}\nreturn counter;\n}", "/* Given an array of ints, return the number of times that two 6's are next to \n * each other in the array. Also count instances where the second \"6\" is \n * actually a 7.\n */\npublic int array667(int[] nums) {\n    int count = 0;\n    \n    for(int i = 0; i < nums.length - 1; i++) {\n        if(nums[i] == 6 && (nums[i+1] == 6 || nums[i+1] == 7))\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p110019", "title": "array667", "signature": "public int array667(int[] nums)", "examples": [{"output": "1", "input": "array667([6, 6, 2])"}, {"output": "1", "input": "array667([6, 6, 2, 6])"}, {"output": "1", "input": "array667([6, 7, 2, 6])"}]}, {"difficulty": 175.0, "summary": "Given 2 int values, return true if they are both in the range 30..40 inclusive, or they are both in the range 40..50 inclusive.", "section": "Warmup-1", "solution": ["public boolean in3050(int a, int b) {\n  if (a >= 30 && a <= 40 && b >= 30 && b <= 40) {\n    return true;\n  }\n  if (a >= 40 && a <= 50 && b >= 40 && b <= 50) {\n    return true;\n  }\n  return false;\n  // This could be written as one very large expression,\n  // connecting the two main parts with ||\n}", "public boolean in3050(int a, int b){\nreturn  (((a >= 30 && a <= 40) && (b >= 30 && b <= 40)) ||\n((a >= 40 && a <= 50) && (b >= 40 && b <= 50)));\n}", "/* Given 2 int values, return true if they are both in the range 30..40 \n * inclusive, or they are both in the range 40..50 inclusive.\n */\npublic boolean in3050(int a, int b) {\n    boolean aRange1 = 30 <= a && a <= 40;\n    boolean aRange2 = 40 <= a && a <= 50;\n    boolean bRange1 = 30 <= b && b <= 40;\n    boolean bRange2 = 40 <= b && b <= 50;\n          \n    return aRange1 && bRange1 || aRange2 && bRange2;\n}\n"], "url": "/prob/p132134", "title": "in3050", "signature": "public boolean in3050(int a, int b)", "examples": [{"output": "true", "input": "in3050(30, 31)"}, {"output": "false", "input": "in3050(30, 41)"}, {"output": "true", "input": "in3050(40, 50)"}]}, {"difficulty": 230.0, "summary": "Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "section": "String-2", "solution": ["public String repeatEnd(String str, int n){\nStringBuilder stbuild = new StringBuilder(n*n);\nString last = str.substring(str.length()-n);\nfor(int i = 0; i < n; i++)\nstbuild.append(last);\nreturn stbuild.toString();\n}", "/* Given a string and an int N, return a string made of N repetitions of the \n * last N characters of the string. You may assume that N is between 0 and \n * the length of the string, inclusive.\n */\npublic String repeatEnd(String str, int n) {\n    StringBuffer result = new StringBuffer();\n    String end = str.substring(str.length() - n);\n      \n    for(int i = 0; i < n; i++)\n        result.append(end);\n                \n    return result.toString();\n}\n"], "url": "/prob/p152339", "title": "repeatEnd", "signature": "public String repeatEnd(String str, int n)", "examples": [{"output": "\"llollollo\"", "input": "repeatEnd(\"Hello\", 3)"}, {"output": "\"lolo\"", "input": "repeatEnd(\"Hello\", 2)"}, {"output": "\"o\"", "input": "repeatEnd(\"Hello\", 1)"}]}, {"difficulty": 142.0, "summary": "Given an int array, return a new array with double the length where its last element is the same as the original array, and all the other elements are 0. The original array will be length 1 or more. Note: by default, a new int array contains all 0's.", "section": "Array-1", "solution": ["public int[] makeLast(int[] nums){\nint len = nums.length*2;\nint[] dubsArr = new int[len];\ndubsArr[len-1] = nums[nums.length-1];\nreturn dubsArr;\n}", "/* Given an int array, return a new array with double the length where its \n * last element is the same as the original array, and all the other elements \n * are 0. The original array will be length 1 or more. Note: by default, a \n * new int array contains all 0's.\n */\npublic int[] makeLast(int[] nums) {\n    int[] arr = new int[2 * nums.length];\n    arr[arr.length - 1] = nums[nums.length - 1];\n    return arr;\n}\n"], "url": "/prob/p137188", "title": "makeLast", "signature": "public int[] makeLast(int[] nums)", "examples": [{"output": "[0, 0, 0, 0, 0, 6]", "input": "makeLast([4, 5, 6])"}, {"output": "[0, 0, 0, 2]", "input": "makeLast([1, 2])"}, {"output": "[0, 3]", "input": "makeLast([3])"}]}, {"difficulty": 356.0, "summary": "Loop over the given array of strings to build a result string like this: when a string appears the 2nd, 4th, 6th, etc. time in the array, append the string to the result. Return the empty string if no string appears a 2nd time.", "section": "Map-2", "solution": [], "url": "/prob/p103593", "title": "wordAppend", "signature": "public String wordAppend(String[] strings)", "examples": [{"output": "\"a\"", "input": "wordAppend([\"a\", \"b\", \"a\"])"}, {"output": "\"aa\"", "input": "wordAppend([\"a\", \"b\", \"a\", \"c\", \"a\", \"d\", \"a\"])"}, {"output": "\"a\"", "input": "wordAppend([\"a\", \"\", \"a\"])"}]}, {"difficulty": 377.0, "summary": "We'll say that 2 strings \"match\" if they are non-empty and their first chars are the same. Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier string in the array, swap the 2 strings in the array. When a position in the array has been swapped, it no longer matches anything. Using a map, this can be solved making just one pass over the array. More difficult than it looks.", "section": "Map-2", "solution": [], "url": "/prob/p134133", "title": "allSwap", "signature": "public String[] allSwap(String[] strings)", "examples": [{"output": "[\"ac\", \"ab\"]", "input": "allSwap([\"ab\", \"ac\"])"}, {"output": "[\"ay\", \"by\", \"cy\", \"cx\", \"bx\", \"ax\", \"azz\", \"aaa\"]", "input": "allSwap([\"ax\", \"bx\", \"cx\", \"cy\", \"by\", \"ay\", \"aaa\", \"azz\"])"}, {"output": "[\"ay\", \"by\", \"ax\", \"bx\", \"aj\", \"ai\", \"by\", \"bx\"]", "input": "allSwap([\"ax\", \"bx\", \"ay\", \"by\", \"ai\", \"aj\", \"bx\", \"by\"])"}]}, {"difficulty": 206.0, "summary": "Given an array of scores, return true if there are scores of 100 next to each other in the array. The array length will be at least 2.", "section": "AP-1", "solution": ["public boolean scores100( int[] scores ){\n{\nfor ( int i = 0; i < scores.length - 1; i++ )\n{\nif ( scores[i] == 100 && scores[i + 1] == 100 )\n{\nreturn true;\n}\n}\n\nreturn false;\n}", "/* Given an array of scores, return true if there are scores of 100 next to \n * each other in the array. The array length will be at least 2.\n */\npublic boolean scores100(int[] scores) {\n    for(int i = 0; i <= scores.length - 2; i++) {\n        if(scores[i] == 100 && scores[i+1] == 100)\n            return true;\n    }\n                \n    return false;\n}\n"], "url": "/prob/p179487", "title": "scores100", "signature": "public boolean scores100(int[] scores)", "examples": [{"output": "true", "input": "scores100([1, 100, 100])"}, {"output": "false", "input": "scores100([1, 100, 99, 100])"}, {"output": "true", "input": "scores100([100, 1, 100, 100])"}]}, {"difficulty": 236.0, "summary": "Given 2 arrays that are the same length containing strings, compare the 1st string in one array to the 1st string in the other array, the 2nd to the 2nd and so on. Count the number of times that the 2 strings are non-empty and start with the same char. The strings may be any length, including 0.", "section": "AP-1", "solution": ["/* Given 2 arrays that are the same length containing strings, compare the \n * 1st string in one array to the 1st string in the other array, the 2nd to \n * the 2nd and so on. Count the number of times that the 2 strings are \n * non-empty and start with the same char. The strings may be any length, \n * including 0.\n */\npublic int matchUp(String[] a, String[] b) {\n    int count = 0;\n    \n    for(int i = 0; i < a.length; i++) {\n        if(a[i].length() > 0 && b[i].length() > 0 && \n            a[i].charAt(0) == b[i].charAt(0))\n            count++;\n    }\n                          \n    return count;\n}\n"], "url": "/prob/p139677", "title": "matchUp", "signature": "public int matchUp(String[] a, String[] b)", "examples": [{"output": "1", "input": "matchUp([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"xx\", \"bb\"])"}, {"output": "2", "input": "matchUp([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\", \"bb\"])"}, {"output": "1", "input": "matchUp([\"aa\", \"bb\", \"cc\"], [\"\", \"\", \"ccc\"])"}]}, {"difficulty": 212.0, "summary": "Return the number of times that the string \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.", "section": "String-2", "solution": ["public int countCode( String str ){\n{\nint count = 0;\n\nfor ( int i = 0; i < str.length() - 3; i++ )\n{\nif ( \"co\".equals( str.substring( i, i + 2 ) ) )\n{\nif ( str.charAt( i + 3 ) == 'e' )\n{\ncount++;\n}\n}\n}\n\nreturn count;\n}", "public int countCode(String str){\nint times = 0;\nint i = 0;\nint len = str.length()-3;\nwhile(i <  len)\n{\nif(str.charAt(i) == 'c' && str.charAt(i+1) == 'o' && str.charAt(i+3) == 'e')\n{\ntimes++;\ni += 4;\n}\nelse\ni++;\n}\nreturn times;\n}", "/* Return the number of times that the string \"code\" appears anywhere in the \n * given string, except we'll accept any letter for the 'd', so \"cope\" and \n * \"cooe\" count.\n */\npublic int countCode(String str) {\n    int count = 0;\n    \n    for(int i = 0; i < str.length() - 3; i++) {\n        if(str.substring(i, i + 2).equals(\"co\") && str.charAt(i + 3) == 'e')\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p123614", "title": "countCode", "signature": "public int countCode(String str)", "examples": [{"output": "1", "input": "countCode(\"aaacodebbb\")"}, {"output": "2", "input": "countCode(\"codexxcode\")"}, {"output": "2", "input": "countCode(\"cozexxcope\")"}]}, {"difficulty": 242.0, "summary": "Given an array of ints, we'll say that a triple is a value appearing 3 times in a row in the array. Return true if the array does not contain any triples.", "section": "Warmup-2", "solution": ["public boolean noTriples(int[] nums) {\n  // Iterate < length-2, so can use i+1 and i+2 in the loop.\n  // Return false immediately if every seeing a triple.\n  for (int i=0; i < (nums.length-2); i++) {\n    int first = nums[i];\n    if (nums[i+1]==first && nums[i+2]==first) return false;\n  }\n  \n  // If we get here ... no triples.\n  return true;\n}", "public boolean noTriples( int[] nums ){\n{\nfor ( int i = 0; i < nums.length - 2; i++ )\n{\nif ( nums[i] == nums[i + 1] && nums[i] == nums[i + 2] )\n{\nreturn false;\n}\n}\n\nreturn true;\n}", "public boolean noTriples(int[] nums){\nfor(int i = 0; i < nums.length - 2; i++)\n{\nif(nums[i] == nums[i+1] && nums[i] == nums[i+2])\nreturn false;\n}\nreturn true;\n}", "/* Given an array of ints, we'll say that a triple is a value appearing 3 \n * times in a row in the array. Return true if the array does not contain any \n * triples.\n */\npublic boolean noTriples(int[] nums) {\n    for(int i = 0; i < nums.length - 2; i++) {\n        if(nums[i+1] == nums[i] && nums[i+2] == nums[i])\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p170221", "title": "noTriples", "signature": "public boolean noTriples(int[] nums)", "examples": [{"output": "true", "input": "noTriples([1, 1, 2, 2, 1])"}, {"output": "false", "input": "noTriples([1, 1, 2, 2, 2, 1])"}, {"output": "false", "input": "noTriples([1, 1, 1, 2, 2, 2, 1])"}]}, {"difficulty": 124.0, "summary": "Given a non-negative number \"num\", return true if num is within 2 of a multiple of 10. Note: (a % b) is the remainder of dividing a by b, so (7 % 5) is 2. See also: ", "section": "Logic-1", "solution": ["public boolean nearTen( int num ){\n{\nint remainder = num % 10;\n\nreturn remainder <= 2 || remainder >= 8;\n}", ["public boolean nearTen(int num){", "", "", "// Given 2 ints, a and b, return their sum. However, \"teen\" values in the range 13..19 inclusive,", "// are extra lucky. So if either value is a teen, just return 19."], "/* Given a non-negative number \"num\", return true if num is within 2 of a \n * multiple of 10.\n */\npublic boolean nearTen(int num) {\n    return num % 10 <= 2 || num % 10 >= 8;\n}\n"], "url": "/prob/p193613", "title": "nearTen", "signature": "public boolean nearTen(int num)", "examples": [{"output": "true", "input": "nearTen(12)"}, {"output": "false", "input": "nearTen(17)"}, {"output": "true", "input": "nearTen(19)"}]}, {"difficulty": 103.0, "summary": "Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more.", "section": "Array-1", "solution": [["public boolean firstLast6(int[] nums){", "", "", "// Given an array of ints, return true if the array is length 1 or more, and the", "// first element and the last element are the same."], "/* Given an array of ints, return true if 6 appears as either the first or \n * last element in the array. The array will be length 1 or more.\n */\npublic boolean firstLast6(int[] nums) {\n    return nums[0] == 6 || nums[nums.length - 1] == 6;\n}\n"], "url": "/prob/p185685", "title": "firstLast6", "signature": "public boolean firstLast6(int[] nums)", "examples": [{"output": "true", "input": "firstLast6([1, 2, 6])"}, {"output": "true", "input": "firstLast6([6, 1, 2, 3])"}, {"output": "false", "input": "firstLast6([13, 6, 1, 2, 3])"}]}, {"difficulty": 124.0, "summary": "Given a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.", "section": "String-1", "solution": ["public String withoutEnd(String str) {{\nreturn str.substring(1, str.length() - 1);\n}", ["public String withoutEnd(String str){", "", "", "// Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside", "// and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0)."], "/* Given a string, return a version without the first and last char, so \n * \"Hello\" yields \"ell\". The string length will be at least 2.\n */\npublic String withoutEnd(String str) {\n    return str.substring(1, str.length() - 1);\n}\n"], "url": "/prob/p130896", "title": "withoutEnd", "signature": "public String withoutEnd(String str)", "examples": [{"output": "\"ell\"", "input": "withoutEnd(\"Hello\")"}, {"output": "\"av\"", "input": "withoutEnd(\"java\")"}, {"output": "\"odin\"", "input": "withoutEnd(\"coding\")"}]}, {"difficulty": 221.0, "summary": "Modify and return the given map as follows: if the keys \"a\" and \"b\" are both in the map and have equal values, remove them both.", "section": "Map-1", "solution": [], "url": "/prob/p115011", "title": "mapAB2", "signature": "public Map<String, String> mapAB2(Map<String, String> map)", "examples": [{"output": "{\"c\": \"cake\"}", "input": "mapAB2({\"a\": \"aaa\", \"b\": \"aaa\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"bbb\"}", "input": "mapAB2({\"a\": \"aaa\", \"b\": \"bbb\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"aaa\"}", "input": "mapAB2({\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"aaa\"})"}]}, {"difficulty": 157.0, "summary": "Given a string of odd length, return the string length 3 from its middle, so \"Candy\" yields \"and\". The string length will be at least 3.", "section": "String-1", "solution": ["public String middleThree(String str){\nint len = str.length()/2;\nreturn str.substring(len-1,len+2);\n}", "/* Given a string of odd length, return the string length 3 from its middle, \n * so \"Candy\" yields \"and\". The string length will be at least 3.\n */\npublic String middleThree(String str) {\n    int mid = str.length() / 2;\n    return str.substring(mid - 1, mid + 2);\n}\n"], "url": "/prob/p115863", "title": "middleThree", "signature": "public String middleThree(String str)", "examples": [{"output": "\"and\"", "input": "middleThree(\"Candy\")"}, {"output": "\"and\"", "input": "middleThree(\"and\")"}, {"output": "\"lvi\"", "input": "middleThree(\"solving\")"}]}, {"difficulty": 246.1, "summary": "(A variation on the sumHeights problem.) We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the sum of the changes for a walk beginning at the start index and ending at the end index, however increases in height count double. For example, with the heights {5, 3, 6, 7, 2} and start=2, end=4 yields a sum of 1*2 + 5 = 7. The start end end index will both be valid indexes into the array with start <= end.", "section": "AP-1", "solution": ["/* We have an array of heights, representing the altitude along a walking \n * trail. Given start/end indexes into the array, return the sum of the \n * changes for a walk beginning at the start index and ending at the end \n * index, however increases in height count double. For example, with the \n * heights {5, 3, 6, 7, 2} and start=2, end=4 yields a sum of 1*2 + 5 = 7. \n * The start end end index will both be valid indexes into the array with \n * start <= end.\n */\npublic int sumHeights2(int[] heights, int start, int end) {\n    int sum = 0;\n    \n    for(int i = start; i < end; i++) {\n        if(heights[i] < heights[i+1])\n            sum = sum + 2 * (heights[i+1] - heights[i]);\n        else\n            sum = sum + heights[i] - heights[i+1];\n    }\n                              \n    return sum;\n}\n"], "url": "/prob/p157900", "title": "sumHeights2", "signature": "public int sumHeights2(int[] heights, int start, int end)", "examples": [{"output": "7", "input": "sumHeights2([5, 3, 6, 7, 2], 2, 4)"}, {"output": "2", "input": "sumHeights2([5, 3, 6, 7, 2], 0, 1)"}, {"output": "15", "input": "sumHeights2([5, 3, 6, 7, 2], 0, 4)"}]}, {"difficulty": 233.0, "summary": "We'll say that a positive int n is \"endy\" if it is in the range 0..10 or 90..100 (inclusive). Given an array of positive ints, return a new array of length \"count\" containing the first endy numbers from the original array. Decompose out a separate isEndy(int n) method to test if a number is endy. The original array will contain at least \"count\" endy numbers.", "section": "AP-1", "solution": ["/* We'll say that a positive int n is \"endy\" if it is in the range \n * 0..10 or 90..100 (inclusive). Given an array of positive ints, return a \n * new array of length \"count\" containing the first endy numbers from the \n * original array. Decompose out a separate isEndy(int n) method to test if a \n * number is endy. The original array will contain at least \"count\" endy \n * numbers.\n */\npublic int[] copyEndy(int[] nums, int count) {\n    int[] arr = new int[count];\n    int index = 0;\n      \n    for(int i = 0; index < count; i++) {\n        if(isEndy(nums[i])) {\n            arr[index] = nums[i];\n            index++;\n        }\n    }\n                                \n    return arr;\n}\n\npublic boolean isEndy(int n) {\n    return 0 <= n && n <= 10 || 90 <= n && n <= 100;\n}\n"], "url": "/prob/p130124", "title": "copyEndy", "signature": "public int[] copyEndy(int[] nums, int count)", "examples": [{"output": "[9, 90]", "input": "copyEndy([9, 11, 90, 22, 6], 2)"}, {"output": "[9, 90, 6]", "input": "copyEndy([9, 11, 90, 22, 6], 3)"}, {"output": "[1, 1]", "input": "copyEndy([12, 1, 1, 13, 0, 20], 2)"}]}, {"difficulty": 218.0, "summary": "Given an array of ints, return the number of 9's in the array.", "section": "Warmup-2", "solution": ["public int arrayCount9(int[] nums) {\n  int count = 0;\n  for (int i=0; i<nums.length; i++) {\n    if (nums[i] == 9) {\n      count++;\n    }\n  }\n  return count;\n}", "public int arrayCount9( int[] nums ){\n{\nint count = 0;\n\nfor ( int num : nums )\n{\nif ( num == 9 )\n{\ncount++;\n}\n}\n\nreturn count;\n}", "public int arrayCount9(int[] nums){\nint count = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] == 9)\ncount++;\n}\nreturn count;\n}", "/* Given an array of ints, return the number of 9's in the array.\n */\npublic int arrayCount9(int[] nums) {\n    int count = 0;\n    \n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 9)\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p184031", "title": "arrayCount9", "signature": "public int arrayCount9(int[] nums)", "examples": [{"output": "1", "input": "arrayCount9([1, 2, 9])"}, {"output": "2", "input": "arrayCount9([1, 9, 9])"}, {"output": "3", "input": "arrayCount9([1, 9, 9, 3, 9])"}]}, {"difficulty": 272.0, "summary": "Given a non-empty array of ints, return a new array containing the elements from the original array that come before the first 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.", "section": "Array-2", "solution": ["public int[] pre4(int[] nums){\nint p = 0;\nint[] arr;\nwhile(nums[p] != 4)\np++;\narr = new int[p];\nfor(int i = 0; i < p; i++)\narr[i] = nums[i];\nreturn arr;\n}", "/* Given a non-empty array of ints, return a new array containing the \n * elements from the original array that come before the first 4 in the \n * original array. The original array will contain at least one 4. Note that \n * it is valid in java to create an array of length 0.\n */\npublic int[] pre4(int[] nums) {\n    int i = 0;\n    \n    while(nums[i] != 4)\n        i++;\n              \n    int[] arr = new int[i];\n                  \n    for(int j = 0; j < i; j++)\n        arr[j] = nums[j];\n                            \n    return arr;\n}\n"], "url": "/prob/p100246", "title": "pre4", "signature": "public int[] pre4(int[] nums)", "examples": [{"output": "[1, 2]", "input": "pre4([1, 2, 4, 1])"}, {"output": "[3, 1]", "input": "pre4([3, 1, 4])"}, {"output": "[1]", "input": "pre4([1, 4, 4])"}]}, {"difficulty": 169.0, "summary": "Given an array of ints of odd length, look at the first, last, and middle values in the array and return the largest. The array length will be a least 1.", "section": "Array-1", "solution": ["public int maxTriple(int[] nums){\nint max = nums[0];\nif(max <= nums[nums.length-1])\nmax = nums[nums.length-1];\nif(max <= nums[nums.length/2])\nmax = nums[nums.length/2];\nreturn max;\n}", "/* Given an array of ints of odd length, look at the first, last, and middle \n * values in the array and return the largest. The array length will be a \n * least 1.\n */\npublic int maxTriple(int[] nums) {\n    int max = nums[0];\n    \n    if(max < nums[nums.length / 2])\n        max = nums[nums.length / 2];\n              \n    if(max < nums[nums.length - 1])\n        max = nums[nums.length - 1];\n                        \n    return max;\n}\n"], "url": "/prob/p185176", "title": "maxTriple", "signature": "public int maxTriple(int[] nums)", "examples": [{"output": "3", "input": "maxTriple([1, 2, 3])"}, {"output": "5", "input": "maxTriple([1, 5, 3])"}, {"output": "5", "input": "maxTriple([5, 2, 3])"}]}, {"difficulty": 251.0, "summary": "Start with two arrays of strings, A and B, each with its elements in alphabetical order and without duplicates. Return a new array containing the first N elements from the two arrays. The result array should be in alphabetical order and without duplicates. A and B will both have a length which is N or more. The best \"linear\" solution makes a single pass over A and B, taking advantage of the fact that they are in alphabetical order, copying elements directly to the new array.", "section": "AP-1", "solution": ["/* Start with two arrays of strings, A and B, each with its elements in \n * alphabetical order and without duplicates. Return a new array containing \n * the first N elements from the two arrays. The result array should be in \n * alphabetical order and without duplicates. A and B will both have a length \n * which is N or more. The best \"linear\" solution makes a single pass over A \n * and B, taking advantage of the fact that they are in alphabetical order, \n * copying elements directly to the new array.\n */\npublic String[] mergeTwo(String[] a, String[] b, int n) {\n    String[] arr = new String[n];\n    int aIndex = 0;\n    int bIndex = 0;\n        \n    for(int index = 0; index < n; index++) {\n        if(a[aIndex].compareTo(b[bIndex]) < 0) {\n            arr[index] = a[aIndex];\n            aIndex++;\n        } else if(a[aIndex].compareTo(b[bIndex]) > 0) {\n            arr[index] = b[bIndex];\n            bIndex++;\n        } else {\n            arr[index] = a[aIndex];\n            aIndex++;\n            bIndex++;\n        }\n    }\n                                                                        \n    return arr;\n}\n"], "url": "/prob/p139150", "title": "mergeTwo", "signature": "public String[] mergeTwo(String[] a, String[] b, int n)", "examples": [{"output": "[\"a\", \"b\", \"c\"]", "input": "mergeTwo([\"a\", \"c\", \"z\"], [\"b\", \"f\", \"z\"], 3)"}, {"output": "[\"a\", \"c\", \"f\"]", "input": "mergeTwo([\"a\", \"c\", \"z\"], [\"c\", \"f\", \"z\"], 3)"}, {"output": "[\"c\", \"f\", \"g\"]", "input": "mergeTwo([\"f\", \"g\", \"z\"], [\"c\", \"f\", \"g\"], 3)"}]}, {"difficulty": 121.0, "summary": "Given a string of even length, return the first half. So the string \"WooHoo\" yields \"Woo\".", "section": "String-1", "solution": ["public String firstHalf(String str) {{\nreturn str.substring(0, str.length() / 2);\n}", "public String firstHalf(String str){\nreturn str.substring(0, str.length()/2);\n}", "/* Given a string of even length, return the first half. So the string \n * \"WooHoo\" yields \"Woo\".\n */\npublic String firstHalf(String str) {\n    return str.substring(0, str.length() / 2);\n}\n"], "url": "/prob/p172267", "title": "firstHalf", "signature": "public String firstHalf(String str)", "examples": [{"output": "\"Woo\"", "input": "firstHalf(\"WooHoo\")"}, {"output": "\"Hello\"", "input": "firstHalf(\"HelloThere\")"}, {"output": "\"abc\"", "input": "firstHalf(\"abcdef\")"}]}, {"difficulty": 363.0, "summary": "We'll say that a \"pair\" in a string is two instances of a char separated by a char. So \"AxA\" the A's make a pair. Pair's can overlap, so \"AxAxA\" contains 3 pairs -- 2 for A and 1 for x. Recursively compute the number of pairs in the given string.", "section": "Recursion-1", "solution": ["public int countPairs(String str){\nif(str.length() < 3)\nreturn 0;\nif(str.charAt(0) == str.charAt(2))\nreturn 1 + countPairs(str.substring(1));\nreturn countPairs(str.substring(1));\n}", "/* We'll say that a \"pair\" in a string is two instances of a char separated by \n * a char. So \"AxA\" the A's make a pair. Pair's can overlap, so \"AxAxA\" \n * contains 3 pairs -- 2 for A and 1 for x. Recursively compute the number of \n * pairs in the given string.\n */\npublic int countPairs(String str) {\n    if(str.length() <= 2)\n        return 0;\n          \n    if(str.charAt(0) == str.charAt(2))\n        return 1 + countPairs(str.substring(1));\n                    \n    return countPairs(str.substring(1));\n}\n"], "url": "/prob/p154048", "title": "countPairs", "signature": "public int countPairs(String str)", "examples": [{"output": "1", "input": "countPairs(\"axa\")"}, {"output": "2", "input": "countPairs(\"axax\")"}, {"output": "1", "input": "countPairs(\"axbx\")"}]}, {"difficulty": 123.8, "summary": "Return true if the given non-negative number is 1 or 2 ", "section": "Logic-1", "solution": ["public boolean less20( int n ){\n{\nreturn ( n + 1 ) % 20 == 0 || ( n + 2 ) % 20 == 0;\n}", "/* Return true if the given non-negative number is 1 or 2 less than a \n * multiple of 20. So for example 38 and 39 return true, but 40 returns false.\n */\npublic boolean less20(int n) {\n    return n % 20 == 19 || n % 20 == 18;\n}\n"], "url": "/prob/p133158", "title": "less20", "signature": "public boolean less20(int n)", "examples": [{"output": "true", "input": "less20(18)"}, {"output": "true", "input": "less20(19)"}, {"output": "false", "input": "less20(20)"}]}, {"difficulty": 127.0, "summary": "Given a string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged. Note: use .equals() to compare 2 strings.", "section": "Warmup-1", "solution": ["public String notString(String str) {\n  if (str.length() >= 3 && str.substring(0, 3).equals(\"not\")) {\n    return str;\n  }\n  \n  return \"not \" + str;\n}", "public String notString( String str ){\n{\nif ( str.length() >= 3 && str.substring( 0, 3 ).equals( \"not\" ) )\n{\nreturn str;\n}\n\nreturn \"not \" + str;\n}", "public String notString(String str){\nif(str.startsWith(\"not\"))\nreturn str;\nelse\nreturn (\"not \" + str);\n}", "/* Given a string, return a new string where \"not \" has been added to the \n * front. However, if the string already begins with \"not\", return the string \n * unchanged. Note: use .equals() to compare 2 strings.\n */\npublic String notString(String str) {\n    if(str.length() >= 3 && str.substring(0, 3).equals(\"not\"))\n        return str;\n        \n    return \"not \" + str;\n}\n"], "url": "/prob/p191914", "title": "notString", "signature": "public String notString(String str)", "examples": [{"output": "\"not candy\"", "input": "notString(\"candy\")"}, {"output": "\"not x\"", "input": "notString(\"x\")"}, {"output": "\"not bad\"", "input": "notString(\"not bad\")"}]}, {"difficulty": 135.0, "summary": "Given a string str, if the string starts with \"f\" return \"Fizz\". If the string ends with \"b\" return \"Buzz\". If both the \"f\" and \"b\" conditions are true, return \"FizzBuzz\". In all other cases, return the string unchanged. (See also: ", "section": "Logic-1", "solution": ["public String fizzString( String str ){\n{\nboolean isFirstF = str.startsWith( \"f\" );\nboolean isLastB = str.endsWith( \"b\" );\n\nif ( isFirstF && isLastB )\n{\nreturn \"FizzBuzz\";\n}\nif ( isFirstF )\n{\nreturn \"Fizz\";\n}\nif ( isLastB )\n{\nreturn \"Buzz\";\n}\n\nreturn str;\n}", "/* Given a string str, if the string starts with \"f\" return \"Fizz\". If the \n * string ends with \"b\" return \"Buzz\". If both the \"f\" and \"b\" conditions are \n * true, return \"FizzBuzz\". In all other cases, return the string unchanged.\n */\npublic String fizzString(String str) {\n    if(str.length() > 0 && \n        str.charAt(0) == 'f' && str.charAt(str.length() - 1) == 'b')\n        return \"FizzBuzz\";\n              \n    if(str.length() > 0 && str.charAt(0) == 'f')\n        return \"Fizz\";\n                        \n    if(str.length() > 0 && str.charAt(str.length() - 1) == 'b')\n        return \"Buzz\";\n                                  \n    return str;\n}\n"], "url": "/prob/p137136", "title": "fizzString", "signature": "public String fizzString(String str)", "examples": [{"output": "\"Fizz\"", "input": "fizzString(\"fig\")"}, {"output": "\"Buzz\"", "input": "fizzString(\"dib\")"}, {"output": "\"FizzBuzz\"", "input": "fizzString(\"fib\")"}]}, {"difficulty": 130.0, "summary": "Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..str.length()-1 inclusive).", "section": "Warmup-1", "solution": ["public String missingChar(String str, int n) {\n  String front = str.substring(0, n);\n  \n  // Start this substring at n+1 to omit the char.\n  // Can also be shortened to just str.substring(n+1)\n  // which goes through the end of the string.\n  String back = str.substring(n+1, str.length());\n  \n  return front + back;\n}", "public String missingChar( String str, int n ){\n{\nreturn str.substring( 0, n ) + str.substring( n + 1, str.length() );\n}", ["public String missingChar(String str, int n){", "", "", "// Given a string, return a new string where the first and last chars have been exchanged"], "/* Given a non-empty string and an int n, return a new string where the char \n * at index n has been removed. The value of n will be a valid index of a char \n * in the original string (i.e. n will be in the range 0..str.length()-1 \n * inclusive).\n */\npublic String missingChar(String str, int n) {\n    return str.substring(0,n) + str.substring(n+1);\n}\n"], "url": "/prob/p190570", "title": "missingChar", "signature": "public String missingChar(String str, int n)", "examples": [{"output": "\"ktten\"", "input": "missingChar(\"kitten\", 1)"}, {"output": "\"itten\"", "input": "missingChar(\"kitten\", 0)"}, {"output": "\"kittn\"", "input": "missingChar(\"kitten\", 4)"}]}, {"difficulty": 209.0, "summary": "Given an array of scores sorted in increasing order, return true if the array contains 3 adjacent scores that differ from each other by at most 2, such as with {3, 4, 5} or {3, 5, 5}.", "section": "AP-1", "solution": ["public boolean scoresClump( int[] scores ){\n{\nfor ( int i = 0; i < scores.length - 2; i++ )\n{\nif ( scores[i + 2] - scores[i] <= 2 )\n{\nreturn true;\n}\n}\n\nreturn false;\n}", "/* Given an array of scores sorted in increasing order, return true if the \n * array contains 3 adjacent scores that differ from each other by at most 2, \n * such as with {3, 4, 5} or {3, 5, 5}.\n */\npublic boolean scoresClump(int[] scores) {\n    for(int i = 0; i <= scores.length - 3; i++) {\n        if(scores[i+2] - scores[i] <= 2)\n            return true;\n    }\n                \n    return false;\n}\n"], "url": "/prob/p194530", "title": "scoresClump", "signature": "public boolean scoresClump(int[] scores)", "examples": [{"output": "true", "input": "scoresClump([3, 4, 5])"}, {"output": "false", "input": "scoresClump([3, 4, 6])"}, {"output": "true", "input": "scoresClump([1, 3, 5, 5])"}]}, {"difficulty": 122.4, "summary": "Return true if the given non-negative number is 1 or 2 more than a multiple of 20. See also: ", "section": "Logic-1", "solution": ["public boolean more20( int n ){\n{\nreturn n != 0 && ( ( n - 1 ) % 20 == 0 || ( n - 2 ) % 20 == 0 );\n}", "/* Return true if the given non-negative number is 1 or 2 more than a \n * multiple of 20.\n */\npublic boolean more20(int n) {\n    return n % 20 == 1 || n % 20 == 2;\n}\n"], "url": "/prob/p118290", "title": "more20", "signature": "public boolean more20(int n)", "examples": [{"output": "false", "input": "more20(20)"}, {"output": "true", "input": "more20(21)"}, {"output": "true", "input": "more20(22)"}]}, {"difficulty": 151.0, "summary": "Given 2 int values, return true if either of them is in the range 10..20 inclusive.", "section": "Warmup-1", "solution": ["public boolean in1020(int a, int b) {\n  return ((a >= 10 && a <= 20) || (b >= 10 && b <= 20));\n}", ["public boolean in1020(int a, int b){", "", "", "// Given 2 int values, return true if either of them is in the range 10..20 inclusive."], "/* Given 2 int values, return true if either of them is in the range 10..20 \n * inclusive.\n */\npublic boolean in1020(int a, int b) {\n    return (10 <= a && a <= 20) || (10 <= b && b <= 20);\n}\n"], "url": "/prob/p144535", "title": "in1020", "signature": "public boolean in1020(int a, int b)", "examples": [{"output": "true", "input": "in1020(12, 99)"}, {"output": "true", "input": "in1020(21, 12)"}, {"output": "false", "input": "in1020(8, 99)"}]}, {"difficulty": 218.0, "summary": "Given an array of strings, return a new array containing the first N strings. N will be in the range 1..length.", "section": "AP-1", "solution": ["public String[] wordsFront( String[] words, int n ){\n{\nString[] result = new String[n];\n\nfor ( int i = 0; i < n; i++ )\n{\nresult[i] = words[i];\n}\n\nreturn result;\n}", "/* Given an array of strings, return a new array containing the first N \n * strings. N will be in the range 1..length.\n */\npublic String[] wordsFront(String[] words, int n) {\n    String[] arr = new String[n];\n    \n    for(int i = 0; i < arr.length; i++)\n        arr[i] = words[i];\n              \n    return arr;\n}\n"], "url": "/prob/p183837", "title": "wordsFront", "signature": "public String[] wordsFront(String[] words, int n)", "examples": [{"output": "[\"a\"]", "input": "wordsFront([\"a\", \"b\", \"c\", \"d\"], 1)"}, {"output": "[\"a\", \"b\"]", "input": "wordsFront([\"a\", \"b\", \"c\", \"d\"], 2)"}, {"output": "[\"a\", \"b\", \"c\"]", "input": "wordsFront([\"a\", \"b\", \"c\", \"d\"], 3)"}]}, {"difficulty": 309.0, "summary": "The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. The first two values in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. Define a recursive fibonacci(n) method that returns the nth fibonacci number, with n=0 representing the start of the sequence.", "section": "Recursion-1", "solution": ["public int fibonacci(int n){\nif(n < 2)\nreturn n;\nreturn fibonacci(n-2)+fibonacci(n-1);\n}", "/* The fibonacci sequence is a famous bit of mathematics, and it happens to \n * have a recursive definition. The first two values in the sequence are \n * 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the \n * previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 \n * and so on. Define a recursive fibonacci(n) method that returns the nth \n * fibonacci number, with n=0 representing the start of the sequence.\n */\npublic int fibonacci(int n) {\n    if(n <= 1)\n        return n;\n          \n    return fibonacci(n-1) + fibonacci(n-2);\n}\n"], "url": "/prob/p120015", "title": "fibonacci", "signature": "public int fibonacci(int n)", "examples": [{"output": "0", "input": "fibonacci(0)"}, {"output": "1", "input": "fibonacci(1)"}, {"output": "1", "input": "fibonacci(2)"}]}, {"difficulty": 187.0, "summary": "Given a string, if a length 2 substring appears at both its beginning and end, return a string without the substring at the beginning, so \"HelloHe\" yields \"lloHe\". The substring may overlap with itself, so \"Hi\" yields \"\". Otherwise, return the original string unchanged.", "section": "String-1", "solution": ["public String without2(String str) {{\nif (str.length() < 2) {\nreturn str;\n}\n\nString frontSubstring = str.substring(0, 2);\nString backSubstring = str.substring(str.length() - 2);\n\nif (frontSubstring.equals(backSubstring)) {\nreturn str.substring(2);\n}\n\nreturn str;\n}", "public String without2(String str){\nint len = str.length();\nif(len >= 2)\n{\nif(str.substring(0,2).equals(str.substring(len-2, len)))\nreturn str.substring(2);\nelse\nreturn str;\n}\nelse\nreturn str;\n}", "/* Given a string, if a length 2 substring appears at both its beginning and \n * end, return a string without the substring at the beginning, so \"HelloHe\" \n * yields \"lloHe\". The substring may overlap with itself, so \"Hi\" yields \"\". \n * Otherwise, return the original string unchanged.\n */\npublic String without2(String str) {\n    if(str.length () >= 2 && \n        str.substring(0, 2).equals(str.substring(str.length() - 2)))\n        return str.substring(2);\n              \n    return str;\n}\n"], "url": "/prob/p142247", "title": "without2", "signature": "public String without2(String str)", "examples": [{"output": "\"lloHe\"", "input": "without2(\"HelloHe\")"}, {"output": "\"HelloHi\"", "input": "without2(\"HelloHi\")"}, {"output": "\"\"", "input": "without2(\"Hi\")"}]}, {"difficulty": 122.3, "summary": "We'll say a number is special if it is a multiple of 11 or if it is one more than a multiple of 11. Return true if the given non-negative number is special. Use the % \"mod\" operator -- see ", "section": "Logic-1", "solution": ["public boolean specialEleven( int n ){\n{\nreturn ( n % 11 == 0 ) || ( ( n - 1 ) % 11 == 0 );\n}", "/* We'll say a number is special if it is a multiple of 11 or if it is one \n * more than a multiple of 11. Return true if the given non-negative number \n * is special.\n */\npublic boolean specialEleven(int n) {\n    return (n % 11) == 0 || (n % 11) == 1;\n}\n"], "url": "/prob/p100962", "title": "specialEleven", "signature": "public boolean specialEleven(int n)", "examples": [{"output": "true", "input": "specialEleven(22)"}, {"output": "true", "input": "specialEleven(23)"}, {"output": "false", "input": "specialEleven(24)"}]}, {"difficulty": 178.0, "summary": "Given 2 int arrays, a and b, return a new array length 2 containing, as much as will fit, the elements from a followed by the elements from b. The arrays may be any length, including 0, but there will be 2 or more elements available between the 2 arrays.", "section": "Array-1", "solution": ["public int[] make2(int[] a, int[] b){\nint[] comb = new int[2];\nif(a.length >= 2)\n{\ncomb[0] = a[0];\ncomb[1] = a[1];\n}\nelse if(a.length == 1)\n{\ncomb[0] = a[0];\ncomb[1] = b[0];\n}\nelse\n{\ncomb[0] = b[0];\ncomb[1] = b[1];\n}\nreturn comb;\n}", "/* Given 2 int arrays, a and b, return a new array length 2 containing, as \n * much as will fit, the elements from a followed by the elements from b. The \n * arrays may be any length, including 0, but there will be 2 or more \n * elements available between the 2 arrays.\n */\npublic int[] make2(int[] a, int[] b) {\n    int[] arr = new int[2];\n    int count = 0;\n    int i;\n        \n    i = 0;\n    while(count < 2 && i < a.length) {\n        arr[count] = a[i];\n        count++;\n        i++;\n    }\n                            \n    i = 0;\n    while(count < 2 && i < b.length) {\n        arr[count] = b[i];\n        count++;\n        i++;\n    }\n                                                \n    return arr;\n}\n"], "url": "/prob/p143461", "title": "make2", "signature": "public int[] make2(int[] a, int[] b)", "examples": [{"output": "[4, 5]", "input": "make2([4, 5], [1, 2, 3])"}, {"output": "[4, 1]", "input": "make2([4], [1, 2, 3])"}, {"output": "[1, 2]", "input": "make2([], [1, 2])"}]}, {"difficulty": 415.0, "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target, with this additional constraint: if there are numbers in the array that are adjacent and the identical value, they must either all be chosen, or none of them chosen. For example, with the array {1, 2, 2, 2, 5, 2}, either all three 2's in the middle must be chosen or not, all as a group. (one loop can be used to find the extent of the identical values).", "section": "Recursion-2", "solution": ["public boolean groupSumClump(int start, int[] nums, int target){\nif(start >= nums.length)\n{\nif(target == 0)\nreturn true;\nreturn false;\n}\nint i = start + 1;\nfor(;  i < nums.length && nums[start] == nums[i]; i++);\nif(groupSumClump(i, nums, target - ((i - start) * nums[start])))\nreturn true;\nreturn groupSumClump(i, nums, target);\n}", "/* Given an array of ints, is it possible to choose a group of some of the \n * ints, such that the group sums to the given target, with this additional \n * constraint: if there are numbers in the array that are adjacent and the \n * identical value, they must either all be chosen, or none of them chosen. \n * For example, with the array {1, 2, 2, 2, 5, 2}, either all three 2's in the \n * middle must be chosen or not, all as a group. (one loop can be used to \n * find the extent of the identical values).\n */\npublic boolean groupSumClump(int start, int[] nums, int target) {\n    if(start >= nums.length)\n        return target == 0;\n          \n    int i = start;\n    int sum = 0;\n    \n    while(i < nums.length && nums[start] == nums[i]) {\n        sum += nums[i];\n        i++;\n    }\n                              \n    if(groupSumClump(i, nums, target - sum))\n        return true;\n                                        \n    if(groupSumClump(i, nums, target))\n        return true;\n                                                  \n    return false;\n}\n"], "url": "/prob/p105136", "title": "groupSumClump", "signature": "public boolean groupSumClump(int start, int[] nums, int target)", "examples": [{"output": "true", "input": "groupSumClump(0, [2, 4, 8], 10)"}, {"output": "true", "input": "groupSumClump(0, [1, 2, 4, 8, 1], 14)"}, {"output": "false", "input": "groupSumClump(0, [2, 4, 4, 8], 14)"}]}, {"difficulty": 248.0, "summary": "Given an array of ints, return true if there is a 1 in the array with a 2 somewhere later in the array.", "section": "Array-2", "solution": ["public boolean has12(int[] nums){\nboolean oneSpotted = false;\nfor(int i = 0; i < nums.length; i++)\n{\nif(oneSpotted)\n{\nif(nums[i] == 2)\nreturn true;\n}\nelse if(nums[i] == 1)\noneSpotted = true;\n}\nreturn false;\n}", "/* Given an array of ints, return true if there is a 1 in the array with a \n * 2 somewhere later in the array.\n */\npublic boolean has12(int[] nums) {\n    boolean found1 = false;\n    \n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 1)\n            found1 = true;\n                    \n        if(found1 && nums[i] == 2)\n            return true;\n    }\n                                  \n    return false;  \n}\n"], "url": "/prob/p169260", "title": "has12", "signature": "public boolean has12(int[] nums)", "examples": [{"output": "true", "input": "has12([1, 3, 2])"}, {"output": "true", "input": "has12([3, 1, 2])"}, {"output": "true", "input": "has12([3, 1, 4, 5, 2])"}]}, {"difficulty": 206.0, "summary": "Given 3 int values, a b c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "section": "Logic-2", "solution": ["public int loneSum(int a, int b, int c){\nif(a == b)\n{\nif(a == c)\nreturn 0;\nreturn c;\n}\nif(a == c)\nreturn b;\nif(b == c)\nreturn a;\nreturn (a + b + c);\n}", "/* Given 3 int values, a b c, return their sum. However, if one of the values \n * is the same as another of the values, it does not count towards the sum.\n */\npublic int loneSum(int a, int b, int c) {\n    int sum = 0;\n    \n    if(a != b && a != c)\n        sum += a;\n              \n    if(b != a && b != c)\n        sum += b;\n                        \n    if(c != a && c != b)\n        sum += c;\n                                  \n    return sum;\n}\n"], "url": "/prob/p148972", "title": "loneSum", "signature": "public int loneSum(int a, int b, int c)", "examples": [{"output": "6", "input": "loneSum(1, 2, 3)"}, {"output": "2", "input": "loneSum(3, 2, 3)"}, {"output": "0", "input": "loneSum(3, 3, 3)"}]}, {"difficulty": 239.0, "summary": "Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string appear somewhere else in the string? Assume that the string is not empty and that N is in the range 1..str.length().", "section": "String-2", "solution": ["public boolean prefixAgain(String str, int n){\nString prfx = str.substring(0, n);\nreturn (str.indexOf(prfx, 1) != -1);\n}", "/* Given a string, consider the prefix string made of the first N chars of \n * the string. Does that prefix string appear somewhere else in the string? \n * Assume that the string is not empty and that N is in the range \n * 1..str.length().\n */\npublic boolean prefixAgain(String str, int n) {\n    String prefix = str.substring(0, n);\n    \n    for(int i = n; i <= str.length() - n; i++) {\n        if(str.substring(i, i + n).equals(prefix))\n            return true;\n    }\n                    \n    return false;\n}\n"], "url": "/prob/p136417", "title": "prefixAgain", "signature": "public boolean prefixAgain(String str, int n)", "examples": [{"output": "true", "input": "prefixAgain(\"abXYabc\", 1)"}, {"output": "true", "input": "prefixAgain(\"abXYabc\", 2)"}, {"output": "false", "input": "prefixAgain(\"abXYabc\", 3)"}]}, {"difficulty": 121.0, "summary": "Given an int n, return true if it is within 10 of 100 or 200. Note: Math.abs(num) computes the absolute value of a number.", "section": "Warmup-1", "solution": ["public boolean nearHundred(int n) {\n  return ((Math.abs(100 - n) <= 10) ||\n    (Math.abs(200 - n) <= 10));\n}", "public boolean nearHundred( int n ){\n{\nreturn Math.abs( n - 100 ) <= 10 || Math.abs( n - 200 ) <= 10;\n}", ["public boolean nearHundred(int n){", "", "", "// Given 2 int values, return true if one is negative and one is positive.", "// Unless the parameter \"negative\" is true, then they both must be negative."], "/* Given an int n, return true if it is within 10 of 100 or 200. Note: \n * Math.abs(num) computes the absolute value of a number.\n */\npublic boolean nearHundred(int n) {\n    return Math.abs(n - 100) <= 10 || Math.abs(n - 200) <= 10;\n}\n"], "url": "/prob/p184004", "title": "nearHundred", "signature": "public boolean nearHundred(int n)", "examples": [{"output": "true", "input": "nearHundred(93)"}, {"output": "true", "input": "nearHundred(90)"}, {"output": "false", "input": "nearHundred(89)"}]}, {"difficulty": 390.0, "summary": "Given a string and a non-empty substring ", "section": "Recursion-1", "solution": ["public int strDist(String str, String sub){\nint stLen = str.length();\nint sbLen = sub.length();\nif(stLen < sbLen)\nreturn 0;\nif(str.substring(0, sbLen).equals(sub))\n{\nif(str.substring(stLen - sbLen, stLen).equals(sub))\nreturn stLen;\nreturn strDist(str.substring(0, stLen - 1), sub);\n}\nreturn strDist(str.substring(1), sub);\n}", "/* Given a string and a non-empty substring sub, compute recursively the \n * largest substring which starts and ends with sub and return its length.\n */\npublic int strDist(String str, String sub) {\n    if(str.length() < sub.length())\n        return 0;\n          \n    if(str.substring(0, sub.length()).equals(sub) &&\n        str.substring(str.length() - sub.length()).equals(sub))\n        return str.length();\n                        \n    if(!str.substring(0, sub.length()).equals(sub))\n        return strDist(str.substring(1), sub);\n                                  \n    return strDist(str.substring(0, str.length()-1), sub);\n}\n"], "url": "/prob/p195413", "title": "strDist", "signature": "public int strDist(String str, String sub)", "examples": [{"output": "9", "input": "strDist(\"catcowcat\", \"cat\")"}, {"output": "3", "input": "strDist(\"catcowcat\", \"cow\")"}, {"output": "9", "input": "strDist(\"cccatcowcatxx\", \"cat\")"}]}, {"difficulty": 221.0, "summary": "Given a list of strings, return a list where each string is converted to lower case (Note: String toLowerCase() method).", "section": "Functional-1", "solution": [], "url": "/prob/p186894", "title": "lower", "signature": "public List<String> lower(List<String> strings)", "examples": [{"output": "[\"hello\", \"hi\"]", "input": "lower([\"Hello\", \"Hi\"])"}, {"output": "[\"aaa\", \"bbb\", \"ccc\"]", "input": "lower([\"AAA\", \"BBB\", \"ccc\"])"}, {"output": "[\"kitten\", \"chocolate\"]", "input": "lower([\"KitteN\", \"ChocolaTE\"])"}]}, {"difficulty": 154.0, "summary": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 3 int values, return true if 1 or more of them are teen.", "section": "Warmup-1", "solution": ["public boolean hasTeen(int a, int b, int c) {\n  // Here it is written as one big expression,\n  // vs. a series of if-statements.\n  return (a>=13 && a<=19) ||\n         (b>=13 && b<=19) ||\n         (c>=13 && c<=19);\n}", ["public boolean hasTeen(int a, int b, int c){", "", "", "// We'll say that a number is \"teen\" if it is in the range 13..19 inclusive.", "// Given 2 int values, return true if one or the other is teen, but not both."], "/* We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. \n * Given 3 int values, return true if 1 or more of them are teen.\n */\npublic boolean hasTeen(int a, int b, int c) {\n    return 13 <= a && a <= 19 ||\n        13 <= b && b <= 19 ||\n        13 <= c && c <= 19;\n}\n"], "url": "/prob/p178986", "title": "hasTeen", "signature": "public boolean hasTeen(int a, int b, int c)", "examples": [{"output": "true", "input": "hasTeen(13, 20, 10)"}, {"output": "true", "input": "hasTeen(20, 19, 10)"}, {"output": "true", "input": "hasTeen(20, 10, 13)"}]}, {"difficulty": 154.0, "summary": "Start with 2 int arrays, a and b, each length 2. Consider the sum of the values in each array. Return the array which has the largest sum. In event of a tie, return a.", "section": "Array-1", "solution": ["public int[] biggerTwo(int[] a, int[] b){\nint sum = a[0]+a[1]-b[0]-b[1];\nif(sum >= 0)\nreturn a;\nreturn b;\n}", "/* Start with 2 int arrays, a and b, each length 2. Consider the sum of the \n * values in each array. Return the array which has the largest sum. In event \n * of a tie, return a.\n */\npublic int[] biggerTwo(int[] a, int[] b) {\n    if(a[0] + a[1] < b[0] + b[1])\n        return b;\n          \n    return a;\n}\n"], "url": "/prob/p109537", "title": "biggerTwo", "signature": "public int[] biggerTwo(int[] a, int[] b)", "examples": [{"output": "[3, 4]", "input": "biggerTwo([1, 2], [3, 4])"}, {"output": "[3, 4]", "input": "biggerTwo([3, 4], [1, 2])"}, {"output": "[1, 2]", "input": "biggerTwo([1, 1], [1, 2])"}]}, {"difficulty": 257.0, "summary": "Given an array of ints, return true if every 2 that appears in the array is next to another 2.", "section": "Array-2", "solution": ["public boolean twoTwo(int[] nums){\nint count = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] == 2)\ncount++;\nelse\n{\nif(state == 1)\nreturn false;\nelse\ncount = 0;\n}\n}\nreturn (count != 1);\n}", "/* Given an array of ints, return true if every 2 that appears in the array \n * is next to another 2.\n */\npublic boolean twoTwo(int[] nums) {\n    if(nums.length == 1 && nums[0] == 2)\n        return false;\n          \n    if(nums.length >= 2 && ((nums[0] == 2 && nums[1] != 2) ||\n        (nums[nums.length-1] == 2 && nums[nums.length-2] != 2)))\n        return false;\n                            \n    for(int i = 1; i <= nums.length - 2; i++) {\n        if(nums[i] == 2 && nums[i-1] != 2 && nums[i+1] != 2)\n            return false;\n    }\n                                            \n    return true;\n}\n"], "url": "/prob/p102145", "title": "twoTwo", "signature": "public boolean twoTwo(int[] nums)", "examples": [{"output": "true", "input": "twoTwo([4, 2, 2, 3])"}, {"output": "true", "input": "twoTwo([2, 2, 4])"}, {"output": "false", "input": "twoTwo([2, 2, 4, 2])"}]}, {"difficulty": 214.0, "summary": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values. To avoid code repetition, write a separate helper \"public int round10(int num) {\" and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "section": "Logic-2", "solution": [["public int roundSum(int a, int b, int c){", "", "", "// Given three ints, a b c, return true if one of b or c is \"close\" (differing from a by at most 1), while the other is \"far\", differing from both other values by 2 or more.", "// Note: Math.abs(num) computes the absolute value of a number."], "/* For this problem, we'll round an int value up to the next multiple of 10 \n * if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, \n * round down to the previous multiple of 10 if its rightmost digit is less \n * than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of \n * their rounded values. To avoid code repetition, write a separate helper \n * \"public int round10(int num) {\" and call it 3 times. Write the helper \n * entirely below and at the same indent level as roundSum().\n */\npublic int roundSum(int a, int b, int c) {\n    return round10(a) + round10(b) + round10(c);\n}\n\npublic int round10(int num) {\n    int rd = num % 10;\n      \n    if(rd >= 5)\n        return num + 10 - rd;\n                \n    return num - rd;\n}\n"], "url": "/prob/p186753", "title": "roundSum", "signature": "public int roundSum(int a, int b, int c)", "examples": [{"output": "60", "input": "roundSum(16, 17, 18)"}, {"output": "30", "input": "roundSum(12, 13, 14)"}, {"output": "10", "input": "roundSum(6, 4, 4)"}]}, {"difficulty": 157.0, "summary": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 2 int values, return true if one or the other is teen, but not both.", "section": "Warmup-1", "solution": ["public boolean loneTeen(int a, int b) {\n  // Store teen-ness in boolean local vars first. Boolean local\n  // vars like this are a little rare, but here they work great.\n  boolean aTeen = (a >= 13 && a <= 19);\n  boolean bTeen = (b >= 13 && b <= 19);\n  \n  return (aTeen && !bTeen) || (!aTeen && bTeen);\n  // Translation: one or the other, but not both.\n  // Alternately could use the Java xor operator, but it's obscure.\n}", "public boolean loneTeen(int a, int b){\nreturn (((a >= 13 && a <= 19) && !(b >= 13 && b <= 19)) ||\n(!(a >= 13 && a <= 19) && (b >= 13 && b <= 19)));\n}", "/* We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. \n * Given 2 int values, return true if one or the other is teen, but not both.\n */\npublic boolean loneTeen(int a, int b) {\n    boolean aTeen = 13 <= a && a <= 19;\n    boolean bTeen = 13 <= b && b <= 19;\n      \n    return aTeen != bTeen;\n}\n"], "url": "/prob/p165701", "title": "loneTeen", "signature": "public boolean loneTeen(int a, int b)", "examples": [{"output": "true", "input": "loneTeen(13, 99)"}, {"output": "true", "input": "loneTeen(21, 19)"}, {"output": "false", "input": "loneTeen(13, 13)"}]}, {"difficulty": 169.0, "summary": "Given 2 non-negative ints, a and b, return their sum, so long as the sum has the same number of digits as a. If the sum has more digits than a, just return a without b. (Note: one way to compute the number of digits of a non-negative int n is to convert it to a string with String.valueOf(n) and then check the length of the string.)", "section": "Logic-1", "solution": ["public int sumLimit( int a, int b ){\n{\nint sum = a + b;\nString aStr = String.valueOf( a );\nString sumStr = String.valueOf( sum );\n\nreturn sumStr.length() > aStr.length() ? a : sum;\n}", "public int sumLimit(int a, int b){\nint aLength = numOfDigits(a);\nint sum = a + b;\nif(aLength == numOfDigits(sum))\nreturn sum;\nreturn a;\n}", "/* Given 2 non-negative ints, a and b, return their sum, so long as the sum \n * has the same number of digits as a. If the sum has more digits than a, \n * just return a without b.\n */\npublic int sumLimit(int a, int b) {\n    int sum = a + b;\n    int aLength = String.valueOf(a).length();\n    int sumLength = String.valueOf(sum).length();\n        \n    if(sumLength == aLength)\n        return sum;\n                  \n    return a;\n}\n"], "url": "/prob/p118077", "title": "sumLimit", "signature": "public int sumLimit(int a, int b)", "examples": [{"output": "5", "input": "sumLimit(2, 3)"}, {"output": "8", "input": "sumLimit(8, 3)"}, {"output": "9", "input": "sumLimit(8, 1)"}]}, {"difficulty": 148.0, "summary": "Given two temperatures, return true if one is less than 0 and the other is greater than 100.", "section": "Warmup-1", "solution": ["public boolean icyHot(int temp1, int temp2) {\n  if ((temp1 < 0 && temp2 > 100) || (temp1 > 100 && temp2 < 0)) {\n    return true;\n  } else {\n    return false;\n  }\n  // Could be written as: return ((temp1 < 0 && ...));\n}", "public boolean icyHot( int temp1, int temp2 ){\n{\nreturn ( temp1 < 0 && temp2 > 100 ) || ( temp1 > 100 && temp2 < 0 );\n}", ["public boolean icyHot(int temp1, int temp2){", "", "", "// Given 2 int values, return true if either of them is in the range 10..20 inclusive."], "/* Given two temperatures, return true if one is less than 0 and the other is \n * greater than 100.\n */\npublic boolean icyHot(int temp1, int temp2) {\n    return (temp1 * temp2 < 0) && Math.abs(temp1 - temp2) >= 102;\n}\n"], "url": "/prob/p192082", "title": "icyHot", "signature": "public boolean icyHot(int temp1, int temp2)", "examples": [{"output": "true", "input": "icyHot(120, -1)"}, {"output": "true", "input": "icyHot(-1, 120)"}, {"output": "false", "input": "icyHot(2, 120)"}]}, {"difficulty": 127.0, "summary": "Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).", "section": "String-1", "solution": ["public String comboString(String a, String b) {{\nreturn (a.length() < b.length()) ? (a + b + a) : (b + a + b);\n}", "public String comboString(String a, String b){\nif(a.length() >= b.length())\nreturn b+a+b;\nreturn a+b+a;\n}", "/* Given 2 strings, a and b, return a string of the form short+long+short, \n * with the shorter string on the outside and the longer string on the \n * inside. The strings will not be the same length, but they may be empty \n * (length 0).\n */\npublic String comboString(String a, String b) {\n    if(b.length() < a.length()) {\n        String temp = a;\n        a = b;\n        b = temp;\n    }\n                  \n    return a + b + a;\n}\n"], "url": "/prob/p168564", "title": "comboString", "signature": "public String comboString(String a, String b)", "examples": [{"output": "\"hiHellohi\"", "input": "comboString(\"Hello\", \"hi\")"}, {"output": "\"hiHellohi\"", "input": "comboString(\"hi\", \"Hello\")"}, {"output": "\"baaab\"", "input": "comboString(\"aaa\", \"b\")"}]}, {"difficulty": 166.0, "summary": "Given a string, return a string made of the first 2 chars (if present), however include first char only if it is 'o' and include the second only if it is 'z', so \"ozymandias\" yields \"oz\".", "section": "Warmup-1", "solution": ["public String startOz(String str) {\n  String result = \"\";\n  \n  if (str.length() >= 1 && str.charAt(0)=='o') {\n    result = result + str.charAt(0);\n  }\n  \n  if (str.length() >= 2 && str.charAt(1)=='z') {\n    result = result + str.charAt(1);\n  }\n  \n  return result;\n}", "public String startOz(String str){\nint len = str.length();\nString temp = \"\";\nif(len >= 1)\n{\nif(str.charAt(0) == 'o')\ntemp += str.charAt(0);\nif(len >= 2)\n{\nif(str.charAt(1) == 'z')\ntemp += str.charAt(1);\n}\n}\nreturn temp;\n}", "/* Given a string, return a string made of the first 2 chars (if present), \n * however include first char only if it is 'o' and include the second only if \n * it is 'z', so \"ozymandias\" yields \"oz\".\n */\npublic String startOz(String str) {\n    String result = \"\";\n    \n    if(str.length() >= 1 && str.charAt(0) == 'o')\n        result += str.charAt(0);\n        \n    if(str.length() >= 2 && str.charAt(1) == 'z')\n        result += str.charAt(1);\n                        \n    return result;\n}\n"], "url": "/prob/p199720", "title": "startOz", "signature": "public String startOz(String str)", "examples": [{"output": "\"oz\"", "input": "startOz(\"ozymandias\")"}, {"output": "\"z\"", "input": "startOz(\"bzoo\")"}, {"output": "\"o\"", "input": "startOz(\"oxx\")"}]}, {"difficulty": 248.0, "summary": "Returns true if for every '*' (star) in the string, if there are chars both immediately before and after the star, they are the same.", "section": "String-2", "solution": ["public boolean sameStarChar(String str){\nint len = str.length() - 1;\nfor(int i = 1; i < len; i++)\n{\nif(str.charAt(i) == '*')\n{\nif(str.charAt(i-1) != str.charAt(i+1))\nreturn false;\n}\n}\nreturn true;\n}", "/* Returns true if for every '*' (star) in the string, if there are chars \n * both immediately before and after the star, they are the same.\n */\npublic boolean sameStarChar(String str) {\n    for(int i = 1; i < str.length() - 1; i++) {\n        if(str.charAt(i) == '*' && str.charAt(i - 1) != str.charAt(i + 1))\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p194491", "title": "sameStarChar", "signature": "public boolean sameStarChar(String str)", "examples": [{"output": "true", "input": "sameStarChar(\"xy*yzz\")"}, {"output": "false", "input": "sameStarChar(\"xy*zzz\")"}, {"output": "true", "input": "sameStarChar(\"*xa*az\")"}]}, {"difficulty": 203.0, "summary": "Given a string, return a string where for every char in the original, there are two chars.", "section": "String-2", "solution": ["public String doubleChar( String str ){\n{\nString result = \"\";\n\nfor ( int i = 0; i < str.length(); i++ )\n{\nresult = result + str.charAt( i ) + str.charAt( i );\n}\n\nreturn result;\n}", "public String doubleChar(String str){\nint len = str.length();\nchar ch;\nStringBuilder stbuild = new StringBuilder(len*2);\nfor(int i = 0; i < len; i++)\n{\nch = str.charAt(i);\nstbuild.append(ch);\nstbuild.append(ch);\n}\nreturn stbuild.toString();\n}", "/* Given a string, return a string where for every char in the original, \n * there are two chars.\n */\npublic String doubleChar(String str) {\n    char[] arr = new char[2 * str.length()];\n    int count = 0;\n      \n    for(int i = 0; i < str.length(); i++) {\n        arr[count] = str.charAt(i);\n        count++;\n        arr[count] = str.charAt(i);\n        count++;\n    }\n                            \n    return new String(arr);\n}\n"], "url": "/prob/p165312", "title": "doubleChar", "signature": "public String doubleChar(String str)", "examples": [{"output": "\"TThhee\"", "input": "doubleChar(\"The\")"}, {"output": "\"AAAAbbbb\"", "input": "doubleChar(\"AAbb\")"}, {"output": "\"HHii--TThheerree\"", "input": "doubleChar(\"Hi-There\")"}]}, {"difficulty": 315.0, "summary": "Given two arrays of ints sorted in increasing order, ", "section": "Array-3", "solution": ["public boolean linearIn(int[] outer, int[] inner){\nboolean notFound;\nfor(int inI = 0, outI = 0; inI < inner.length; inI++)\n{\nnotFound = true;\nfor(; outI < outer.length && notFound; outI++)\n{\nif(inner[inI] == outer[outI])\nnotFound = false;\n}\nif(notFound)\nreturn false;\n}\nreturn true;\n}", "/* Given two arrays of ints sorted in increasing order, outer and inner, \n * return true if all of the numbers in inner appear in outer. The best \n * solution makes only a single \"linear\" pass of both arrays, taking \n * advantage of the fact that both arrays are already in sorted order.\n */\npublic boolean linearIn(int[] outer, int[] inner) {\n    int i = 0;\n    int j = 0;\n      \n    while(i < inner.length && j < outer.length) {\n        if(inner[i] > outer[j]) {\n            j++;\n        } else if(inner[i] < outer[j]) {\n            return false;\n        } else {\n            i++;\n        }\n    }\n                                              \n    if(i != inner.length)\n        return false;\n                                                      \n    return true;\n}\n"], "url": "/prob/p134022", "title": "linearIn", "signature": "public boolean linearIn(int[] outer, int[] inner)", "examples": [{"output": "true", "input": "linearIn([1, 2, 4, 6], [2, 4])"}, {"output": "false", "input": "linearIn([1, 2, 4, 6], [2, 3, 4])"}, {"output": "true", "input": "linearIn([1, 2, 4, 4, 6], [2, 4])"}]}, {"difficulty": 122.5, "summary": "Return true if the given non-negative number is a multiple of 3 or 5, but not both. Use the % \"mod\" operator -- see ", "section": "Logic-1", "solution": ["public boolean old35( int n ){\n{\nreturn ( n % 3 == 0 && n % 5 != 0 ) || ( n % 3 != 0 && n % 5 == 0 );\n}", "/* Return true if the given non-negative number is a multiple of 3 or 5, but \n * not both.\n */\npublic boolean old35(int n) {\n    return (n % 3 == 0) != (n % 5 == 0);\n}\n"], "url": "/prob/p159612", "title": "old35", "signature": "public boolean old35(int n)", "examples": [{"output": "true", "input": "old35(3)"}, {"output": "true", "input": "old35(10)"}, {"output": "false", "input": "old35(15)"}]}, {"difficulty": 220.0, "summary": "Given a list of strings, return a list where each string has \"y\" added at its end, omitting any resulting strings that contain \"yy\" as a substring anywhere.", "section": "Functional-2", "solution": [], "url": "/prob/p115967", "title": "noYY", "signature": "public List<String> noYY(List<String> strings)", "examples": [{"output": "[\"ay\", \"by\", \"cy\"]", "input": "noYY([\"a\", \"b\", \"c\"])"}, {"output": "[\"ay\", \"by\"]", "input": "noYY([\"a\", \"b\", \"cy\"])"}, {"output": "[\"xxy\", \"yay\", \"zzy\"]", "input": "noYY([\"xx\", \"ya\", \"zz\"])"}]}, {"difficulty": 130.0, "summary": "Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "section": "Logic-1", "solution": ["public boolean answerCell( boolean isMorning, boolean isMom, boolean isAsleep ){\n{\nreturn !isAsleep && ( !isMorning || isMom );\n}", "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep){\nif(isAsleep)\nreturn false;\nif(isMom)\nreturn true;\nreturn (!isMorning);\n}", "/* Your cell phone rings. Return true if you should answer it. Normally you \n * answer, except in the morning you only answer if it is your mom calling. \n * In all cases, if you are asleep, you do not answer.\n */\npublic boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep) {\n    if(isAsleep)\n        return false;\n          \n    if(isMorning && !isMom)\n        return false;\n                    \n    return true;\n}\n"], "url": "/prob/p110973", "title": "answerCell", "signature": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)", "examples": [{"output": "true", "input": "answerCell(false, false, false)"}, {"output": "false", "input": "answerCell(false, false, true)"}, {"output": "false", "input": "answerCell(true, false, false)"}]}, {"difficulty": 139.0, "summary": "Given a string, return a string length 1 from its front, unless ", "section": "String-1", "solution": ["public String theEnd(String str, boolean front) {{\nreturn front ? str.substring(0, 1) : str.substring(str.length() - 1, str.length());\n}", "public String theEnd(String str, boolean front){\nif(front)\nreturn str.substring(0, 1);\nreturn str.substring(str.length()-1);\n}", "/* Given a string, return a string length 1 from its front, unless front is \n * false, in which case return a string length 1 from its back. The string \n * will be non-empty.\n */\npublic String theEnd(String str, boolean front) {\n    if(front)\n        return str.substring(0,1);\n          \n    return str.substring(str.length() - 1);\n}\n"], "url": "/prob/p162477", "title": "theEnd", "signature": "public String theEnd(String str, boolean front)", "examples": [{"output": "\"H\"", "input": "theEnd(\"Hello\", true)"}, {"output": "\"o\"", "input": "theEnd(\"Hello\", false)"}, {"output": "\"o\"", "input": "theEnd(\"oh\", true)"}]}, {"difficulty": 130.0, "summary": "Given 2 int arrays, a and b, each length 3, return a new array length 2 containing their middle elements.", "section": "Array-1", "solution": ["public int[] middleWay(int[] a, int[] b){\nint[] mids = {a[1], b[1]};\nreturn mids;\n}", "/* Given 2 int arrays, a and b, each length 3, return a new array length 2 \n * containing their middle elements.\n */\npublic int[] middleWay(int[] a, int[] b) {\n    return new int[] {a[1], b[1]};\n}\n"], "url": "/prob/p146449", "title": "middleWay", "signature": "public int[] middleWay(int[] a, int[] b)", "examples": [{"output": "[2, 5]", "input": "middleWay([1, 2, 3], [4, 5, 6])"}, {"output": "[7, 8]", "input": "middleWay([7, 7, 7], [3, 8, 0])"}, {"output": "[2, 4]", "input": "middleWay([5, 2, 9], [1, 4, 5])"}]}, {"difficulty": 230.0, "summary": "Given an array of ints, return true if every element is a 1 or a 4.", "section": "Array-2", "solution": ["public boolean only14(int[] nums){\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] != 1 && nums[i] != 4)\nreturn false;\n}\nreturn true;\n}", "/* Given an array of ints, return true if every element is a 1 or a 4.\n */\npublic boolean only14(int[] nums) {\n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] != 1 && nums[i] != 4)\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p186672", "title": "only14", "signature": "public boolean only14(int[] nums)", "examples": [{"output": "true", "input": "only14([1, 4, 1, 4])"}, {"output": "false", "input": "only14([1, 4, 2, 4])"}, {"output": "true", "input": "only14([1, 1])"}]}, {"difficulty": 412.0, "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target with these additional constraints: all multiples of 5 in the array must be included in the group. If the value immediately following a multiple of 5 is 1, it must not be chosen. (No loops needed.)", "section": "Recursion-2", "solution": ["public boolean groupSum5(int start, int[] nums, int target){\nif(start >= nums.length)\n{\nif(target == 0)\nreturn true;\nreturn false;\n}\nif(nums[start] % 5 == 0)\n{\nif(start < nums.length - 1 && nums[start+1] == 1)\nreturn groupSum5(start + 2, nums, target - nums[start]);\nreturn groupSum5(start + 1, nums, target - nums[start]);\n}\nif(groupSum5(start + 1, nums, target - nums[start]))\nreturn true;\nreturn groupSum5(start + 1, nums, target);\n}", "/* Given an array of ints, is it possible to choose a group of some of the \n * ints, such that the group sums to the given target with these additional \n * constraints: all multiples of 5 in the array must be included in the group. \n * If the value immediately following a multiple of 5 is 1, it must not be \n * chosen. (No loops needed.)\n */\npublic boolean groupSum5(int start, int[] nums, int target) {\n    if(start >= nums.length)\n        return target == 0;\n          \n    if(nums[start] % 5 == 0) {\n        if(start <= nums.length - 2 && nums[start+1] == 1)\n            return groupSum5(start+2, nums, target - nums[start]);\n                            \n        return groupSum5(start+1, nums, target - nums[start]);\n    }\n                                    \n    if(groupSum5(start+1, nums, target - nums[start]))\n        return true;\n                                              \n    if(groupSum5(start+1, nums, target))\n        return true;\n                                                        \n    return false;\n}\n"], "url": "/prob/p138907", "title": "groupSum5", "signature": "public boolean groupSum5(int start, int[] nums, int target)", "examples": [{"output": "true", "input": "groupSum5(0, [2, 5, 10, 4], 19)"}, {"output": "true", "input": "groupSum5(0, [2, 5, 10, 4], 17)"}, {"output": "false", "input": "groupSum5(0, [2, 5, 10, 4], 12)"}]}, {"difficulty": 206.0, "summary": "Return the number of times that the string \"hi\" appears anywhere in the given string.", "section": "String-2", "solution": ["public int countHi( String str ){\n{\nint hiCount = 0;\n\nfor ( int i = str.indexOf( \"hi\" ); i != -1; i = str.indexOf( \"hi\", i + 1 ) )\n{\nhiCount++;\n}\n\nreturn hiCount;\n}", "public int countHi(String str){\nint len = str.length()-1;\nint times = 0;\nfor(int i = 0; i < len; i++)\n{\nif(str.charAt(i) == 'h' && str.charAt(i+1) == 'i')\ntimes++;\n}\nreturn times;\n}", "/* Return the number of times that the string \"hi\" appears anywhere in the \n * given string.\n */\npublic int countHi(String str) {\n    int count = 0;\n    \n    for(int i = 0; i < str.length() - 1; i++) {\n        if(str.substring(i, i + 2).equals(\"hi\"))\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p147448", "title": "countHi", "signature": "public int countHi(String str)", "examples": [{"output": "1", "input": "countHi(\"abc hi ho\")"}, {"output": "2", "input": "countHi(\"ABChi hi\")"}, {"output": "2", "input": "countHi(\"hihi\")"}]}, {"difficulty": 124.0, "summary": "Given 2 int values, return true if one is negative and one is positive. Except if the parameter \"negative\" is true, then return true only if both are negative.", "section": "Warmup-1", "solution": ["public boolean posNeg(int a, int b, boolean negative) {\n  if (negative) {\n    return (a < 0 && b < 0);\n  }\n  else {\n    return ((a < 0 && b > 0) || (a > 0 && b < 0));\n  }\n}", "public boolean posNeg( int a, int b, boolean negative ){\n{\nif ( negative )\n{\nreturn ( a < 0 ) && ( b < 0 );\n}\nelse\n{\nreturn ( a < 0 ) && ( b > 0 ) || ( a > 0 ) && ( b < 0 );\n}\n}", "public boolean posNeg(int a, int b, boolean negative){\nif(negative)\nreturn (a < 0 && b < 0);\nreturn (a < 0 && b > 0 || a > 0 && b < 0);\n}", "/* Given 2 int values, return true if one is negative and one is positive. \n * Except if the parameter \"negative\" is true, then return true only if both \n * are negative.\n */\npublic boolean posNeg(int a, int b, boolean negative) {\n    if(negative)\n        return a < 0 && b < 0;\n    else\n        return a * b < 0;\n}\n"], "url": "/prob/p159227", "title": "posNeg", "signature": "public boolean posNeg(int a, int b, boolean negative)", "examples": [{"output": "true", "input": "posNeg(1, -1, false)"}, {"output": "true", "input": "posNeg(-1, 1, false)"}, {"output": "true", "input": "posNeg(-4, -5, true)"}]}, {"difficulty": 224.0, "summary": "We want make a package of ", "section": "Logic-2", "solution": ["public int makeChocolate(int small, int big, int goal){\nint maxBig = goal/5;\nif(maxBig <= big)\ngoal -= maxBig*5;\nelse\ngoal -= big*5;\nif(goal <= small)\nreturn goal;\nreturn -1;\n}", "/* We want make a package of goal kilos of chocolate. We have small bars \n * (1 kilo each) and big bars (5 kilos each). Return the number of small bars \n * to use, assuming we always use big bars before small bars. Return -1 if it \n * can't be done.\n */\npublic int makeChocolate(int small, int big, int goal) {\n    int remainder = goal >= 5 * big ? goal - (5 * big) : goal % 5;\n    \n    return remainder <= small ? remainder : -1;\n}\n"], "url": "/prob/p191363", "title": "makeChocolate", "signature": "public int makeChocolate(int small, int big, int goal)", "examples": [{"output": "4", "input": "makeChocolate(4, 1, 9)"}, {"output": "-1", "input": "makeChocolate(4, 1, 10)"}, {"output": "2", "input": "makeChocolate(4, 1, 7)"}]}, {"difficulty": 215.0, "summary": "Given a list of integers, return a list where each integer is added to 1 and the result is multiplied by 10.", "section": "Functional-1", "solution": [], "url": "/prob/p103869", "title": "math1", "signature": "public List<Integer> math1(List<Integer> nums)", "examples": [{"output": "[20, 30, 40]", "input": "math1([1, 2, 3])"}, {"output": "[70, 90, 70, 90, 20]", "input": "math1([6, 8, 6, 8, 1])"}, {"output": "[110]", "input": "math1([10])"}]}, {"difficulty": 372.0, "summary": "Given a string, return recursively a \"cleaned\" string where adjacent chars that are the same have been reduced to a single char. So \"yyzzza\" yields \"yza\".", "section": "Recursion-1", "solution": ["public String stringClean(String str){\nif(str.length() < 2)\nreturn str;\nif(str.charAt(0) == str.charAt(1))\nreturn stringClean(str.substring(1));\nreturn str.charAt(0) + stringClean(str.substring(1));\n}", "/* Given a string, return recursively a \"cleaned\" string where adjacent chars \n * that are the same have been reduced to a single char. So \"yyzzza\" yields \n * \"yza\".\n */\npublic String stringClean(String str) {\n    if(str.length() <= 1)\n        return str;\n          \n    if(str.charAt(0) == str.charAt(1))\n        return stringClean(str.substring(1));\n                    \n    return str.charAt(0) + stringClean(str.substring(1));\n}\n"], "url": "/prob/p104029", "title": "stringClean", "signature": "public String stringClean(String str)", "examples": [{"output": "\"yza\"", "input": "stringClean(\"yyzzza\")"}, {"output": "\"abcd\"", "input": "stringClean(\"abbbcdd\")"}, {"output": "\"Helo\"", "input": "stringClean(\"Hello\")"}]}, {"difficulty": 118.0, "summary": "Given a string, return the string made of its first two chars, so the String \"Hello\" yields \"He\". If the string is shorter than length 2, return whatever there is, so \"X\" yields \"X\", and the empty string \"\" yields the empty string \"\". Note that str.length() returns the length of a string.", "section": "String-1", "solution": ["public String firstTwo(String str) {{\nreturn str.length() > 2 ? str.substring(0, 2) : str;\n}", "public String firstTwo(String str){\nif(str.length() >= 3)\nreturn str.substring(0, 2);\nreturn str;\n}", "/* Given a string, return the string made of its first two chars, so the \n * String \"Hello\" yields \"He\". If the string is shorter than length 2, return \n * whatever there is, so \"X\" yields \"X\", and the empty string \"\" yields the \n * empty string \"\".\n */\npublic String firstTwo(String str) {\n    if(str.length() < 2)\n        return str;\n          \n    return str.substring(0, 2);\n}\n"], "url": "/prob/p163411", "title": "firstTwo", "signature": "public String firstTwo(String str)", "examples": [{"output": "\"He\"", "input": "firstTwo(\"Hello\")"}, {"output": "\"ab\"", "input": "firstTwo(\"abcdefg\")"}, {"output": "\"ab\"", "input": "firstTwo(\"ab\")"}]}, {"difficulty": 303.0, "summary": "Given a string, count the number of words ending in 'y' or 'z' -- so the 'y' in \"heavy\" and the 'z' in \"fez\" count, but not the 'y' in \"yellow\" (not case sensitive). We'll say that a y or z is at the end of a word if there is not an alphabetic letter immediately following it. (Note: Character.isLetter(char) tests if a char is an alphabetic letter.)", "section": "String-3", "solution": ["public int countYZ(String str){\nint count = 0;\nint limit = str.length() - 1;\nchar ch;\nstr = str.toLowerCase();\nch = str.charAt(0);\nfor(int i = 1; i <= limit; i++)\n{\nif(ch == 'y' || ch == 'z')\n{\nch = str.charAt(i);\nif(!Character.isLetter(ch))\ncount++;\n}\nelse\nch = str.charAt(i);\n}\nif(ch == 'y' || ch == 'z')\ncount++;\nreturn count;\n}", "/* Given a string, count the number of words ending in 'y' or 'z' -- so the \n * 'y' in \"heavy\" and the 'z' in \"fez\" count, but not the 'y' in \"yellow\" \n * (not case sensitive). We'll say that a y or z is at the end of a word if \n * there is not an alphabetic letter immediately following it.\n */\npublic int countYZ(String str) {\n    if(str.length() == 0)\n        return 0;\n        \n    int count = 0;  \n            \n    for(int i = 0; i <= str.length() - 2; i++) {\n        if((Character.toLowerCase(str.charAt(i)) == 'y' || \n            Character.toLowerCase(str.charAt(i)) == 'z') &&\n            !Character.isLetter(str.charAt(i+1)))\n            count++;\n    }\n                                        \n    if(Character.toLowerCase(str.charAt(str.length() - 1)) == 'y' ||\n        Character.toLowerCase(str.charAt(str.length() - 1)) == 'z')\n        count++;\n                                                    \n    return count;\n}\n"], "url": "/prob/p199171", "title": "countYZ", "signature": "public int countYZ(String str)", "examples": [{"output": "2", "input": "countYZ(\"fez day\")"}, {"output": "2", "input": "countYZ(\"day fez\")"}, {"output": "2", "input": "countYZ(\"day fyyyz\")"}]}, {"difficulty": 136.0, "summary": "Given an int array length 2, return true if it contains a 2 or a 3.", "section": "Array-1", "solution": ["public boolean has23(int[] nums){\nif(nums[0] == 2 || nums[0] == 3)\nreturn true;\nreturn (nums[1] == 2 || nums[1] == 3);\n}", "/* Given an int array length 2, return true if it contains a 2 or a 3.\n */\npublic boolean has23(int[] nums) {\n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 2 || nums[i] == 3)\n            return true;\n    }\n                \n    return false;\n}\n"], "url": "/prob/p171022", "title": "has23", "signature": "public boolean has23(int[] nums)", "examples": [{"output": "true", "input": "has23([2, 5])"}, {"output": "true", "input": "has23([4, 3])"}, {"output": "false", "input": "has23([4, 5])"}]}, {"difficulty": 369.0, "summary": "Given a string, compute recursively (no loops) the number of \"11\" substrings in the string. The \"11\" substrings should not overlap.", "section": "Recursion-1", "solution": ["public int count11(String str){\nif(str.length() < 2)\nreturn 0;\nif(str.substring(0, 2).equals(\"11\"))\nreturn 1 + count11(str.substring(2));\nreturn count11(str.substring(1));\n}", "/* Given a string, compute recursively (no loops) the number of \"11\" \n * substrings in the string. The \"11\" substrings should not overlap.\n */\npublic int count11(String str) {\n    if(str.length() <= 1)\n        return 0;\n          \n    if(str.substring(0, 2).equals(\"11\"))\n        return 1 + count11(str.substring(2));\n                    \n    return count11(str.substring(1));\n}\n"], "url": "/prob/p167015", "title": "count11", "signature": "public int count11(String str)", "examples": [{"output": "2", "input": "count11(\"11abc11\")"}, {"output": "3", "input": "count11(\"abc11x11x11\")"}, {"output": "1", "input": "count11(\"111\")"}]}, {"difficulty": 206.0, "summary": "Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array. Note: the built-in Math.min(v1, v2) and Math.max(v1, v2) methods  return the smaller or larger of two values.", "section": "Array-2", "solution": ["public int bigDiff(int[] nums){\nint max = nums[0];\nint min = nums[0];\nfor(int i = 1; i < nums.length; i++)\n{\nif(nums[i] > max)\nmax = nums[i];\nelse if(nums[i] < min)\nmin = nums[i];\n}\nreturn (max-min);\n}", "/* Given an array length 1 or more of ints, return the difference between the \n * largest and smallest values in the array.\n */\npublic int bigDiff(int[] nums) {\n    int min = nums[0];\n    int max = nums[0];\n      \n    for(int i = 1; i < nums.length; i++) {\n        min = Math.min(min, nums[i]);\n        max = Math.max(max, nums[i]);\n    }\n                    \n    return max - min;\n}\n"], "url": "/prob/p196640", "title": "bigDiff", "signature": "public int bigDiff(int[] nums)", "examples": [{"output": "7", "input": "bigDiff([10, 3, 5, 6])"}, {"output": "8", "input": "bigDiff([7, 2, 10, 9])"}, {"output": "8", "input": "bigDiff([2, 10, 7, 2])"}]}, {"difficulty": 409.0, "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target with this additional constraint: If a value in the array is chosen to be in the group, the value immediately following it in the array must not be chosen. (No loops needed.)", "section": "Recursion-2", "solution": ["public boolean groupNoAdj(int start, int[] nums, int target){\nif(target == 0)\nreturn true;\nif(start >= nums.length)\nreturn false;\nif(groupNoAdj(start + 2, nums, target - nums[start]))\nreturn true;\nreturn groupNoAdj(start + 1, nums, target);\n}", "/* Given an array of ints, is it possible to choose a group of some of the \n * ints, such that the group sums to the given target with this additional \n * constraint: If a value in the array is chosen to be in the group, the \n * value immediately following it in the array must not be chosen. (No loops \n * needed.)\n */\npublic boolean groupNoAdj(int start, int[] nums, int target) {\n    if(start >= nums.length)\n        return target == 0;\n          \n    if(groupNoAdj(start+2, nums, target - nums[start]))\n        return true;\n                    \n    if(groupNoAdj(start+1, nums, target))\n        return true;\n                              \n    return false;\n}\n"], "url": "/prob/p169605", "title": "groupNoAdj", "signature": "public boolean groupNoAdj(int start, int[] nums, int target)", "examples": [{"output": "true", "input": "groupNoAdj(0, [2, 5, 10, 4], 12)"}, {"output": "false", "input": "groupNoAdj(0, [2, 5, 10, 4], 14)"}, {"output": "false", "input": "groupNoAdj(0, [2, 5, 10, 4], 7)"}]}, {"difficulty": 251.0, "summary": "Look for patterns like \"zip\" and \"zap\" in the string -- length-3, starting with 'z' and ending with 'p'. Return a string where for all such words, the middle letter is gone, so \"zipXzap\" yields \"zpXzp\".", "section": "String-2", "solution": ["public String zipZap(String str){\nint len = str.length();\nint lim = len - 2;\nint i = 0;\nchar ch;\nStringBuilder stbuild = new StringBuilder(len);\nwhile(i < len)\n{\nch = str.charAt(i);\nif(ch == 'z' && i < lim && str.charAt(i+2) == 'p')\n{\nstbuild.append(\"zp\");\ni += 3;\n}\nelse\n{\nstbuild.append(ch);\ni++;\n}\n}\nreturn stbuild.toString();\n}", "/* Look for patterns like \"zip\" and \"zap\" in the string -- length-3, starting \n * with 'z' and ending with 'p'. Return a string where for all such words, \n * the middle letter is gone, so \"zipXzap\" yields \"zpXzp\".\n */\npublic String zipZap(String str) {\n    char[] arr = new char[str.length()];\n    int count = 0;\n      \n    int i = 0;\n    while(i < str.length()) {\n        if(i < str.length() - 2 && str.charAt(i) == 'z' && \n            str.charAt(i + 2) == 'p') {\n            arr[count] = 'z';\n            count++;\n            arr[count] = 'p';\n            count++;\n            i += 3;\n        } else {\n            arr[count] = str.charAt(i);\n            count++;\n            i++;\n        }\n    }\n                                                                          \n    return new String(arr, 0, count);  \n}\n"], "url": "/prob/p180759", "title": "zipZap", "signature": "public String zipZap(String str)", "examples": [{"output": "\"zpXzp\"", "input": "zipZap(\"zipXzap\")"}, {"output": "\"zpzp\"", "input": "zipZap(\"zopzop\")"}, {"output": "\"zzzpzp\"", "input": "zipZap(\"zzzopzop\")"}]}, {"difficulty": 236.0, "summary": "Given two strings, ", "section": "String-2", "solution": ["public String repeatSeparator(String word, String sep, int count){\nif(count == 0)\nreturn \"\";\nStringBuilder stbuild = new StringBuilder(count*word.length()+sep.length()*(count-1));\nfor(int i = 1; i < count; i++)\n{\nstbuild.append(word);\nstbuild.append(sep);\n}\nstbuild.append(word);\nreturn stbuild.toString();\n}", "/* Given two strings, word and a separator, return a big string made of count \n * occurences of the word, separated by the separator string.\n */\npublic String repeatSeparator(String word, String sep, int count) {\n    if(count == 0)\n        return \"\";\n          \n    StringBuffer result = new StringBuffer();\n              \n    for(int i = 0; i < count - 1; i++) {\n        result.append(word);\n        result.append(sep);\n    }\n                            \n    return result.append(word).toString();\n}\n"], "url": "/prob/p109637", "title": "repeatSeparator", "signature": "public String repeatSeparator(String word, String sep, int count)", "examples": [{"output": "\"WordXWordXWord\"", "input": "repeatSeparator(\"Word\", \"X\", 3)"}, {"output": "\"ThisAndThis\"", "input": "repeatSeparator(\"This\", \"And\", 2)"}, {"output": "\"This\"", "input": "repeatSeparator(\"This\", \"And\", 1)"}]}, {"difficulty": 227.0, "summary": "Given 2 strings, a and b, return the number of the positions where they contain the same length 2 substring. So \"xxcaazz\" and \"xxbaaz\" yields 3, since the \"xx\", \"aa\", and \"az\" substrings appear in the same place in both strings.", "section": "Warmup-2", "solution": ["public int stringMatch(String a, String b) {\n  // Figure which string is shorter.\n  int len = Math.min(a.length(), b.length());\n  int count = 0;\n  \n  // Look at both substrings starting at i\n  for (int i=0; i<len-1; i++) {\n    String aSub = a.substring(i, i+2);\n    String bSub = b.substring(i, i+2);\n    if (aSub.equals(bSub)) {  // Use .equals() with strings\n      count++;\n    }\n  }\n\n  return count;\n}", "public int stringMatch( String a, String b ){\n{\nint len = Math.min( a.length(), b.length() );\nint count = 0;\n\nfor ( int i = 0; i < len - 1; i++ )\n{\nif ( a.charAt( i ) == b.charAt( i ) && a.charAt( i + 1 ) == b.charAt( i + 1 ) )\n{\ncount++;\n}\n}\n\nreturn count;\n}", "public int stringMatch(String a, String b){\nint len = a.length() <= b.length() ? a.length() : b.length();\nlen--;\nint count = 0;\nfor(int i = 0; i < len; i++)\n{\nif(a.substring(i, i+2).equals(b.substring(i, i+2)))\ncount++;\n}\nreturn count;\n}", "/* Given 2 strings, a and b, return the number of the positions where they \n * contain the same length 2 substring. So \"xxcaazz\" and \"xxbaaz\" yields 3, \n * since the \"xx\", \"aa\", and \"az\" substrings appear in the same place in both \n * strings.\n */\npublic int stringMatch(String a, String b) {\n    int min = Math.min(a.length(), b.length());\n    int count = 0;\n      \n    for(int i = 0; i < min - 1; i++) {\n        if(a.substring(i, i + 2).equals(b.substring(i, i + 2)))\n            count++;\n    }\n                      \n    return count;\n}\n"], "url": "/prob/p198640", "title": "stringMatch", "signature": "public int stringMatch(String a, String b)", "examples": [{"output": "3", "input": "stringMatch(\"xxcaazz\", \"xxbaaz\")"}, {"output": "2", "input": "stringMatch(\"abc\", \"abc\")"}, {"output": "0", "input": "stringMatch(\"abc\", \"axc\")"}]}, {"difficulty": 218.0, "summary": "Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "section": "Logic-2", "solution": ["public int blackjack(int a, int b){\nif(a > 21)\n{\nif(b > 21)\nreturn 0;\nreturn b;\n}\nif(a < b && b <= 21)\nreturn b;\nreturn a;\n}", "/* Given 2 int values greater than 0, return whichever value is nearest to 21 \n * without going over. Return 0 if they both go over.\n */\npublic int blackjack(int a, int b) {\n    if(a > 21 && b > 21)\n        return 0;\n          \n    if(a > 21)\n        return b;\n                    \n    if(b > 21)\n        return a;\n                              \n    return a > b ? a : b;\n}\n"], "url": "/prob/p117019", "title": "blackjack", "signature": "public int blackjack(int a, int b)", "examples": [{"output": "21", "input": "blackjack(19, 21)"}, {"output": "21", "input": "blackjack(21, 19)"}, {"output": "19", "input": "blackjack(19, 22)"}]}, {"difficulty": 381.0, "summary": "Given a string, return true if it is a nesting of zero or more pairs of parenthesis, like \"(())\" or \"((()))\". Suggestion: check the first and last chars, and then recur on what's inside them.", "section": "Recursion-1", "solution": ["public boolean nestParen(String str){\nint len = str.length();\nif(len == 0)\nreturn true;\nif(str.charAt(0) == '(' && str.charAt(len - 1) == ')')\nreturn nestParen(str.substring(1, len - 1));\nreturn false;\n}", "/* Given a string, return true if it is a nesting of zero or more pairs of \n * parenthesis, like \"(())\" or \"((()))\".\n */\npublic boolean nestParen(String str) {\n    if(str.length() == 0)\n        return true;\n          \n    if(str.charAt(0) == '(' && str.charAt(str.length()-1) == ')')\n        return nestParen(str.substring(1, str.length()-1));\n                    \n    return false;\n}\n"], "url": "/prob/p183174", "title": "nestParen", "signature": "public boolean nestParen(String str)", "examples": [{"output": "true", "input": "nestParen(\"(())\")"}, {"output": "true", "input": "nestParen(\"((()))\")"}, {"output": "false", "input": "nestParen(\"(((x))\")"}]}, {"difficulty": 112.0, "summary": "Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new string where the word is in the middle of the out string, e.g. \"<<word>>\". Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.", "section": "String-1", "solution": ["public String makeOutWord(String out, String word) {{\nreturn out.substring(0, 2) + word + out.substring(2, 4);\n}", ["public String makeOutWord(String out, String word){", "", "", "// Given a string, return a new string made of 3 copies of the last 2 chars of the original string.", "// The string length will be at least 2."], "/* Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new \n * string where the word is in the middle of the out string, e.g. \"<<word>>\". \n * Note: use str.substring(i, j) to extract the String starting at index i and \n * going up to but not including index j.\n */\npublic String makeOutWord(String out, String word) {\n    return out.substring(0, 2) + word + out.substring(2);\n}\n"], "url": "/prob/p184030", "title": "makeOutWord", "signature": "public String makeOutWord(String out, String word)", "examples": [{"output": "\"<<Yay>>\"", "input": "makeOutWord(\"<<>>\", \"Yay\")"}, {"output": "\"<<WooHoo>>\"", "input": "makeOutWord(\"<<>>\", \"WooHoo\")"}, {"output": "\"[[word]]\"", "input": "makeOutWord(\"[[]]\", \"word\")"}]}, {"difficulty": 203.0, "summary": "Given a string and a non-negative int n, return a larger string that is n copies of the original string.", "section": "Warmup-2", "solution": ["public String stringTimes(String str, int n) {\n  String result = \"\";\n  for (int i=0; i<n; i++) {\n    result = result + str;  // could use += here\n  }\n  return result;\n}", "public String stringTimes( String str, int n ){\n{\nString s = \"\";\n\nfor ( int i = 0; i < n; i++ )\n{\ns = s + str;\n}\nreturn s;\n}", "public String stringTimes(String str, int n){\nStringBuilder stbuild = new StringBuilder(str.length()*n);\nfor(int i = 1; i <= n; i++)\nstbuild.append(str);\nreturn stbuild.toString();\n}", "/* Given a string and a non-negative int n, return a larger string that is n \n * copies of the original string.\n */\npublic String stringTimes(String str, int n) {\n    char[] nCopy = new char[n * str.length()];\n    int index = 0;\n    \n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < str.length(); j++) {\n            nCopy[index] = str.charAt(j);\n            index++;\n        }\n    }\n                                \n    return new String(nCopy);\n}\n"], "url": "/prob/p142270", "title": "stringTimes", "signature": "public String stringTimes(String str, int n)", "examples": [{"output": "\"HiHi\"", "input": "stringTimes(\"Hi\", 2)"}, {"output": "\"HiHiHi\"", "input": "stringTimes(\"Hi\", 3)"}, {"output": "\"Hi\"", "input": "stringTimes(\"Hi\", 1)"}]}, {"difficulty": 203.0, "summary": "Modify and return the given map as follows: if the key \"a\" has a value, set the key \"b\" to have that value, and set the key \"a\" to have the value \"\". Basically \"b\" is a bully, taking the value and replacing it with the empty string.", "section": "Map-1", "solution": [], "url": "/prob/p197888", "title": "mapBully", "signature": "public Map<String, String> mapBully(Map<String, String> map)", "examples": [{"output": "{\"a\": \"\", \"b\": \"candy\"}", "input": "mapBully({\"a\": \"candy\", \"b\": \"dirt\"})"}, {"output": "{\"a\": \"\", \"b\": \"candy\"}", "input": "mapBully({\"a\": \"candy\"})"}, {"output": "{\"a\": \"\", \"b\": \"candy\", \"c\": \"meh\"}", "input": "mapBully({\"a\": \"candy\", \"b\": \"carrot\", \"c\": \"meh\"})"}]}, {"difficulty": 227.0, "summary": "Given two strings, ", "section": "String-2", "solution": ["public String mixString(String a, String b){\nint aLen = a.length();\nint bLen = b.length();\nint i = 0;\nStringBuilder stbuild = new StringBuilder(aLen+bLen);\nfor(; i < aLen && i < bLen; i++)\n{\nstbuild.append(a.charAt(i));\nstbuild.append(b.charAt(i));\n}\n// only 1 for loop will actually run\nfor(; i < aLen; i++)\nstbuild.append(a.charAt(i));\nfor(; i < bLen; i++)\nstbuild.append(b.charAt(i));\nreturn stbuild.toString();\n}", "/* Given two strings, A and B, create a bigger string made of the first char \n * of A, the first char of B, the second char of A, the second char of B, \n * and so on. Any leftover chars go at the end of the result.\n */\npublic String mixString(String a, String b) {\n    char[] arr;\n    String end;\n    int count = 0;\n        \n    if(a.length() < b.length()) {\n        arr = new char[2 * a.length()];\n        end = b.substring(a.length());\n    } else {\n        arr = new char[2 * b.length()];\n        end = a.substring(b.length());\n    }\n                                \n    for(int i = 0; i < arr.length / 2; i++) {\n        arr[count] = a.charAt(i);\n        count++;\n        arr[count] = b.charAt(i);\n        count++;\n    }\n                                                      \n    return new String(arr) + end;\n}\n"], "url": "/prob/p125185", "title": "mixString", "signature": "public String mixString(String a, String b)", "examples": [{"output": "\"axbycz\"", "input": "mixString(\"abc\", \"xyz\")"}, {"output": "\"HTihere\"", "input": "mixString(\"Hi\", \"There\")"}, {"output": "\"xTxhxexre\"", "input": "mixString(\"xxxx\", \"There\")"}]}, {"difficulty": 175.0, "summary": "We'll say that a 1 immediately followed by a 3 in an array is an \"unlucky\" 1. Return true if the given array contains an unlucky 1 in the first 2 or last 2 positions in the array.", "section": "Array-1", "solution": ["public boolean unlucky1(int[] nums){\nint lastP = nums.length-1;\nif(lastP  >= 2)\n{\nif((nums[0] == 1 && nums[1] == 3) || (nums[1] == 1 && nums[2] == 3))\nreturn true;\nreturn (nums[lastP-1] == 1 && nums[lastP] == 3);\n}\nif(lastP  == 1)\nreturn ((nums[0] == 1 && nums[1] == 3) || (nums[1] == 1 && nums[2] == 3));\nreturn false;\n}", "/* We'll say that a 1 immediately followed by a 3 in an array is an \"unlucky\" \n * 1. Return true if the given array contains an unlucky 1 in the first 2 or \n * last 2 positions in the array.\n */\npublic boolean unlucky1(int[] nums) {\n    if(nums.length >= 2 && \n        (nums[0] == 1 && nums[1] == 3 || nums[nums.length - 2] == 1 && \n        nums[nums.length - 1] == 3))\n        return true;\n                       \n    if(nums.length >= 3 && nums[1] == 1 && nums[2] == 3)\n        return true;\n                                 \n    return false;\n}\n"], "url": "/prob/p197308", "title": "unlucky1", "signature": "public boolean unlucky1(int[] nums)", "examples": [{"output": "true", "input": "unlucky1([1, 3, 4, 5])"}, {"output": "true", "input": "unlucky1([2, 1, 3, 4, 5])"}, {"output": "false", "input": "unlucky1([1, 1, 1])"}]}, {"difficulty": 160.0, "summary": "Given a string, return true if \"bad\" appears starting at index 0 or 1 in the string, such as with \"badxxx\" or \"xbadxx\" but not \"xxbadxx\". The string may be any length, including 0. Note: use .equals() to compare 2 strings.", "section": "String-1", "solution": ["public boolean hasBad(String str){\nint len = str.length();\nif(len == 3 && str.equals(\"bad\"))\nreturn true;\nelse if(len >= 4)\n{\nif(str.substring(0, 3).equals(\"bad\"))\nreturn true;\nreturn str.substring(1, 4).equals(\"bad\");\n}\nelse\nreturn false;\n}", "/* Given a string, return true if \"bad\" appears starting at index 0 or 1 in \n * the string, such as with \"badxxx\" or \"xbadxx\" but not \"xxbadxx\". The \n * string may be any length, including 0. Note: use .equals() to compare 2 \n * strings.\n */\npublic boolean hasBad(String str) {\n    if(str.length() == 3)\n        return str.substring(0, 3).equals(\"bad\");\n          \n    if(str.length() >= 4)\n        return str.substring(0, 3).equals(\"bad\") || \n            str.substring(1, 4).equals(\"bad\");\n                    \n    return false;\n}\n"], "url": "/prob/p139075", "title": "hasBad", "signature": "public boolean hasBad(String str)", "examples": [{"output": "true", "input": "hasBad(\"badxx\")"}, {"output": "true", "input": "hasBad(\"xbadxx\")"}, {"output": "false", "input": "hasBad(\"xxbadxx\")"}]}, {"difficulty": 242.0, "summary": "Given a string, does \"xyz\" appear in the middle of the string? To define middle, we'll say that the number of chars to the left and right of the \"xyz\" must differ by at most one. This problem is harder than it looks.", "section": "String-2", "solution": ["public boolean xyzMiddle(String str){\nint len = str.length();\nint mid;\nif(len < 3)\nreturn false;\nmid = len/2;\nif(len%2 == 0)\n{\nif(str.charAt(mid) == 'y')\nreturn(str.charAt(mid-1) == 'x' && str.charAt(mid+1) == 'z');\nif(str.charAt(mid-1) == 'y')\nreturn(str.charAt(mid-2) == 'x' && str.charAt(mid) == 'z');\nreturn false;\n}\n// len%2 != 0\nelse if(str.charAt(mid) == 'y')\nreturn(str.charAt(mid-1) == 'x' && str.charAt(mid+1) == 'z');\nreturn false;\n}", "/* Given a string, does \"xyz\" appear in the middle of the string? To define \n * middle, we'll say that the number of chars to the left and right of the \n * \"xyz\" must differ by at most one. This problem is harder than it looks.\n */\npublic boolean xyzMiddle(String str) {\n    if(str.length() < 3)\n        return false;\n          \n    int start1 = str.length() / 2 - 2;\n    int start2 = str.length() / 2 - 1;\n                  \n    if(str.length() % 2 == 0) {\n        return str.substring(start1, start1 + 3).equals(\"xyz\") ||\n            str.substring(start2, start2 + 3).equals(\"xyz\");\n    }\n                                  \n    return str.substring(start2, start2 + 3).equals(\"xyz\");\n}\n"], "url": "/prob/p159772", "title": "xyzMiddle", "signature": "public boolean xyzMiddle(String str)", "examples": [{"output": "true", "input": "xyzMiddle(\"AAxyzBB\")"}, {"output": "true", "input": "xyzMiddle(\"AxyzBB\")"}, {"output": "false", "input": "xyzMiddle(\"AxyzBBB\")"}]}, {"difficulty": 324.0, "summary": "Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).", "section": "Recursion-1", "solution": ["public int count8(int n){\nif(n == 0)\nreturn 0;\nif(n % 10 == 8)\n{\nif(n / 10 % 10 == 8)\nreturn 2+count8(n/10);\nreturn 1+count8(n/10);\n}\nreturn count8(n/10);\n}", "/* Given a non-negative int n, compute recursively (no loops) the count of \n * the occurrences of 8 as a digit, except that an 8 with another 8 \n * immediately to its left counts double, so 8818 yields 4.\n */\npublic int count8(int n) {\n    if(n == 0)\n        return 0;\n          \n    if(n % 10 == 8) {\n        if((n / 10) % 10 == 8)\n            return 2 + count8(n/10);\n                            \n        return 1 + count8(n/10);\n    }\n                                    \n    return count8(n/10);\n}\n"], "url": "/prob/p192383", "title": "count8", "signature": "public int count8(int n)", "examples": [{"output": "1", "input": "count8(8)"}, {"output": "2", "input": "count8(818)"}, {"output": "4", "input": "count8(8818)"}]}, {"difficulty": 324.0, "summary": "Given a string, look for a mirror image (backwards) string at both the beginning and end of the given string. In other words, zero or more characters at the very begining of the given string, and at the very end of the string in reverse order (possibly overlapping). For example, the string \"abXYZba\" has the mirror end \"ab\".", "section": "String-3", "solution": ["public String mirrorEnds(String string){\nint len = string.length();\nint p = len - 1;\nfor(int i = 0; i < len; i++, p--)\n{\nif(string.charAt(i) != string.charAt(p))\nreturn string.substring(0, i);\n}\nreturn string;\n}", "/* Given a string, look for a mirror image (backwards) string at both the \n * beginning and end of the given string. In other words, zero or more \n * characters at the very begining of the given string, and at the very end \n * of the string in reverse order (possibly overlapping). For example, the \n * string \"abXYZba\" has the mirror end \"ab\".\n */\npublic String mirrorEnds(String string) {\n    StringBuilder result = new StringBuilder();\n    \n    for(int i = 0; i < string.length(); i++) {\n        if(string.charAt(i) == string.charAt(string.length() - i - 1))\n            result.append(string.charAt(i));\n        else\n            break;\n    }\n                              \n    return result.toString();\n}\n"], "url": "/prob/p139411", "title": "mirrorEnds", "signature": "public String mirrorEnds(String string)", "examples": [{"output": "\"ab\"", "input": "mirrorEnds(\"abXYZba\")"}, {"output": "\"a\"", "input": "mirrorEnds(\"abca\")"}, {"output": "\"aba\"", "input": "mirrorEnds(\"aba\")"}]}, {"difficulty": 248.0, "summary": "We have data for two users, A and B, each with a String name and an int id. The goal is to order the users such as for sorting. Return -1 if A comes before B, 1 if A comes after B, and 0 if they are the same. Order first by the string names, and then by the id numbers if the names are the same. Note: with Strings str1.compareTo(str2) returns an int value which is negative/0/positive to indicate how str1 is ordered to str2 (the value is not limited to -1/0/1). (On the AP, there would be two User objects, but here the code simply takes the two strings and two ints directly. The code logic is the same.)", "section": "AP-1", "solution": ["/* We have data for two users, A and B, each with a String name and an int id. \n * The goal is to order the users such as for sorting. Return -1 if A comes \n * before B, 1 if A comes after B, and 0 if they are the same. Order first by \n * the string names, and then by the id numbers if the names are the same.\n */\npublic int userCompare(String aName, int aId, String bName, int bId) {\n    if(aName.compareTo(bName) < 0) {\n        return -1;\n    } else if(aName.compareTo(bName) > 0) {\n        return 1;\n    } else if(aId < bId) {\n        return -1;\n    } else if(aId > bId) {\n        return 1;\n    }\n                            \n    return 0;\n}\n"], "url": "/prob/p143482", "title": "userCompare", "signature": "public int userCompare(String aName, int aId, String bName, int bId)", "examples": [{"output": "-1", "input": "userCompare(\"bb\", 1, \"zz\", 2)"}, {"output": "1", "input": "userCompare(\"bb\", 1, \"aa\", 2)"}, {"output": "0", "input": "userCompare(\"bb\", 1, \"bb\", 1)"}]}, {"difficulty": 342.0, "summary": "Given a string, compute recursively a new string where all the 'x' chars have been removed.", "section": "Recursion-1", "solution": ["public String noX(String str){\nchar ch;\nif(str.length() == 0)\nreturn str;\nch = str.charAt(0);\nif(ch == 'x')\nreturn noX(str.substring(1));\nreturn ch + noX(str.substring(1));\n}", "/* Given a string, compute recursively a new string where all the 'x' chars \n * have been removed.\n */\npublic String noX(String str) {\n    if(str.length() == 0)\n        return str;\n          \n    if(str.charAt(0) == 'x')\n        return noX(str.substring(1));\n                    \n    return str.charAt(0) + noX(str.substring(1));\n}\n"], "url": "/prob/p118230", "title": "noX", "signature": "public String noX(String str)", "examples": [{"output": "\"ab\"", "input": "noX(\"xaxb\")"}, {"output": "\"abc\"", "input": "noX(\"abc\")"}, {"output": "\"\"", "input": "noX(\"xx\")"}]}, {"difficulty": 321.0, "summary": "Given n>=0, create an array with the pattern {1, \u00a0\u00a0 1, 2, \u00a0\u00a0 1, 2, 3, \u00a0\u00a0... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n*(n + 1)/2.", "section": "Array-3", "solution": ["public int[] seriesUp(int n){\nint[] arr = new int[n*(n+1)/2];\nint p = 0;\nfor(int i = 1; i <= n; i++)\n{\nfor(int j = 1; j <= i; j++, p++)\narr[p] = j;\n}\nreturn arr;\n}", "/* Given n>=0, create an array with the pattern \n * {1,    1, 2,    1, 2, 3,   ... 1, 2, 3 .. n} (spaces added to show the \n * grouping).\n */\npublic int[] seriesUp(int n) {\n    int[] arr = new int[n*(n+1)/2];\n    \n    int index = 0;\n        \n    for(int i = 1; i <= n; i++) {\n        for(int j = 0; j < i; j++) {\n            arr[index + j] = j + 1;\n        }\n        index += i;\n    }\n                                \n    return arr;\n}\n"], "url": "/prob/p104090", "title": "seriesUp", "signature": "public int[] seriesUp(int n)", "examples": [{"output": "[1, 1, 2, 1, 2, 3]", "input": "seriesUp(3)"}, {"output": "[1, 1, 2, 1, 2, 3, 1, 2, 3, 4]", "input": "seriesUp(4)"}, {"output": "[1, 1, 2]", "input": "seriesUp(2)"}]}, {"difficulty": 318.0, "summary": "Given a string, return the sum of the digits 0-9 that appear in the string, ignoring all other characters. Return 0 if there are no digits in the string. (Note: Character.isDigit(char) tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts a string to an int.)", "section": "String-3", "solution": ["public int sumDigits(String str){\nint sum = 0;\nint lim = str.length();\nchar ch;\nfor(int i = 0; i < lim; i++)\n{\nch = str.charAt(i);\nif(Character.isDigit(ch)) // or simply (ch >= '0' && ch <= '9')\nsum += (ch - '0');\n}\nreturn sum;\n}", "/* Given a string, return the sum of the digits 0-9 that appear in the \n * string, ignoring all other characters. Return 0 if there are no digits in \n * the string.\n */\npublic int sumDigits(String str) {\n    int sum = 0;\n    \n    for(int i = 0; i < str.length(); i++) {\n        if(Character.isDigit(str.charAt(i)))\n            sum = sum + str.charAt(i) - '0';\n    }\n                    \n    return sum;\n}\n"], "url": "/prob/p197890", "title": "sumDigits", "signature": "public int sumDigits(String str)", "examples": [{"output": "6", "input": "sumDigits(\"aa1bc2d3\")"}, {"output": "8", "input": "sumDigits(\"aa11b33\")"}, {"output": "0", "input": "sumDigits(\"Chocolate\")"}]}, {"difficulty": 115.0, "summary": "Given an array of ints length 3, return the sum of all the elements.", "section": "Array-1", "solution": [["public int sum3(int[] nums){", "", "", "// Given an array of ints length 3, return an array with the elements", "// \"rotated left\" so {1, 2, 3} yields {2, 3, 1}."], "/* Given an array of ints length 3, return the sum of all the elements.\n */\npublic int sum3(int[] nums) {\n    return nums[0] + nums[1] + nums[2];\n}\n"], "url": "/prob/p175763", "title": "sum3", "signature": "public int sum3(int[] nums)", "examples": [{"output": "6", "input": "sum3([1, 2, 3])"}, {"output": "18", "input": "sum3([5, 11, 2])"}, {"output": "7", "input": "sum3([7, 0, 0])"}]}, {"difficulty": 221.0, "summary": "Return true if the given string contains a \"bob\" string, but where the middle 'o' char can be any char.", "section": "String-2", "solution": ["public boolean bobThere( String str ){\n{\nfor ( int i = 0; i < str.length() - 2; i++ )\n{\nif ( str.charAt( i ) == 'b' && str.charAt( i + 2 ) == 'b' )\n{\nreturn true;\n}\n}\n\nreturn false;\n}", "public boolean bobThere(String str){\nint len = str.length() - 2;\nfor(int i = 0; i < len; i++)\n{\nif(str.charAt(i) == 'b' && str.charAt(i+2) == 'b')\nreturn true;\n}\nreturn false;\n}", "/* Return true if the given string contains a \"bob\" string, but where the \n * middle 'o' char can be any char.\n */\npublic boolean bobThere(String str) {\n    for(int i = 0; i < str.length() - 2; i++) {\n        if(str.charAt(i) == 'b' && str.charAt(i + 2) == 'b')\n            return true;\n    }\n                \n    return false;\n}\n"], "url": "/prob/p175762", "title": "bobThere", "signature": "public boolean bobThere(String str)", "examples": [{"output": "true", "input": "bobThere(\"abcbob\")"}, {"output": "true", "input": "bobThere(\"b9b\")"}, {"output": "false", "input": "bobThere(\"bac\")"}]}, {"difficulty": 223.0, "summary": "Given a list of non-negative integers, return a list of those numbers multiplied by 2, omitting any of the resulting numbers that end in 2.", "section": "Functional-2", "solution": [], "url": "/prob/p148198", "title": "two2", "signature": "public List<Integer> two2(List<Integer> nums)", "examples": [{"output": "[4, 6]", "input": "two2([1, 2, 3])"}, {"output": "[4]", "input": "two2([2, 6, 11])"}, {"output": "[0]", "input": "two2([0])"}]}, {"difficulty": 312.0, "summary": "We'll say that a lowercase 'g' in a string is \"happy\" if there is another 'g' immediately to its left or right. Return true if all the g's in the given string are happy.", "section": "String-3", "solution": ["public boolean gHappy(String str){\nint check = 0;\nint limit = str.length();\nfor(int i = 0; i < limit; i++)\n{\nif(str.charAt(i) == 'g')\n{\ncheck = 0;\nif(i > 0)\n{\nif(str.charAt(i-1) != 'g')\ncheck++;\n}\nelse\ncheck++;\nif(i < limit-1)\n{\nif(str.charAt(i+1) != 'g')\ncheck++;\n}\nelse\ncheck++;\nif(check == 2)\nreturn false;\n}\n}\nreturn true;\n}", "/* We'll say that a lowercase 'g' in a string is \"happy\" if there is another \n * 'g' immediately to its left or right. Return true if all the g's in the \n * given string are happy.\n */\npublic boolean gHappy(String str) {\n    if(str.length() == 1 && str.charAt(0) == 'g')\n        return false;\n          \n    if(str.length() >= 2 &&\n        (str.charAt(0) == 'g' && str.charAt(1) != 'g' ||\n        str.charAt(str.length()-1) == 'g' && \n        str.charAt(str.length()-2) != 'g'))\n        return false;\n                          \n    for(int i = 1; i <= str.length() - 2; i++) {\n        if(str.charAt(i) == 'g' && str.charAt(i-1) != 'g' && \n            str.charAt(i+1) != 'g')\n            return false;\n    }\n                                          \n    return true;\n}\n\n"], "url": "/prob/p198664", "title": "gHappy", "signature": "public boolean gHappy(String str)", "examples": [{"output": "true", "input": "gHappy(\"xxggxx\")"}, {"output": "false", "input": "gHappy(\"xxgxx\")"}, {"output": "false", "input": "gHappy(\"xxggyygxx\")"}]}, {"difficulty": 327.0, "summary": "Given a string, return the length of the largest \"block\" in the string. A block is a run of adjacent chars that are the same.", "section": "String-3", "solution": ["public int maxBlock(String str){\nint stLen = str.length();\nint maxBlock = 0;\nint block = 1;\nchar ch;\nchar current;\nif(stLen == 0)\nreturn 0;\nch = str.charAt(0);\nfor(int i = 1; i < stLen; i++)\n{\ncurrent = str.charAt(i);\nif(current == ch)\nblock++;\nelse\n{\nif(block > maxBlock)\nmaxBlock = block;\nblock = 1;\nch = current;\n}\n}\nif(block > maxBlock)\nmaxBlock = block;\nreturn maxBlock;\n}", "/* Given a string, return the length of the largest \"block\" in the string. \n * A block is a run of adjacent chars that are the same.\n */\npublic int maxBlock(String str) {\n    if(str.length() == 0)\n        return 0;\n          \n    int largest = 0;\n    int current = 1;\n                \n    for(int i = 1; i < str.length(); i++) {\n        if(str.charAt(i) != str.charAt(i-1)) {\n            if(current > largest)\n                largest = current;\n            current = 1;\n        } else {\n            current++;\n        }\n    }\n                                                            \n    return Math.max(largest, current);\n}\n"], "url": "/prob/p179479", "title": "maxBlock", "signature": "public int maxBlock(String str)", "examples": [{"output": "2", "input": "maxBlock(\"hoopla\")"}, {"output": "3", "input": "maxBlock(\"abbCCCddBBBxx\")"}, {"output": "0", "input": "maxBlock(\"\")"}]}, {"difficulty": 133.0, "summary": "Given a string, return a new string where the first and last chars have been exchanged.", "section": "Warmup-1", "solution": ["public String frontBack(String str) {\n  if (str.length() <= 1) return str;\n  \n  String mid = str.substring(1, str.length()-1);\n  \n  // last + mid + first\n  return str.charAt(str.length()-1) + mid + str.charAt(0);\n}", "public String frontBack( String str ){\n{\nString s = str;\nint len = str.length();\n\nif ( len > 1 )\n{\ns = str.substring( len - 1, len ) + str.substring( 1, len - 1 ) + str.substring( 0, 1 );\n}\n\nreturn s;\n}", "public String frontBack(String str){\nint len = str.length();\nif(len >= 2)\n{\nlen--;\nreturn (str.charAt(len) + str.substring(1, len) + str.charAt(0));\n}\nelse\nreturn str;\n}", "/* Given a string, return a new string where the first and last chars have \n * been exchanged.\n */\npublic String frontBack(String str) {\n    if(str.length() <= 1)\n        return str;\n        \n    char first = str.charAt(0);\n    char last = str.charAt(str.length() - 1);\n                 \n    return last + str.substring(1, str.length()-1) + first;\n}\n"], "url": "/prob/p123384", "title": "frontBack", "signature": "public String frontBack(String str)", "examples": [{"output": "\"eodc\"", "input": "frontBack(\"code\")"}, {"output": "\"a\"", "input": "frontBack(\"a\")"}, {"output": "\"ba\"", "input": "frontBack(\"ab\")"}]}, {"difficulty": 103.0, "summary": "The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.", "section": "Warmup-1", "solution": ["public boolean sleepIn(boolean weekday, boolean vacation) {\n  if (!weekday || vacation) {\n    return true;\n  }\n  \n  return false;\n  \n  // Solution notes: better to write \"vacation\" than \"vacation == true\"\n  // though they mean exactly the same thing.\n  // Likewise \"!weekday\" is better than \"weekday == false\".\n  // This all can be shortened to: return (!weekday || vacation);\n  // Here we just put the return-false last, or could use an if/else.\n}", "public boolean sleepIn( boolean weekday, boolean vacation ){\n{\nreturn !weekday || vacation;\n}", ["public boolean sleepIn(boolean weekday, boolean vacation){", "", "", "// We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling.", "// We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble."], "/* The parameter weekday is true if it is a weekday, and the parameter \n * vacation is true if we are on vacation. We sleep in if it is not a weekday \n * or we're on vacation. Return true if we sleep in.\n */\npublic boolean sleepIn(boolean weekday, boolean vacation) {\n    return !weekday || vacation;\n}\n"], "url": "/prob/p187868", "title": "sleepIn", "signature": "public boolean sleepIn(boolean weekday, boolean vacation)", "examples": [{"output": "true", "input": "sleepIn(false, false)"}, {"output": "false", "input": "sleepIn(true, false)"}, {"output": "true", "input": "sleepIn(false, true)"}]}, {"difficulty": 206.0, "summary": "Modify and return the given map as follows: if the key \"a\" has a value, set the key \"b\" to have that same value. In all cases remove the key \"c\", leaving the rest of the map unchanged.", "section": "Map-1", "solution": [], "url": "/prob/p148813", "title": "mapShare", "signature": "public Map<String, String> mapShare(Map<String, String> map)", "examples": [{"output": "{\"a\": \"aaa\", \"b\": \"aaa\"}", "input": "mapShare({\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"ccc\"})"}, {"output": "{\"b\": \"xyz\"}", "input": "mapShare({\"b\": \"xyz\", \"c\": \"ccc\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"aaa\", \"d\": \"hi\"}", "input": "mapShare({\"a\": \"aaa\", \"c\": \"meh\", \"d\": \"hi\"})"}]}, {"difficulty": 260.0, "summary": "Return true if the group of N numbers at the start and end of the array are the same. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n=0 and n=2, and false for n=1 and n=3. You may assume that n is in the range 0..nums.length inclusive.", "section": "Array-2", "solution": ["public boolean sameEnds(int[] nums, int len){\nint start = 0;\nint end = nums.length-len;\nfor(; len > 0; len--)\n{\nif(nums[start] != nums[end])\nreturn false;\nelse\n{\nstart++;\nend++;\n}\n}\nreturn true;\n}", "/* Return true if the group of N numbers at the start and end of the array \n * are the same. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the \n * same for n=0 and n=2, and false for n=1 and n=3. You may assume that n is \n * in the range 0..nums.length inclusive.\n */\npublic boolean sameEnds(int[] nums, int len) {\n    for(int i = 0; i < len; i++) {\n        if(nums[i] != nums[nums.length - len + i])\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p134300", "title": "sameEnds", "signature": "public boolean sameEnds(int[] nums, int len)", "examples": [{"output": "false", "input": "sameEnds([5, 6, 45, 99, 13, 5, 6], 1)"}, {"output": "true", "input": "sameEnds([5, 6, 45, 99, 13, 5, 6], 2)"}, {"output": "false", "input": "sameEnds([5, 6, 45, 99, 13, 5, 6], 3)"}]}, {"difficulty": 223.0, "summary": "Given a list of strings, return a list where each string has all its \"x\" removed.", "section": "Functional-1", "solution": [], "url": "/prob/p105967", "title": "noX", "signature": "public List<String> noX(List<String> strings)", "examples": [{"output": "[\"a\", \"bb\", \"c\"]", "input": "noX([\"ax\", \"bb\", \"cx\"])"}, {"output": "[\"a\", \"bb\", \"c\"]", "input": "noX([\"xxax\", \"xbxbx\", \"xxcx\"])"}, {"output": "[\"\"]", "input": "noX([\"x\"])"}]}, {"difficulty": 209.0, "summary": "Given a list of strings, return a list where each string is replaced by 3 copies of the string concatenated together.", "section": "Functional-1", "solution": [], "url": "/prob/p181634", "title": "copies3", "signature": "public List<String> copies3(List<String> strings)", "examples": [{"output": "[\"aaa\", \"bbbbbb\", \"ccccccccc\"]", "input": "copies3([\"a\", \"bb\", \"ccc\"])"}, {"output": "[\"242424\", \"aaa\", \"\"]", "input": "copies3([\"24\", \"a\", \"\"])"}, {"output": "[\"hellohellohello\", \"theretherethere\"]", "input": "copies3([\"hello\", \"there\"])"}]}, {"difficulty": 233.0, "summary": "Given a string and an int n, return a string made of the first n characters of the string, followed by the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the string, inclusive (i.e. n >= 0 and n <= str.length()).", "section": "String-2", "solution": ["public String repeatFront(String str, int n){\nStringBuilder stbuild = new StringBuilder((n*n + n)/2);\nfor(int i = n; i >= 1; i--)\n{\nfor(int k = 0; k < i; k++)\nstbuild.append(str.charAt(k));\n}\nreturn stbuild.toString();\n}", "/* Given a string and an int n, return a string made of the first n \n * characters of the string, followed by the first n-1 characters of the \n * string, and so on. You may assume that n is between 0 and the length of \n * the string, inclusive (i.e. n >= 0 and n <= str.length()).\n */\npublic String repeatFront(String str, int n) {\n    StringBuffer result = new StringBuffer();\n    \n    for(int i = n; i > 0; i--)\n        result.append(str.substring(0, i));\n            \n    return result.toString();\n}\n"], "url": "/prob/p128796", "title": "repeatFront", "signature": "public String repeatFront(String str, int n)", "examples": [{"output": "\"ChocChoChC\"", "input": "repeatFront(\"Chocolate\", 4)"}, {"output": "\"ChoChC\"", "input": "repeatFront(\"Chocolate\", 3)"}, {"output": "\"IcI\"", "input": "repeatFront(\"Ice Cream\", 2)"}]}, {"difficulty": 303.0, "summary": "Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, always with the value 0. For example the string \"hello\" makes the pair \"hello\":0. We'll do more complicated counting later, but for this problem the value is simply 0.", "section": "Map-2", "solution": [], "url": "/prob/p152303", "title": "word0", "signature": "public Map<String, Integer> word0(String[] strings)", "examples": [{"output": "{\"a\": 0, \"b\": 0}", "input": "word0([\"a\", \"b\", \"a\", \"b\"])"}, {"output": "{\"a\": 0, \"b\": 0, \"c\": 0}", "input": "word0([\"a\", \"b\", \"a\", \"c\", \"b\"])"}, {"output": "{\"a\": 0, \"b\": 0, \"c\": 0}", "input": "word0([\"c\", \"b\", \"a\"])"}]}, {"difficulty": 184.0, "summary": "Given a string, return a new string made of 3 copies of the first 2 chars of the original string. The string may be any length. If there are fewer than 2 chars, use whatever is there.", "section": "String-1", "solution": ["public String extraFront(String str){\nString temp;\nif(str.length() >= 3)\ntemp = str.substring(0, 2);\nelse\ntemp = str;\nreturn (temp + temp + temp);\n}", "/* Given a string, return a new string made of 3 copies of the first 2 chars \n * of the original string. The string may be any length. If there are fewer \n * than 2 chars, use whatever is there.\n */\npublic String extraFront(String str) {\n    if(str.length() >= 2)\n        str = str.substring(0, 2);\n          \n    return str + str + str;\n}\n"], "url": "/prob/p172063", "title": "extraFront", "signature": "public String extraFront(String str)", "examples": [{"output": "\"HeHeHe\"", "input": "extraFront(\"Hello\")"}, {"output": "\"ababab\"", "input": "extraFront(\"ab\")"}, {"output": "\"HHH\"", "input": "extraFront(\"H\")"}]}, {"difficulty": 175.0, "summary": "Given a string, if the string begins with \"red\" or \"blue\" return that color string, otherwise return the empty string.", "section": "String-1", "solution": ["public String seeColor(String str) {{\nif (str.startsWith(\"red\")) {\nreturn \"red\";\n} else if (str.startsWith(\"blue\")) {\nreturn \"blue\";\n} else {\nreturn \"\";\n}\n}", "public String seeColor(String str){\nint len = str.length();\nif(len >= 4)\n{\nif(str.substring(0, 4).equals(\"blue\"))\nreturn \"blue\";\nelse if(str.substring(0, 3).equals(\"red\"))\nreturn \"red\";\nelse\nreturn \"\";\n}\nelse if(len == 3)\n{\nif(str.substring(0, 3).equals(\"red\"))\nreturn \"red\";\nelse\nreturn \"\";\n}\nelse\nreturn \"\";\n}", "/* Given a string, if the string begins with \"red\" or \"blue\" return that \n * color string, otherwise return the empty string.\n */\npublic String seeColor(String str) {\n    if(str.length() >= 3 && str.substring(0, 3).equals(\"red\"))\n        return \"red\";\n          \n    if(str.length() >= 4 && str.substring(0, 4).equals(\"blue\"))\n        return \"blue\";\n                    \n    return \"\";\n}\n"], "url": "/prob/p199216", "title": "seeColor", "signature": "public String seeColor(String str)", "examples": [{"output": "\"red\"", "input": "seeColor(\"redxx\")"}, {"output": "\"\"", "input": "seeColor(\"xxred\")"}, {"output": "\"blue\"", "input": "seeColor(\"blueTimes\")"}]}, {"difficulty": 318.0, "summary": "Given n>=0, create an array length n*n with the following pattern, shown here for n=3 : {0, 0, 1, \u00a0\u00a0 0, 2, 1, \u00a0\u00a0 3, 2, 1} (spaces added to show the 3 groups).", "section": "Array-3", "solution": ["public int[] squareUp(int n){\nint[] arr = new int[n*n];\nint p;\nfor(int i = 1; i <= n; i++)\n{\np = n * i - 1;\nfor(int j = 1; j <= i; j++, p--)\narr[p] = j;\n}\nreturn arr;\n}", "/* Given n>=0, create an array length n*n with the following pattern, shown \n * here for n=3 : {0, 0, 1,    0, 2, 1,    3, 2, 1}\n */\npublic int[] squareUp(int n) {\n    int[] arr = new int[n*n];\n    \n    if(n == 0)\n        return arr;\n              \n    for(int i = n - 1; i < arr.length; i += n) {\n        for(int j = i; j >= i - i / n; j--)\n            arr[j] = i - j + 1;\n    }\n                              \n    return arr;\n}\n"], "url": "/prob/p155405", "title": "squareUp", "signature": "public int[] squareUp(int n)", "examples": [{"output": "[0, 0, 1, 0, 2, 1, 3, 2, 1]", "input": "squareUp(3)"}, {"output": "[0, 1, 2, 1]", "input": "squareUp(2)"}, {"output": "[0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1]", "input": "squareUp(4)"}]}, {"difficulty": 251.0, "summary": "Given an array of ints, return true if the array contains either 3 even or 3 odd values all next to each other.", "section": "Array-2", "solution": ["public boolean modThree(int[] nums){\nfor(int i = 0; i < nums.length - 2; i++)\n{\nif(nums[i] % 2 == nums[i+1] % 2 && nums[i] % 2 == nums[i+2] % 2)\nreturn true;\n}\nreturn false;\n}", "/* Given an array of ints, return true if the array contains either 3 even \n * or 3 odd values all next to each other.\n */\npublic boolean modThree(int[] nums) {\n    if(nums.length < 3)\n        return false;\n          \n    for(int i = 0; i <= nums.length - 3; i++) {\n        if(nums[i] % 2 == nums[i+1] % 2 && nums[i] % 2 == nums[i+2] % 2)\n            return true;\n    }\n                          \n    return false;\n}\n"], "url": "/prob/p159979", "title": "modThree", "signature": "public boolean modThree(int[] nums)", "examples": [{"output": "true", "input": "modThree([2, 1, 3, 5])"}, {"output": "false", "input": "modThree([2, 1, 2, 5])"}, {"output": "true", "input": "modThree([2, 4, 2, 5])"}]}, {"difficulty": 178.0, "summary": "Given 2 positive int values, return the larger value that is in the range 10..20 inclusive, or return 0 if neither is in that range.", "section": "Warmup-1", "solution": ["public int max1020(int a, int b) {\n  // First make it so the bigger value is in a\n  if (b > a) {\n    int temp = a;\n    a = b;\n    b = temp;\n  }\n  \n  // Knowing a is bigger, just check a first\n  if (a >= 10 && a <= 20) return a;\n  if (b >= 10 && b <= 20) return b;\n  return 0;\n}", "public int max1020(int a, int b){\nif(a >= 10 && a <= 20)\n{\nif(b >= 10 && b <= 20 && b >= a)\nreturn b;\nelse\nreturn a;\n}\nelse if(b >= 10 && b <= 20)\n{\nreturn b;\n}\nelse\n{\nreturn 0;\n}\n}", "/* Given 2 positive int values, return the larger value that is in the range \n * 10..20 inclusive, or return 0 if neither is in that range.\n */\npublic int max1020(int a, int b) {\n    if(b > a) {\n        a = a + b;\n        b = a - b;\n        a = a - b;\n    }\n                  \n    if(10 <= a && a <= 20)\n        return a;\n                            \n    if(10 <= b && b <= 20)\n        return b;\n                                      \n    return 0;\n}\n"], "url": "/prob/p177372", "title": "max1020", "signature": "public int max1020(int a, int b)", "examples": [{"output": "19", "input": "max1020(11, 19)"}, {"output": "19", "input": "max1020(19, 11)"}, {"output": "11", "input": "max1020(11, 9)"}]}, {"difficulty": 312.0, "summary": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "section": "Array-3", "solution": ["public boolean canBalance(int[] nums){\nint left = 0;\nint right;\nfor(int i = 0; i < nums.length - 1; i++)\nleft += nums[i];\nright = nums[nums.length-1];\nfor(int i = nums.length - 2; i > 0; i--)\n{\nif(left == right)\nreturn true;\nleft -= nums[i];\nright += nums[i];\n}\nreturn (left == right);\n}", "/* Given a non-empty array, return true if there is a place to split the \n * array so that the sum of the numbers on one side is equal to the sum of \n * the numbers on the other side.\n */\npublic boolean canBalance(int[] nums) {\n    int first = 0;\n    int second = 0;\n      \n    for(int i = 0; i < nums.length; i++)\n        second += nums[i];\n              \n    for(int i = 0; i <= nums.length - 2; i++) {\n        first += nums[i];\n        second -= nums[i];\n                            \n        if(first == second)\n            return true;\n    }\n                                          \n    return false;\n}\n"], "url": "/prob/p158767", "title": "canBalance", "signature": "public boolean canBalance(int[] nums)", "examples": [{"output": "true", "input": "canBalance([1, 1, 1, 2, 1])"}, {"output": "false", "input": "canBalance([2, 1, 1, 2, 1])"}, {"output": "true", "input": "canBalance([10, 10])"}]}, {"difficulty": 181.0, "summary": "Return true if the given string contains between 1 and 3 'e' chars.", "section": "Warmup-1", "solution": ["public boolean stringE(String str) {\n  int count = 0;\n\n  for (int i=0; i<str.length(); i++) {\n    if (str.charAt(i) == 'e') count++;\n    // alternately: str.substring(i, i+1).equals(\"e\")\n  }\n\n  return (count >= 1 && count <= 3);\n}", "public boolean stringE(String str){\nint count = 0;\nfor(int i = 0; i < str.length(); i++)\n{\nif(str.charAt(i) == 'e')\ncount++;\n}\nreturn (count >= 1 && count <= 3);\n}", "/* Return true if the given string contains between 1 and 3 'e' chars.\n */\npublic boolean stringE(String str) {\n    int num = 0;\n    for(int i = 0; i < str.length(); i++) {\n        if(str.charAt(i) == 'e')\n            num++;\n    }\n    return 1 <= num && num <= 3;\n}\n"], "url": "/prob/p173784", "title": "stringE", "signature": "public boolean stringE(String str)", "examples": [{"output": "true", "input": "stringE(\"Hello\")"}, {"output": "true", "input": "stringE(\"Heelle\")"}, {"output": "false", "input": "stringE(\"Heelele\")"}]}, {"difficulty": 190.0, "summary": "Given a string, return a version without the first 2 chars. Except keep the first char if it is 'a' and keep the second char if it is 'b'. The string may be any length. Harder than it looks.", "section": "String-1", "solution": ["public String deFront(String str) {{\nint len = str.length();\n\nif (len == 0) {\nreturn str;\n}\n\nif (len == 1) {\nreturn str.charAt(0) == 'a' ? str : \"\";\n}\n\nif (str.charAt(0) == 'a') {\nif (str.charAt(1) == 'b') {\nreturn str;\n} else {\nreturn \"a\" + str.substring(2);\n}\n}\n\nif (str.charAt(1) == 'b') {\nreturn str.substring(1);\n}\n\nreturn str.substring(2);\n}", "public String deFront(String str){\nint len = str.length();\nif(len >= 2)\n{\nStringBuilder stbuild = new StringBuilder(len);\nif(str.charAt(0) == 'a')\nstbuild.append('a');\nif(str.charAt(1) == 'b')\nstbuild.append('b');\nstbuild.append(str.substring(2));\nreturn stbuild.toString();\n}\nelse if(len == 1 && str.charAt(0) == 'a')\nreturn \"a\";\nelse\nreturn \"\";\n}", "/* Given a string, return a version without the first 2 chars. Except keep \n * the first char if it is 'a' and keep the second char if it is 'b'. The \n * string may be any length. Harder than it looks.\n */\npublic String deFront(String str) {\n    if(str.length() == 1 && str.charAt(0) != 'a')\n        return \"\";\n          \n    if(str.length() >= 2) {\n        if(str.charAt(0) != 'a' && str.charAt(1) != 'b') {\n            return str.substring(2);\n        } else if(str.charAt(0) != 'a') {\n            return str.substring(1);\n        } else if(str.charAt(1) != 'b') {\n            return \"a\" + str.substring(2);\n        }\n    }\n                                                  \n    return str;\n}\n"], "url": "/prob/p110141", "title": "deFront", "signature": "public String deFront(String str)", "examples": [{"output": "\"llo\"", "input": "deFront(\"Hello\")"}, {"output": "\"va\"", "input": "deFront(\"java\")"}, {"output": "\"aay\"", "input": "deFront(\"away\")"}]}, {"difficulty": 315.0, "summary": "We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows.", "section": "Recursion-1", "solution": ["public int triangle(int rows){\nif(rows < 2)\nreturn rows;\nreturn rows + triangle(rows-1);\n}", "/* We have triangle made of blocks. The topmost row has 1 block, the next row \n * down has 2 blocks, the next row has 3 blocks, and so on. Compute \n * recursively (no loops or multiplication) the total number of blocks in such \n * a triangle with the given number of rows.\n */\npublic int triangle(int rows) {\n    if(rows == 0)\n        return 0;\n          \n    return rows + triangle(rows-1);\n}\n"], "url": "/prob/p194781", "title": "triangle", "signature": "public int triangle(int rows)", "examples": [{"output": "0", "input": "triangle(0)"}, {"output": "1", "input": "triangle(1)"}, {"output": "3", "input": "triangle(2)"}]}, {"difficulty": 212.0, "summary": "Given a map of food keys and topping values, modify and return the map as follows: if the key \"ice cream\" is present, set its value to \"cherry\". In all cases, set the key \"bread\" to have the value \"butter\".", "section": "Map-1", "solution": [], "url": "/prob/p182712", "title": "topping1", "signature": "public Map<String, String> topping1(Map<String, String> map)", "examples": [{"output": "{\"bread\": \"butter\", \"ice cream\": \"cherry\"}", "input": "topping1({\"ice cream\": \"peanuts\"})"}, {"output": "{\"bread\": \"butter\"}", "input": "topping1({})"}, {"output": "{\"bread\": \"butter\", \"pancake\": \"syrup\"}", "input": "topping1({\"pancake\": \"syrup\"})"}]}, {"difficulty": 145.0, "summary": "Given an int array, return true if the array contains 2 twice, or 3 twice. The array will be length 0, 1, or 2.", "section": "Array-1", "solution": ["public boolean double23(int[] nums){\nif(nums.length == 2)\n{\nif(nums[0] == 2 && nums[1] == 2)\nreturn true;\nreturn (nums[0] == 3 && nums[1] == 3);\n}\nreturn false;\n}", "/* Given an int array, return true if the array contains 2 twice, or 3 twice. \n * The array will be length 0, 1, or 2.\n */\npublic boolean double23(int[] nums) {\n    int count2 = 0;\n    int count3 = 0;\n      \n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 2)\n            count2++;\n                        \n        if(nums[i] == 3)\n            count3++;\n    }\n                                      \n    return count2 == 2 || count3 == 2;\n}\n"], "url": "/prob/p145365", "title": "double23", "signature": "public boolean double23(int[] nums)", "examples": [{"output": "true", "input": "double23([2, 2])"}, {"output": "true", "input": "double23([3, 3])"}, {"output": "false", "input": "double23([2, 3])"}]}, {"difficulty": 378.0, "summary": "Given a string that contains a single pair of parenthesis, compute recursively a new string made of only of the parenthesis and their contents, so \"xyz(abc)123\" yields \"(abc)\".", "section": "Recursion-1", "solution": ["public String parenBit(String str){\nint len = str.length();\nif(str.charAt(0) != '(')\n{\nif(str.charAt(len - 1) != ')')\nreturn parenBit(str.substring(1, len -1));\nreturn parenBit(str.substring(1));\n}\nif(str.charAt(len - 1) != ')')\nreturn parenBit(str.substring(0, len - 1));\nreturn str;\n}", "/* Given a string that contains a single pair of parenthesis, compute \n * recursively a new string made of only of the parenthesis and their \n * contents, so \"xyz(abc)123\" yields \"(abc)\".\n */\npublic String parenBit(String str) {\n    if(str.charAt(0) == '(' && str.charAt(str.length()-1) == ')')\n        return str;\n          \n    if(str.charAt(0) == '(')\n        return parenBit(str.substring(0, str.length() - 1));\n                    \n    if(str.charAt(str.length() - 1) == ')')\n        return parenBit(str.substring(1));\n                              \n    return parenBit(str.substring(1, str.length() - 1));\n}\n"], "url": "/prob/p137918", "title": "parenBit", "signature": "public String parenBit(String str)", "examples": [{"output": "\"(abc)\"", "input": "parenBit(\"xyz(abc)123\")"}, {"output": "\"(hello)\"", "input": "parenBit(\"x(hello)\")"}, {"output": "\"(xy)\"", "input": "parenBit(\"(xy)1\")"}]}, {"difficulty": 120.0, "summary": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "section": "Logic-1", "solution": ["public boolean love6( int a, int b ){\n{\nreturn ( a == 6 ) || ( b == 6 ) || ( a + b == 6 ) || ( Math.abs( a - b ) == 6 );\n}", "public boolean love6(int a, int b){\nif(a == 6 || b == 6)\nreturn true;\nreturn ((a + b) == 6|| Math.abs(a - b) == 6);\n}", "/* The number 6 is a truly great number. Given two int values, a and b, \n * return true if either one is 6. Or if their sum or difference is 6. Note: \n * the function Math.abs(num) computes the absolute value of a number.\n */\npublic boolean love6(int a, int b) {\n    if(a == 6 || b == 6 || a + b == 6 || Math.abs(a - b) == 6)\n        return true;\n          \n    return false;\n}\n"], "url": "/prob/p137742", "title": "love6", "signature": "public boolean love6(int a, int b)", "examples": [{"output": "true", "input": "love6(6, 4)"}, {"output": "false", "input": "love6(4, 5)"}, {"output": "true", "input": "love6(1, 5)"}]}, {"difficulty": 160.0, "summary": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "section": "Logic-1", "solution": ["public int greenTicket( int a, int b, int c ){\n{\nif ( a == b && b == c )\n{\nreturn 20;\n}\nif ( a == b || b == c || a == c )\n{\nreturn 10;\n}\n\nreturn 0;\n}", "public int greenTicket(int a, int b, int c){\nif(a == b)\n{\nif(b == c)\nreturn 20;\nreturn 10;\n}\nif(a == c || b == c)\nreturn 10;\nreturn 0;\n}", "/* You have a green lottery ticket, with ints a, b, and c on it. If the \n * numbers are all different from each other, the result is 0. If all of the \n * numbers are the same, the result is 20. If two of the numbers are the \n * same, the result is 10.\n */\npublic int greenTicket(int a, int b, int c) {\n    if(a == b && b == c)\n        return 20;\n          \n    if(a == b || a == c || b == c)\n        return 10;\n                  \n    return 0;\n}\n"], "url": "/prob/p120633", "title": "greenTicket", "signature": "public int greenTicket(int a, int b, int c)", "examples": [{"output": "0", "input": "greenTicket(1, 2, 3)"}, {"output": "20", "input": "greenTicket(2, 2, 2)"}, {"output": "10", "input": "greenTicket(1, 1, 2)"}]}, {"difficulty": 215.0, "summary": "Given an array of strings, return the count of the number of strings with the given length.", "section": "AP-1", "solution": ["public int wordsCount( String[] words, int len ){\n{\nint count = 0;\n\nfor ( String s : words )\n{\nif ( s.length() == len )\n{\ncount++;\n}\n}\n\nreturn count;\n}", "/* Given an array of strings, return the count of the number of strings with \n * the given length.\n */\npublic int wordsCount(String[] words, int len) {\n    int count = 0;\n    \n    for(int i = 0; i < words.length; i++) {\n        if(words[i].length() == len)\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p124620", "title": "wordsCount", "signature": "public int wordsCount(String[] words, int len)", "examples": [{"output": "2", "input": "wordsCount([\"a\", \"bb\", \"b\", \"ccc\"], 1)"}, {"output": "1", "input": "wordsCount([\"a\", \"bb\", \"b\", \"ccc\"], 3)"}, {"output": "0", "input": "wordsCount([\"a\", \"bb\", \"b\", \"ccc\"], 4)"}]}, {"difficulty": 151.0, "summary": "Return the sum of two 6-sided dice rolls, each in the range 1..6. However, if noDoubles is true, if the two dice show the same value, increment one die to the next value, wrapping around to 1 if its value was 6.", "section": "Logic-1", "solution": ["public int withoutDoubles( int die1, int die2, boolean noDoubles ){\n{\nif ( noDoubles )\n{\nif ( die1 == die2 )\n{\ndie1 = ( die1 == 6 ? 1 : die1 + 1 );\n}\n}\n\nreturn die1 + die2;\n}", "public int withoutDoubles(int die1, int die2, boolean noDoubles){\nif(noDoubles && die1 == die2)\n{\nif(die1 == 6)\ndie1 = 1;\nelse\ndie1++;\n}\nreturn die1+die2;\n}", "/* Return the sum of two 6-sided dice rolls, each in the range 1..6. However, \n * if noDoubles is true, if the two dice show the same value, increment one \n * die to the next value, wrapping around to 1 if its value was 6.\n */\npublic int withoutDoubles(int die1, int die2, boolean noDoubles) {\n    if(noDoubles && die1 == die2) {\n        die1++;\n        if(die1 == 7)\n            die1 = 1;\n    }\n                      \n    return die1 + die2;\n}\n"], "url": "/prob/p115233", "title": "withoutDoubles", "signature": "public int withoutDoubles(int die1, int die2, boolean noDoubles)", "examples": [{"output": "5", "input": "withoutDoubles(2, 3, true)"}, {"output": "7", "input": "withoutDoubles(3, 3, true)"}, {"output": "6", "input": "withoutDoubles(3, 3, false)"}]}, {"difficulty": 357.0, "summary": "Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a \"*\".", "section": "Recursion-1", "solution": ["public String pairStar(String str){\nif(str.length() < 2)\nreturn str;\nif(str.charAt(0) == str.charAt(1))\nreturn str.charAt(0) + \"*\" + pairStar(str.substring(1));\nreturn str.charAt(0) + pairStar(str.substring(1));\n}", "/* Given a string, compute recursively a new string where identical chars \n * that are adjacent in the original string are separated from each other by \n * a \"*\".\n */\npublic String pairStar(String str) {\n    if(str.length() <= 1)\n        return str;\n          \n    if(str.charAt(0) == str.charAt(1))\n        return str.charAt(0) + \"*\" + pairStar(str.substring(1));\n                    \n    return str.charAt(0) + pairStar(str.substring(1));\n}\n"], "url": "/prob/p158175", "title": "pairStar", "signature": "public String pairStar(String str)", "examples": [{"output": "\"hel*lo\"", "input": "pairStar(\"hello\")"}, {"output": "\"x*xy*y\"", "input": "pairStar(\"xxyy\")"}, {"output": "\"a*a*a*a\"", "input": "pairStar(\"aaaa\")"}]}, {"difficulty": 163.0, "summary": "Given a string, return a string length 2 made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "section": "String-1", "solution": ["public String atFirst(String str){\nint len = str.length();\nif(len >= 2)\nreturn str.substring(0, 2);\nelse if(len == 1)\nreturn (str.charAt(0)+\"@\");\nelse\nreturn \"@@\";\n}", "/* Given a string, return a string length 2 made of its first 2 chars. If the \n * string length is less than 2, use '@' for the missing chars.\n */\npublic String atFirst(String str) {\n    if(str.length() == 0)\n        return \"@@\";\n          \n    if(str.length() == 1)\n        return str + \"@\";\n                    \n    return str.substring(0, 2);\n}\n"], "url": "/prob/p139076", "title": "atFirst", "signature": "public String atFirst(String str)", "examples": [{"output": "\"he\"", "input": "atFirst(\"hello\")"}, {"output": "\"hi\"", "input": "atFirst(\"hi\")"}, {"output": "\"h@\"", "input": "atFirst(\"h\")"}]}, {"difficulty": 224.0, "summary": "Given a positive int n, return true if it contains a 1 digit. Note: use % to get the rightmost digit, and / to discard the rightmost digit.", "section": "AP-1", "solution": ["/* Given a positive int n, return true if it contains a 1 digit.\n */\npublic boolean hasOne(int n) {\n    while(n != 0) {\n        if(n % 10 == 1)\n            return true;\n                  \n        n /= 10;\n    }\n                          \n    return false;\n}\n"], "url": "/prob/p191212", "title": "hasOne", "signature": "public boolean hasOne(int n)", "examples": [{"output": "true", "input": "hasOne(10)"}, {"output": "false", "input": "hasOne(22)"}, {"output": "false", "input": "hasOne(220)"}]}, {"difficulty": 135.1, "summary": "Given an int n, return the string form of the number followed by \"!\". So the int 6 yields \"6!\". Except if the number is divisible by 3 use \"Fizz\" instead of the number, and if the number is divisible by 5 use \"Buzz\", and if divisible by both 3 and 5, use \"FizzBuzz\". Note: the % \"mod\" operator computes the remainder after division, so 23 % 10 yields 3. What will the remainder be when one number divides evenly into another? (See also: ", "section": "Logic-1", "solution": ["public String fizzString2( int n ){\n{\nif ( n % 3 == 0 && n % 5 == 0 )\n{\nreturn \"FizzBuzz!\";\n}\nif ( n % 3 == 0 )\n{\nreturn \"Fizz!\";\n}\nif ( n % 5 == 0 )\n{\nreturn \"Buzz!\";\n}\n\nreturn n + \"!\";\n}", "/* Given an int n, return the string form of the number followed by \"!\". So \n * the int 6 yields \"6!\". Except if the number is divisible by 3 use \"Fizz\" \n * instead of the number, and if the number is divisible by 5 use \"Buzz\", and \n * if divisible by both 3 and 5, use \"FizzBuzz\".\n */\npublic String fizzString2(int n) {\n    if(n % 15 == 0)\n        return \"FizzBuzz!\";\n          \n    if(n % 3 == 0)\n        return \"Fizz!\";\n                    \n    if(n % 5 == 0)\n        return \"Buzz!\";\n                              \n    return n + \"!\";\n}\n"], "url": "/prob/p115243", "title": "fizzString2", "signature": "public String fizzString2(int n)", "examples": [{"output": "\"1!\"", "input": "fizzString2(1)"}, {"output": "\"2!\"", "input": "fizzString2(2)"}, {"output": "\"Fizz!\"", "input": "fizzString2(3)"}]}, {"difficulty": 118.0, "summary": "Given a day of the week encoded as 0=Sun, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation -- then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "section": "Logic-1", "solution": ["public String alarmClock( int day, boolean vacation ){\n{\nif ( vacation )\n{\nreturn ( 1 <= day && day <= 5 ) ? \"10:00\" : \"off\";\n}\n\nreturn ( 1 <= day && day <= 5 ) ? \"7:00\" : \"10:00\";\n}", "public String alarmClock(int day, boolean vacation){\nif(vacation)\n{\nif(day == 0 || day == 6)\nreturn \"off\";\nreturn \"10:00\";\n}\nelse\n{\nif(day == 0 || day == 6)\nreturn \"10:00\";\nreturn \"7:00\";\n}\n}", "/* Given a day of the week encoded as 0=Sun, 1=Mon, 2=Tue, ...6=Sat, and a \n * boolean indicating if we are on vacation, return a string of the form \n * \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm \n * should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on \n * vacation -- then on weekdays it should be \"10:00\" and weekends it should \n * be \"off\".\n */\npublic String alarmClock(int day, boolean vacation) {\n    if(vacation) {\n        if(day == 0 || day == 6)\n            return \"off\";\n        else\n            return \"10:00\";\n    }\n                          \n    if(day == 0 || day == 6)\n        return \"10:00\";\n                                    \n    return \"7:00\";\n}\n"], "url": "/prob/p160543", "title": "alarmClock", "signature": "public String alarmClock(int day, boolean vacation)", "examples": [{"output": "\"7:00\"", "input": "alarmClock(1, false)"}, {"output": "\"7:00\"", "input": "alarmClock(5, false)"}, {"output": "\"10:00\"", "input": "alarmClock(0, false)"}]}, {"difficulty": 218.0, "summary": "Given an array of ints, return true if the array contains a 2 next to a 2 somewhere.", "section": "Array-2", "solution": ["public boolean has22(int[] nums){\nfor(int i = 0; i < nums.length-1; i++)\n{\nif(nums[i] == 2 && nums[i+1] == 2)\nreturn true;\n}\nreturn false;\n}", "/* Given an array of ints, return true if the array contains a 2 next to a 2 \n * somewhere.\n */\npublic boolean has22(int[] nums) {\n    for(int i = 0; i < nums.length - 1; i++) {\n        if(nums[i] == 2 && nums[i + 1] == 2)\n            return true;\n    }\n                \n    return false;\n}\n"], "url": "/prob/p121853", "title": "has22", "signature": "public boolean has22(int[] nums)", "examples": [{"output": "true", "input": "has22([1, 2, 2])"}, {"output": "false", "input": "has22([1, 2, 1, 2])"}, {"output": "false", "input": "has22([2, 1, 2])"}]}, {"difficulty": 257.0, "summary": "Given a string and a non-empty ", "section": "String-2", "solution": ["public String plusOut(String str, String word){\nint len = str.length();\nint wLen = word.length();\nint pos = str.indexOf(word);\nint i = 0;\nStringBuilder stbuild = new StringBuilder(len);\nwhile(pos != -1)\n{\nwhile(i < pos)\n{\nstbuild.append('+');\ni++;\n}\nstbuild.append(word);\ni = pos + wLen;\npos = str.indexOf(word, i);\n}\nfor(; i < len; i++)\nstbuild.append('+');\nreturn stbuild.toString();\n}", "/* Given a string and a non-empty word string, return a version of the \n * original String where all chars have been replaced by pluses (\"+\"), except \n * for appearances of the word string which are preserved unchanged.\n */\npublic String plusOut(String str, String word) {\n    StringBuffer result = new StringBuffer();\n    int i = 0;\n      \n    while(i < str.length()) {\n        if(i <= str.length() - word.length() && \n            str.substring(i, i + word.length()).equals(word)) {\n            result.append(word);\n            i += word.length();\n        } else {\n            result.append(\"+\");\n            i++;\n        }\n    }\n \n    return result.toString();\n}\n"], "url": "/prob/p170829", "title": "plusOut", "signature": "public String plusOut(String str, String word)", "examples": [{"output": "\"++xy++\"", "input": "plusOut(\"12xy34\", \"xy\")"}, {"output": "\"1+++++\"", "input": "plusOut(\"12xy34\", \"1\")"}, {"output": "\"++xy++xy+++xy\"", "input": "plusOut(\"12xy34xyabcxy\", \"xy\")"}]}, {"difficulty": 109.0, "summary": "The web is built with HTML strings like \"<i>Yay</i>\" which draws Yay as italic text. In this example, the \"i\" tag makes <i> and </i> which surround the word \"Yay\". Given tag and word strings, create the HTML string with tags around the word, e.g. \"<i>Yay</i>\".", "section": "String-1", "solution": ["public String makeTags(String tag, String word) {{\nreturn \"<\" + tag + \">\" + word + \"</\" + tag + \">\";\n}", ["public String makeTags(String tag, String word){", "", "", "// Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new string", "// where the word is in the middle of the out string, e.g. \"<<word>>\".", "// Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j."], "/* The web is built with HTML strings like \"<i>Yay</i>\" which draws Yay as \n * italic text. In this example, the \"i\" tag makes <i> and </i> which surround \n * the word \"Yay\". Given tag and word strings, create the HTML string with \n * tags around the word, e.g. \"<i>Yay</i>\".\n */\npublic String makeTags(String tag, String word) {\n    return \"<\" + tag + \">\" + word + \"</\" + tag + \">\";\n}\n"], "url": "/prob/p147483", "title": "makeTags", "signature": "public String makeTags(String tag, String word)", "examples": [{"output": "\"<i>Yay</i>\"", "input": "makeTags(\"i\", \"Yay\")"}, {"output": "\"<i>Hello</i>\"", "input": "makeTags(\"i\", \"Hello\")"}, {"output": "\"<cite>Yay</cite>\"", "input": "makeTags(\"cite\", \"Yay\")"}]}, {"difficulty": 112.0, "summary": "Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.", "section": "Warmup-1", "solution": ["public int diff21(int n) {\n  if (n <= 21) {\n    return 21 - n;\n  } else {\n    return (n - 21) * 2;\n  }\n}", "public int diff21( int n ){\n{\nreturn n > 21 ? 2 * ( n - 21 ) : 21 - n;\n}", "public int diff21(int n){\nif(n > 21)\nreturn 2 * (n - 21); // or 2*n - 42\nelse\nreturn 21 - n;\n}", "/* Given an int n, return the absolute difference between n and 21, except \n * return double the absolute difference if n is over 21.\n */\npublic int diff21(int n) {\n    if(n <= 21)\n        return 21 - n;\n        \n    return 2 * (n - 21);\n}\n"], "url": "/prob/p116624", "title": "diff21", "signature": "public int diff21(int n)", "examples": [{"output": "2", "input": "diff21(19)"}, {"output": "11", "input": "diff21(10)"}, {"output": "0", "input": "diff21(21)"}]}, {"difficulty": 103.0, "summary": "When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.", "section": "Logic-1", "solution": ["public boolean cigarParty( int cigars, boolean isWeekend ){\n{\nreturn isWeekend ? ( cigars >= 40 ) : ( 40 <= cigars && cigars <= 60 );\n}", "public boolean cigarParty(int cigars, boolean isWeekend){\nif(isWeekend)\nreturn (cigars >= 40);\nreturn (cigars >= 40 && cigars <= 60);\n}", "/* When squirrels get together for a party, they like to have cigars. A \n * squirrel party is successful when the number of cigars is between 40 and \n * 60, inclusive. Unless it is the weekend, in which case there is no upper \n * bound on the number of cigars. Return true if the party with the given \n * values is successful, or false otherwise.\n */\npublic boolean cigarParty(int cigars, boolean isWeekend) {\n    if(isWeekend)\n        return 40 <= cigars;\n          \n    return 40 <= cigars && cigars <= 60;\n}\n"], "url": "/prob/p159531", "title": "cigarParty", "signature": "public boolean cigarParty(int cigars, boolean isWeekend)", "examples": [{"output": "false", "input": "cigarParty(30, false)"}, {"output": "true", "input": "cigarParty(50, false)"}, {"output": "true", "input": "cigarParty(70, true)"}]}, {"difficulty": 321.0, "summary": "Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).", "section": "Recursion-1", "solution": ["public int count7(int n){\nif(n == 0)\nreturn 0;\nif(n % 10 == 7)\nreturn 1+count7(n/10);\nreturn count7(n/10);\n}", "/* Given a non-negative int n, return the count of the occurrences of 7 as a \n * digit, so for example 717 yields 2. (no loops).\n */\npublic int count7(int n) {\n    if(n == 0)\n        return 0;\n          \n    if(n % 10 == 7)\n        return 1 + count7(n / 10);\n                    \n    return count7(n / 10);\n}\n"], "url": "/prob/p101409", "title": "count7", "signature": "public int count7(int n)", "examples": [{"output": "2", "input": "count7(717)"}, {"output": "1", "input": "count7(7)"}, {"output": "0", "input": "count7(123)"}]}, {"difficulty": 230.0, "summary": "Given a string, return a version where all the \"x\" have been removed. Except an \"x\" at the very start or end should not be removed.", "section": "Warmup-2", "solution": ["public String stringX(String str) {\n  String result = \"\";\n  for (int i=0; i<str.length(); i++) {\n    // Only append the char if it is not the \"x\" case\n    if (!(i > 0 && i < (str.length()-1) && str.substring(i, i+1).equals(\"x\"))) {\n      result = result + str.substring(i, i+1); // Could use str.charAt(i) here\n    }\n  }\n  return result;\n}", "public String stringX( String str ){\n{\nint len = str.length();\n\nif ( len < 3 )\n{\nreturn str;\n}\nString subStr = str.substring( 1, len - 1 );\nsubStr = subStr.replace( \"x\", \"\" );\n\nreturn str.charAt( 0 ) + subStr + str.charAt( len - 1 );\n}", "public String stringX(String str){\nint len = str.length();\nif(len >= 2)\n{\nlen--;\nStringBuilder stbuild = new StringBuilder(len-1);\nstbuild.append(str.charAt(0));\nfor(int i = 1; i < len; i++)\n{\nif(str.charAt(i) != 'x')\nstbuild.append(str.charAt(i);\n}\nstbuild.append(str.charAt(len));\nreturn stbuild.toString()\n}\nelse\nreturn str;\n}", "/* Given a string, return a version where all the \"x\" have been removed. \n * Except an \"x\" at the very start or end should not be removed.\n */\npublic String stringX(String str) {\n    if(str.length() < 2)\n        return str;\n          \n    char[] result = new char[str.length()];\n    result[0] = str.charAt(0);\n                \n    int count = 1;\n    for(int i = 1; i < str.length() - 1; i++) {\n        if(str.charAt(i) != 'x') {\n            result[count] = str.charAt(i);\n            count++;\n        }\n    }\n                                            \n    result[count] = str.charAt(str.length() - 1);\n    count++;\n    return new String(result, 0, count);\n}\n"], "url": "/prob/p171260", "title": "stringX", "signature": "public String stringX(String str)", "examples": [{"output": "\"xHix\"", "input": "stringX(\"xxHxix\")"}, {"output": "\"abcd\"", "input": "stringX(\"abxxxcd\")"}, {"output": "\"xabcdx\"", "input": "stringX(\"xabxxxcdx\")"}]}, {"difficulty": 327.0, "summary": "Given ", "section": "Recursion-1", "solution": ["public int powerN(int base, int n){\nif(n == 1)\nreturn base;\nreturn base*powerN(base, n - 1);\n}", "/* Given base and n that are both 1 or more, compute recursively (no loops) \n * the value of base to the n power, so powerN(3, 2) is 9 (3 squared).\n */\npublic int powerN(int base, int n) {\n    if(n <= 1)\n        return base;\n          \n    return base * powerN(base, n - 1);\n}\n"], "url": "/prob/p158888", "title": "powerN", "signature": "public int powerN(int base, int n)", "examples": [{"output": "3", "input": "powerN(3, 1)"}, {"output": "9", "input": "powerN(3, 2)"}, {"output": "27", "input": "powerN(3, 3)"}]}, {"difficulty": 199.0, "summary": "Given a string, if one or both of the first 2 chars is 'x', return the string without those 'x' chars, and otherwise return the string unchanged. This is a little harder than it looks.", "section": "String-1", "solution": ["public String withoutX2(String str){\nint len = str.length();\nif(len >= 2)\n{\nchar ch = str.charAt(0);\nStringBuilder stbuild = new StringBuilder(len);\nif(ch != 'x')\nstbuild.append(ch);\nch = str.charAt(1);\nif(ch != 'x')\nstbuild.append(ch);\nstbuild.append(str.substring(2));\nreturn stbuild.toString();\n}\nelse if(len == 1 && str.charAt(0) == 'x')\nreturn \"\";\nelse\nreturn str;\n}", "/* Given a string, if one or both of the first 2 chars is 'x', return the \n * string without those 'x' chars, and otherwise return the string unchanged. \n * This is a little harder than it looks.\n */\npublic String withoutX2(String str) {\n    if(str.length() == 1 && str.charAt(0) == 'x')\n        return \"\";\n          \n    if(str.length() >= 2) {\n        if(str.charAt(0) == 'x' && str.charAt(1) == 'x') {\n            return str.substring(2);\n        } else if(str.charAt(0) == 'x') {\n            return str.substring(1);\n        } else if(str.charAt(1) == 'x') {\n            return str.charAt(0) + str.substring(2);\n        }\n    }\n                                                  \n    return str;\n}\n"], "url": "/prob/p151359", "title": "withoutX2", "signature": "public String withoutX2(String str)", "examples": [{"output": "\"Hi\"", "input": "withoutX2(\"xHi\")"}, {"output": "\"Hi\"", "input": "withoutX2(\"Hxi\")"}, {"output": "\"Hi\"", "input": "withoutX2(\"Hi\")"}]}, {"difficulty": 145.0, "summary": "Given a string of even length, return a string made of the middle two chars, so the string \"string\" yields \"ri\". The string length will be at least 2.", "section": "String-1", "solution": ["public String middleTwo(String str) {{\nint halfLen = str.length() >> 1;\nreturn str.substring(halfLen - 1, halfLen + 1);\n}", "public String middleTwo(String str){\nint half = str.length()/2-1;\nreturn str.substring(half, half+2);\n}", "/* Given a string of even length, return a string made of the middle two \n * chars, so the string \"string\" yields \"ri\". The string length will be at \n * least 2.\n */\npublic String middleTwo(String str) {\n    return str.substring(str.length() / 2 - 1, str.length() / 2 + 1);\n}\n"], "url": "/prob/p137729", "title": "middleTwo", "signature": "public String middleTwo(String str)", "examples": [{"output": "\"ri\"", "input": "middleTwo(\"string\")"}, {"output": "\"od\"", "input": "middleTwo(\"code\")"}, {"output": "\"ct\"", "input": "middleTwo(\"Practice\")"}]}, {"difficulty": 226.0, "summary": "Given a list of integers, return a list of those numbers squared and the product added to 10, omitting any of the resulting numbers that end in 5 or 6.", "section": "Functional-2", "solution": [], "url": "/prob/p132748", "title": "square56", "signature": "public List<Integer> square56(List<Integer> nums)", "examples": [{"output": "[19, 11]", "input": "square56([3, 1, 4])"}, {"output": "[11]", "input": "square56([1])"}, {"output": "[14]", "input": "square56([2])"}]}, {"difficulty": 309.0, "summary": "(This is a slightly harder version of the fix34 problem.) Return an array that contains exactly the same numbers as the given array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array.", "section": "Array-3", "solution": ["public int[] fix45(int[] nums){\nint j = 0;\nfor(int i = 0; i < nums.length - 1; i++)\n{\nif(nums[i] == 4 && nums[i+1] != 5)\n{\nfor(; !(nums[j] == 5 && (j == 0 || j > 0 && nums[j-1] != 4)); j++);\nnums[j] = nums[i+1];\nnums[i+1] = 5;\n}\n}\nreturn nums;\n}", "/* Return an array that contains exactly the same numbers as the given array, \n * but rearranged so that every 4 is immediately followed by a 5. Do not move \n * the 4's, but every other number may move. The array contains the same \n * number of 4's and 5's, and every 4 has a number after it that is not a 4. \n * In this version, 5's may appear anywhere in the original array.\n */\npublic int[] fix45(int[] nums) {\n    int i = 0;\n    int j = 0;\n        \n    while(j < nums.length && nums[j] != 5)\n        j++;\n                  \n    while(i < nums.length) {\n        if(nums[i] == 4) {\n            int temp = nums[i+1];\n            nums[i+1] = nums[j];\n            nums[j] = temp;\n                                                \n            while((j < nums.length && nums[j] != 5) || j == i + 1)\n                j++;\n        }\n        i++;\n    }\n                                                                          \n    return nums;\n}\n"], "url": "/prob/p125819", "title": "fix45", "signature": "public int[] fix45(int[] nums)", "examples": [{"output": "[9, 4, 5, 4, 5, 9]", "input": "fix45([5, 4, 9, 4, 9, 5])"}, {"output": "[1, 4, 5, 1]", "input": "fix45([1, 4, 1, 5])"}, {"output": "[1, 4, 5, 1, 1, 4, 5]", "input": "fix45([1, 4, 1, 5, 5, 4, 1])"}]}, {"difficulty": 290.0, "summary": "Return an array that contains the exact same numbers as the given array, but rearranged so that all the even numbers come before all the odd numbers. Other than that, the numbers can be in any order. You may modify and return the given array, or make a new array.", "section": "Array-2", "solution": ["public int[] evenOdd(int[] nums){\nint temp;\nint evenIndex = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] % 2 == 0)\n{\ntemp = nums[i];\nnums[i] = nums[evenIndex];\nnums[evenIndex] = temp;\nevenIndex++;\n}\n}\nreturn nums;\n}", "/* Return an array that contains the exact same numbers as the given array, \n * but rearranged so that all the even numbers come before all the odd \n * numbers. Other than that, the numbers can be in any order. You may modify \n * and return the given array, or make a new array.\n */\npublic int[] evenOdd(int[] nums) {\n    int i = 0;\n    \n    while(i < nums.length && nums[i] % 2 == 0)\n        i++;\n              \n    for(int j = i + 1; j < nums.length; j++) {\n        if(nums[j] % 2 == 0) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n        }\n    }\n                                                    \n    return nums;\n}\n"], "url": "/prob/p105771", "title": "evenOdd", "signature": "public int[] evenOdd(int[] nums)", "examples": [{"output": "[0, 0, 0, 1, 1, 1, 1]", "input": "evenOdd([1, 0, 1, 0, 0, 1, 1])"}, {"output": "[2, 3, 3]", "input": "evenOdd([3, 3, 2])"}, {"output": "[2, 2, 2]", "input": "evenOdd([2, 2, 2])"}]}, {"difficulty": 133.0, "summary": "We are having a party with amounts of tea and candy. Return the int outcome of the party encoded as 0=bad, 1=good, or 2=great. A party is good (1) if both tea and candy are at least 5. However, if either tea or candy is at least double the amount of the other one, the party is great (2). However, in all cases, if either tea or candy is less than 5, the party is always bad (0).", "section": "Logic-1", "solution": ["public int teaParty( int tea, int candy ){\n{\nif ( tea < 5 || candy < 5 )\n{\nreturn 0;\n}\nint k = ( tea > candy ) ? ( tea / candy ) : ( candy / tea );\n\nreturn k >= 2 ? 2 : 1;\n}", "public int teaParty(int tea, int candy){\nif(tea < 5 || candy < 5)\nreturn 0;\nif(candy >= tea*2 || tea >= candy*2)\nreturn 2;\nreturn 1;\n}", "/* We are having a party with amounts of tea and candy. Return the int \n * outcome of the party encoded as 0=bad, 1=good, or 2=great. A party is good \n * (1) if both tea and candy are at least 5. However, if either tea or candy \n * is at least double the amount of the other one, the party is great (2). \n * However, in all cases, if either tea or candy is less than 5, the party is \n * always bad (0).\n */\npublic int teaParty(int tea, int candy) {\n    if(tea < 5 || candy < 5)\n        return 0;\n          \n    if(tea >= 2 * candy || candy >= 2 * tea)\n        return 2;\n                  \n    return 1;\n}\n"], "url": "/prob/p177181", "title": "teaParty", "signature": "public int teaParty(int tea, int candy)", "examples": [{"output": "1", "input": "teaParty(6, 8)"}, {"output": "0", "input": "teaParty(3, 8)"}, {"output": "2", "input": "teaParty(20, 6)"}]}, {"difficulty": 227.0, "summary": "Modify and return the given map as follows: if the keys \"a\" and \"b\" have values that have different lengths, then set \"c\" to have the longer value. If the values exist and have the same length, change them both to the empty string in the map.", "section": "Map-1", "solution": [], "url": "/prob/p136950", "title": "mapAB4", "signature": "public Map<String, String> mapAB4(Map<String, String> map)", "examples": [{"output": "{\"a\": \"aaa\", \"b\": \"bb\", \"c\": \"aaa\"}", "input": "mapAB4({\"a\": \"aaa\", \"b\": \"bb\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aa\", \"b\": \"bbb\", \"c\": \"bbb\"}", "input": "mapAB4({\"a\": \"aa\", \"b\": \"bbb\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aa\", \"b\": \"bbb\", \"c\": \"bbb\"}", "input": "mapAB4({\"a\": \"aa\", \"b\": \"bbb\"})"}]}, {"difficulty": 203.0, "summary": "Given a list of non-negative integers, return a list of those numbers except omitting any that end with 9. (Note:  % by 10)", "section": "Functional-2", "solution": [], "url": "/prob/p124510", "title": "no9", "signature": "public List<Integer> no9(List<Integer> nums)", "examples": [{"output": "[1, 2]", "input": "no9([1, 2, 19])"}, {"output": "[3]", "input": "no9([9, 19, 29, 3])"}, {"output": "[1, 2, 3]", "input": "no9([1, 2, 3])"}]}, {"difficulty": 384.0, "summary": "Given a string and a non-empty substring ", "section": "Recursion-1", "solution": ["public int strCount(String str, String sub){\nint sLen = sub.length();\nif(str.length() < sLen)\nreturn 0;\nif(str.substring(0, sLen).equals(sub))\nreturn 1 + strCount(str.substring(sLen), sub);\nreturn strCount(str.substring(1), sub);\n}", "/* Given a string and a non-empty substring sub, compute recursively the \n * number of times that sub appears in the string, without the sub strings \n * overlapping.\n */\npublic int strCount(String str, String sub) {\n    if(str.length() < sub.length())\n        return 0;\n          \n    if(str.substring(0, sub.length()).equals(sub))\n        return 1 + strCount(str.substring(sub.length()), sub);\n                    \n    return strCount(str.substring(1), sub);\n}\n"], "url": "/prob/p186177", "title": "strCount", "signature": "public int strCount(String str, String sub)", "examples": [{"output": "2", "input": "strCount(\"catcowcat\", \"cat\")"}, {"output": "1", "input": "strCount(\"catcowcat\", \"cow\")"}, {"output": "0", "input": "strCount(\"catcowcat\", \"dog\")"}]}, {"difficulty": 421.0, "summary": "Given an array of ints, is it possible to divide the ints into two groups, so that the sum of one group is a multiple of 10, and the sum of the other group is odd. Every int must be in one group or the other. Write a recursive helper method that takes whatever arguments you like, and make the initial call to your recursive helper from splitOdd10(). (No loops needed.)", "section": "Recursion-2", "solution": [["public boolean splitOdd10(int[] nums){", "", "// // recursive helper method"], "/* Given an array of ints, is it possible to divide the ints into two groups, \n * so that the sum of one group is a multiple of 10, and the sum of the other \n * group is odd. Every int must be in one group or the other. Write a \n * recursive helper method that takes whatever arguments you like, and make \n * the initial call to your recursive helper from splitOdd10(). (No loops \n * needed.)\n */\npublic boolean splitOdd10(int[] nums) {\n    return splitOdd10Helper(0, nums, 0, 0);\n}\n\npublic boolean splitOdd10Helper(int start, int[] nums, int mult, int odd) {\n    if(start >= nums.length)\n        return mult % 10 == 0 && odd % 2 == 1;\n            \n    if(splitOdd10Helper(start+1, nums, mult + nums[start], odd))\n        return true;\n                      \n    if(splitOdd10Helper(start+1, nums, mult, odd + nums[start]))\n        return true;\n                                \n    return false;\n}\n"], "url": "/prob/p171660", "title": "splitOdd10", "signature": "public boolean splitOdd10(int[] nums)", "examples": [{"output": "true", "input": "splitOdd10([5, 5, 5])"}, {"output": "false", "input": "splitOdd10([5, 5, 6])"}, {"output": "true", "input": "splitOdd10([5, 5, 6, 1])"}]}, {"difficulty": 163.0, "summary": "Given an array of ints, swap the first and last elements in the array. Return the modified array. The array length will be at least 1.", "section": "Array-1", "solution": ["public int[] swapEnds(int[] nums){\nint temp = nums[0];\nnums[0] = nums[nums.length-1];\nnums[nums.length-1] = temp;\nreturn nums;\n}", "/* Given an array of ints, swap the first and last elements in the array. \n * Return the modified array. The array length will be at least 1.\n */\npublic int[] swapEnds(int[] nums) {\n    int temp = nums[0];\n    nums[0] = nums[nums.length - 1];\n    nums[nums.length - 1] = temp;\n    return nums;\n}\n"], "url": "/prob/p118044", "title": "swapEnds", "signature": "public int[] swapEnds(int[] nums)", "examples": [{"output": "[4, 2, 3, 1]", "input": "swapEnds([1, 2, 3, 4])"}, {"output": "[3, 2, 1]", "input": "swapEnds([1, 2, 3])"}, {"output": "[5, 6, 7, 9, 8]", "input": "swapEnds([8, 6, 7, 9, 5])"}]}, {"difficulty": 221.0, "summary": "Given an array of ints, return true if the array contains no 1's and no 3's.", "section": "Array-2", "solution": ["public boolean lucky13(int[] nums){\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] == 1 || nums[i] == 3)\nreturn false;\n}\nreturn true;\n}", "/* Given an array of ints, return true if the array contains no 1's and \n * no 3's.\n */\npublic boolean lucky13(int[] nums) {\n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 1 || nums[i] == 3)\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p194525", "title": "lucky13", "signature": "public boolean lucky13(int[] nums)", "examples": [{"output": "true", "input": "lucky13([0, 2, 4])"}, {"output": "false", "input": "lucky13([1, 2, 3])"}, {"output": "false", "input": "lucky13([1, 2, 4])"}]}, {"difficulty": 172.0, "summary": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "section": "Array-1", "solution": ["public int[] frontPiece(int[] nums){\nint[] front;\nif(nums.length >= 2)\n{\nfront = new int[2];\nfront[0] = nums[0];\nfront[1] = nums[1];\n}\nelse if(nums.length == 1)\n{\nfront = new int[1];\nfront[0] = nums[0];\n}\nelse\nfront = new int[0];\nreturn front;\n}", "/* Given an int array of any length, return a new array of its first 2 \n * elements. If the array is smaller than length 2, use whatever elements are \n * present.\n */\npublic int[] frontPiece(int[] nums) {\n    int[] arr;\n    if(nums.length < 2)\n        arr = new int[nums.length];\n    else\n        arr = new int[2];\n                  \n    if(nums.length > 0)\n        arr[0] = nums[0];\n                            \n    if(nums.length > 1)\n        arr[1] = nums[1];\n                                    \n    return arr;\n}\n"], "url": "/prob/p142455", "title": "frontPiece", "signature": "public int[] frontPiece(int[] nums)", "examples": [{"output": "[1, 2]", "input": "frontPiece([1, 2, 3])"}, {"output": "[1, 2]", "input": "frontPiece([1, 2])"}, {"output": "[1]", "input": "frontPiece([1])"}]}, {"difficulty": 224.0, "summary": "Given an array of ints, return true if the sequence of numbers 1, 2, 3 appears in the array somewhere.", "section": "Warmup-2", "solution": ["public boolean array123(int[] nums) {\n  // Note: iterate < length-2, so can use i+1 and i+2 in the loop\n  for (int i=0; i < (nums.length-2); i++) {\n    if (nums[i]==1 && nums[i+1]==2 && nums[i+2]==3) return true;\n  }\n  return false;\n}", "public boolean array123( int[] nums ){\n{\nfor ( int i = 0; i < ( nums.length - 2 ); i++ )\n{\nif ( ( nums[i] == 1 ) && ( nums[i + 1] == 2 ) && ( nums[i + 2] == 3 ) )\n{\nreturn true;\n}\n}\nreturn false;\n}", "public boolean array123(int[] nums){\nint current = 1;\nfor(int i = 0; i < nums.length-2; i++)\n{\nif(nums[i] == 1 && nums[i+1] == 2 && nums[i+2])\nreturn true;\n}\nreturn false;\n}", "/* Given an array of ints, return true if .. 1, 2, 3, .. appears in the array \n * somewhere.\n */\npublic boolean array123(int[] nums) {\n    for(int i = 0; i < nums.length - 2; i++) {\n        if(nums[i] == 1 && nums[i+1] == 2 && nums[i+2] == 3)\n            return true;\n    }\n    \n    return false;\n}\n"], "url": "/prob/p136041", "title": "array123", "signature": "public boolean array123(int[] nums)", "examples": [{"output": "true", "input": "array123([1, 1, 2, 3, 1])"}, {"output": "false", "input": "array123([1, 1, 2, 4, 1])"}, {"output": "true", "input": "array123([1, 1, 2, 1, 2, 3])"}]}, {"difficulty": 299.0, "summary": "This is slightly more difficult version of the famous FizzBuzz problem which is sometimes given as a first problem for job interviews. (See also: ", "section": "Array-2", "solution": ["/* This is slightly more difficult version of the famous FizzBuzz problem \n * which is sometimes given as a first problem for job interviews. Consider \n * the series of numbers beginning at start and running up to but not \n * including end, so for example start=1 and end=5 gives the series \n * 1, 2, 3, 4. Return a new String[] array containing the string form of \n * these numbers, except for multiples of 3, use \"Fizz\" instead of the \n * number, for multiples of 5 use \"Buzz\", and for multiples of both 3 and 5 \n * use \"FizzBuzz\". In Java, String.valueOf(xxx) will make the String form of \n * an int or other type. This version is a little more complicated than the \n * usual version since you have to allocate and index into an array instead \n * of just printing, and we vary the start/end instead of just always doing \n * 1..100.\n */\npublic String[] fizzBuzz(int start, int end) {\n    String[] arr = new String[end - start];\n    \n    for(int i = start; i < end; i++) {\n        if(i % 15 == 0) {\n            arr[i - start] = \"FizzBuzz\";\n        } else if(i % 3 == 0) {\n            arr[i - start] = \"Fizz\";\n        } else if(i % 5 == 0) {\n            arr[i - start] = \"Buzz\";\n        } else {\n            arr[i - start] = String.valueOf(i);\n        }\n    }\n                                                      \n    return arr;\n}\n"], "url": "/prob/p153059", "title": "fizzBuzz", "signature": "public String[] fizzBuzz(int start, int end)", "examples": [{"output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"]", "input": "fizzBuzz(1, 6)"}, {"output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\"]", "input": "fizzBuzz(1, 8)"}, {"output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\"]", "input": "fizzBuzz(1, 11)"}]}, {"difficulty": 200.0, "summary": "Given a list of integers, return a list where each integer is multiplied by 2.", "section": "Functional-1", "solution": [], "url": "/prob/p117665", "title": "doubling", "signature": "public List<Integer> doubling(List<Integer> nums)", "examples": [{"output": "[2, 4, 6]", "input": "doubling([1, 2, 3])"}, {"output": "[12, 16, 12, 16, -2]", "input": "doubling([6, 8, 6, 8, -1])"}, {"output": "[]", "input": "doubling([])"}]}, {"difficulty": 157.0, "summary": "Given an array of ints of even length, return a new array length 2 containing the middle two elements from the original array. The original array will be length 2 or more.", "section": "Array-1", "solution": ["public int[] makeMiddle(int[] nums){\nint[] midArr = new int[2];\nint half = nums.length/2;\nmidArr[0] = nums[half-1];\nmidArr[1] = nums[half];\nreturn midArr;\n}", "/* Given an array of ints of even length, return a new array length 2 \n * containing the middle two elements from the original array. The original \n * array will be length 2 or more.\n */\npublic int[] makeMiddle(int[] nums) {\n    return new int[] {nums[nums.length / 2 - 1], nums[nums.length / 2]};\n}\n"], "url": "/prob/p199519", "title": "makeMiddle", "signature": "public int[] makeMiddle(int[] nums)", "examples": [{"output": "[2, 3]", "input": "makeMiddle([1, 2, 3, 4])"}, {"output": "[2, 3]", "input": "makeMiddle([7, 1, 2, 3, 4, 9])"}, {"output": "[1, 2]", "input": "makeMiddle([1, 2])"}]}, {"difficulty": 136.0, "summary": "Given three ints, a b c, return true if it is possible to add two of the ints to get the third.", "section": "Logic-1", "solution": ["public boolean twoAsOne( int a, int b, int c ){\n{\nreturn ( a == b + c ) || ( b == a + c ) || ( c == a + b );\n}", ["public boolean twoAsOne(int a, int b, int c){", "", "", "// Given three ints, a b c, return true if b is greater than a, and c is greater than b.", "// However, with the exception that if \"bOk\" is true, b does not need to be greater than a."], "/* Given three ints, a b c, return true if it is possible to add two of the \n * ints to get the third.\n */\npublic boolean twoAsOne(int a, int b, int c) {\n    return a + b == c || a + c == b || b + c == a;\n}\n"], "url": "/prob/p113261", "title": "twoAsOne", "signature": "public boolean twoAsOne(int a, int b, int c)", "examples": [{"output": "true", "input": "twoAsOne(1, 2, 3)"}, {"output": "true", "input": "twoAsOne(3, 1, 2)"}, {"output": "false", "input": "twoAsOne(3, 2, 2)"}]}, {"difficulty": 181.0, "summary": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the strings are different lengths, omit chars from the longer string so it is the same length as the shorter string. So \"Hello\" and \"Hi\" yield \"loHi\". The strings may be any length.", "section": "String-1", "solution": ["public String minCat(String a, String b) {{\nint minLength = Math.min(a.length(), b.length());\n\nreturn a.substring(a.length() - minLength) + b.substring(b.length() - minLength);\n}", "public String minCat(String a, String b){\nint lenA = a.length();\nint lenB = b.length();\nif(lenA >= lenB)\nreturn (a.substring(lenA-lenB) + b);\nelse\nreturn (a + b.substring(lenB-lenA));\n}", "/* Given two strings, append them together (known as \"concatenation\") and \n * return the result. However, if the strings are different lengths, omit \n * chars from the longer string so it is the same length as the shorter \n * string. So \"Hello\" and \"Hi\" yield \"loHi\". The strings may be any length.\n */\npublic String minCat(String a, String b) {\n    int min = Math.min(a.length(), b.length());\n    \n    return a.substring(a.length() - min) + b.substring(b.length() - min);\n}\n"], "url": "/prob/p105745", "title": "minCat", "signature": "public String minCat(String a, String b)", "examples": [{"output": "\"loHi\"", "input": "minCat(\"Hello\", \"Hi\")"}, {"output": "\"ellojava\"", "input": "minCat(\"Hello\", \"java\")"}, {"output": "\"javaello\"", "input": "minCat(\"java\", \"Hello\")"}]}, {"difficulty": 136.0, "summary": "Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.", "section": "Warmup-1", "solution": ["public String front3(String str) {\n  String front;\n  \n  if (str.length() >= 3) {\n    front = str.substring(0, 3);\n  }\n  else {\n    front = str;\n  }\n\n  return front + front + front;\n}", "public String front3( String str ){\n{\nString front = ( str.length() <= 3 ) ? str : str.substring( 0, 3 );\n\nreturn front + front + front;\n}", "public String front3(String str){\nString front;\nif(str.length() >= 3)\nfront = str.substring(0, 3);\nelse\nfront = str;\nreturn (front + front + front);\n}", "/* Given a string, we'll say that the front is the first 3 chars of the \n * string. If the string length is less than 3, the front is whatever is \n * there. Return a new string which is 3 copies of the front.\n */\npublic String front3(String str) {\n    String front;\n    if(str.length() < 3)\n        front = str;\n    else\n        front = str.substring(0, 3);\n                   \n    return front + front + front;\n}\n"], "url": "/prob/p136351", "title": "front3", "signature": "public String front3(String str)", "examples": [{"output": "\"JavJavJav\"", "input": "front3(\"Java\")"}, {"output": "\"ChoChoCho\"", "input": "front3(\"Chocolate\")"}, {"output": "\"abcabcabc\"", "input": "front3(\"abc\")"}]}, {"difficulty": 118.0, "summary": "Given an array of ints length 3, return an array with the elements \"rotated left\" so {1, 2, 3} yields {2, 3, 1}.", "section": "Array-1", "solution": ["public int[] rotateLeft3(int[] nums){\nint[] rotated = {nums[1], nums[2], nums[0]};\nreturn rotated;\n}", "/* Given an array of ints length 3, return an array with the elements \n * \"rotated left\" so {1, 2, 3} yields {2, 3, 1}.\n */\npublic int[] rotateLeft3(int[] nums) {\n    return new int[] {nums[1], nums[2], nums[0]};\n}\n"], "url": "/prob/p185139", "title": "rotateLeft3", "signature": "public int[] rotateLeft3(int[] nums)", "examples": [{"output": "[2, 3, 1]", "input": "rotateLeft3([1, 2, 3])"}, {"output": "[11, 9, 5]", "input": "rotateLeft3([5, 11, 9])"}, {"output": "[0, 0, 7]", "input": "rotateLeft3([7, 0, 0])"}]}, {"difficulty": 230.1, "summary": "Given a number n, create and return a new string array of length n, containing the strings \"0\", \"1\" \"2\" .. through n-1. N may be 0, in which case just return a length 0 array. Note: String.valueOf(xxx) will make the String form of most types. The syntax to make a new string array is: new String[desired_length] \u00a0(See also: ", "section": "Array-2", "solution": ["/* Given a number n, create and return a new string array of length n, \n * containing the strings \"0\", \"1\" \"2\" .. through n-1. N may be 0, in which \n * case just return a length 0 array.\n */\npublic String[] fizzArray2(int n) {\n    String[] arr = new String[n];\n    \n    for(int i = 0; i < n; i++)\n        arr[i] = String.valueOf(i);\n              \n    return arr;\n}\n"], "url": "/prob/p178353", "title": "fizzArray2", "signature": "public String[] fizzArray2(int n)", "examples": [{"output": "[\"0\", \"1\", \"2\", \"3\"]", "input": "fizzArray2(4)"}, {"output": "[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]", "input": "fizzArray2(10)"}, {"output": "[\"0\", \"1\"]", "input": "fizzArray2(2)"}]}, {"difficulty": 148.0, "summary": "Given an int array length 3, if there is a 2 in the array immediately followed by a 3, set the 3 element to 0. Return the changed array.", "section": "Array-1", "solution": ["public int[] fix23(int[] nums){\nint[] fxArr = {nums[0], nums[1], nums[2]};\nif(nums[0] == 2 && nums[1] == 3)\nfxArr[1] = 0;\nif(nums[1] == 2 && nums[2] == 3)\nfxArr[2] = 0;\nreturn fxArr;\n}", "/* Given an int array length 3, if there is a 2 in the array immediately \n * followed by a 3, set the 3 element to 0. Return the changed array.\n */\npublic int[] fix23(int[] nums) {\n    for(int i = 0; i < nums.length - 1; i++) {\n        if(nums[i] == 2 && nums[i + 1] == 3)\n            nums[i + 1] = 0;\n    }\n                \n    return nums;\n}\n"], "url": "/prob/p120347", "title": "fix23", "signature": "public int[] fix23(int[] nums)", "examples": [{"output": "[1, 2, 0]", "input": "fix23([1, 2, 3])"}, {"output": "[2, 0, 5]", "input": "fix23([2, 3, 5])"}, {"output": "[1, 2, 1]", "input": "fix23([1, 2, 1])"}]}, {"difficulty": 112.0, "summary": "You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday -- on that day, your speed can be 5 higher in all cases.", "section": "Logic-1", "solution": ["public int caughtSpeeding( int speed, boolean isBirthday ){\n{\nint correction = isBirthday ? 5 : 0;\nint correctedSpeed = speed - correction;\n\nif ( correctedSpeed <= 60 )\n{\nreturn 0;\n}\nif ( 61 <= correctedSpeed && correctedSpeed <= 80 )\n{\nreturn 1;\n}\n\nreturn 2;\n}", "public int caughtSpeeding(int speed, boolean isBirthday){\nif(isBirthday)\nspeed -= 5; //  diff limit is higher now\nif(speed <= 60)\nreturn 0;\nelse if(speed <= 80)\nreturn 1;\nelse\nreturn 2;\n}", "/* You are driving a little too fast, and a police officer stops you. Write \n * code to compute the result, encoded as an int value: 0=no ticket, 1=small \n * ticket, 2=big ticket. If speed is 60 or less, the result is 0. If speed is \n * between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the \n * result is 2. Unless it is your birthday -- on that day, your speed can be \n * 5 higher in all cases.\n */\npublic int caughtSpeeding(int speed, boolean isBirthday) {\n    if(isBirthday) {\n        if(speed <= 65) {\n            return 0;\n        } else if(66 <= speed && speed <= 85) {\n            return 1;\n        } else if(86 <=  speed) {\n            return 2;\n        }\n    }\n                                        \n    if(speed <= 60) {\n        return 0;\n    } else if(61 <= speed && speed <= 80) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n"], "url": "/prob/p157733", "title": "caughtSpeeding", "signature": "public int caughtSpeeding(int speed, boolean isBirthday)", "examples": [{"output": "0", "input": "caughtSpeeding(60, false)"}, {"output": "1", "input": "caughtSpeeding(65, false)"}, {"output": "0", "input": "caughtSpeeding(65, true)"}]}, {"difficulty": 203.0, "summary": "Return the number of even ints in the given array. Note: the % \"mod\" operator computes the remainder, e.g. 5 % 2 is 1.", "section": "Array-2", "solution": ["public int countEvens(int[] nums){\nint count = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] % 2 == 0)\ncount++;\n}\nreturn count;\n}", "/* Return the number of even ints in the given array.\n */\npublic int countEvens(int[] nums) {\n    int count = 0;\n    \n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] % 2 == 0)\n            count++;\n    }\n                    \n    return count;\n}\n"], "url": "/prob/p162010", "title": "countEvens", "signature": "public int countEvens(int[] nums)", "examples": [{"output": "3", "input": "countEvens([2, 1, 2, 3, 4])"}, {"output": "3", "input": "countEvens([2, 2, 0])"}, {"output": "0", "input": "countEvens([1, 3, 5])"}]}, {"difficulty": 245.0, "summary": "Given two arrays, A and B, of non-negative int scores. A \"special\" score is one which is a multiple of 10, such as 40 or 90. Return the sum of largest special score in A and the largest special score in B. To practice decomposition, write a separate helper method which finds the largest special score in an array. Write your helper method after your scoresSpecial() method in the JavaBat text area.", "section": "AP-1", "solution": ["/* Given two arrays, A and B, of non-negative int scores. A \"special\" score \n * is one which is a multiple of 10, such as 40 or 90. Return the sum of \n * largest special score in A and the largest special score in B. To practice \n * decomposition, write a separate helper method which finds the largest \n * special score in an array.\n */\npublic int scoresSpecial(int[] a, int[] b) {\n    return largestSpecial(a) + largestSpecial(b);\n}\n\npublic int largestSpecial(int[] a) {\n    int largest = 0;\n      \n    for(int i = 0; i < a.length; i++) {\n        if(a[i] % 10 == 0 && a[i] > largest)\n            largest = a[i];\n    }\n                      \n    return largest;\n}\n"], "url": "/prob/p140485", "title": "scoresSpecial", "signature": "public int scoresSpecial(int[] a, int[] b)", "examples": [{"output": "40", "input": "scoresSpecial([12, 10, 4], [2, 20, 30])"}, {"output": "40", "input": "scoresSpecial([20, 10, 4], [2, 20, 10])"}, {"output": "20", "input": "scoresSpecial([12, 11, 4], [2, 20, 31])"}]}, {"difficulty": 169.0, "summary": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the concatenation creates a double-char, then omit one of the chars, so \"abc\" and \"cat\" yields \"abcat\".", "section": "String-1", "solution": ["public String conCat(String a, String b){\nint lenA = a.length();\nint lenB = b.length();\nif(lenA >= 1 && lenB >= 1)\n{\nif(a.charAt(lenA-1) == b.charAt(0))\nreturn (a + b.substring(1));\nelse\nreturn (a + b);\n}\nreturn (a + b);\n}", "/* Given two strings, append them together (known as \"concatenation\") and \n * return the result. However, if the concatenation creates a double-char, \n * then omit one of the chars, so \"abc\" and \"cat\" yields \"abcat\".\n */\npublic String conCat(String a, String b) {\n    if(a.length() == 0 || b.length() == 0)\n        return a + b;\n          \n    if(a.charAt(a.length() - 1) == b.charAt(0))\n        return a + b.substring(1);\n                    \n    return a + b;\n}\n"], "url": "/prob/p132118", "title": "conCat", "signature": "public String conCat(String a, String b)", "examples": [{"output": "\"abcat\"", "input": "conCat(\"abc\", \"cat\")"}, {"output": "\"dogcat\"", "input": "conCat(\"dog\", \"cat\")"}, {"output": "\"abc\"", "input": "conCat(\"abc\", \"\")"}]}, {"difficulty": 339.0, "summary": "Given a string, compute recursively (no loops) a new string where all appearances of \"pi\" have been replaced by \"3.14\".", "section": "Recursion-1", "solution": ["public String changePi(String str){\nString left;\nif(str.length() < 2)\nreturn str;\nif(str.substring(0, 2).equals(\"pi\"))\nreturn \"3.14\" + changePi(str.substring(2));\nreturn str.charAt(0) + changePi(str.substring(1));\n}", "/* Given a string, compute recursively (no loops) a new string where all \n * appearances of \"pi\" have been replaced by \"3.14\".\n */\npublic String changePi(String str) {\n    if(str.length() <= 1)\n        return str;\n          \n    if(str.substring(0, 2).equals(\"pi\"))\n        return \"3.14\" + changePi(str.substring(2));\n                    \n    return str.charAt(0) + changePi(str.substring(1));\n}\n"], "url": "/prob/p170924", "title": "changePi", "signature": "public String changePi(String str)", "examples": [{"output": "\"x3.14x\"", "input": "changePi(\"xpix\")"}, {"output": "\"3.143.14\"", "input": "changePi(\"pipi\")"}, {"output": "\"3.14p\"", "input": "changePi(\"pip\")"}]}, {"difficulty": 281.0, "summary": "Return an array that contains the exact same numbers as the given array, but rearranged so that all the zeros are grouped at the start of the array. The order of the non-zero numbers does not matter. So {1, 0, 0, 1} becomes {0 ,0, 1, 1}. You may modify and return the given array or make a new array.", "section": "Array-2", "solution": ["public int[] zeroFront(int[] nums){\nint zeroIndex = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] == 0)\n{\nnums[i] = nums[zeroIndex];\nnums[zeroIndex] = 0;\nzeroIndex++;\n}\n}\nreturn nums;\n}", "/* Return an array that contains the exact same numbers as the given array, \n * but rearranged so that all the zeros are grouped at the start of the array. \n * The order of the non-zero numbers does not matter. So {1, 0, 0, 1} becomes \n * {0 ,0, 1, 1}. You may modify and return the given array or make a new array.\n */\npublic int[] zeroFront(int[] nums) {\n    if(nums.length == 0)\n        return nums;\n          \n    int i = 0;\n              \n    while(nums[i] == 0)\n        i++;\n                        \n    for(int j = i + 1; j < nums.length; j++) {\n        if(nums[j] == 0) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n        }\n    }\n                                                              \n    return nums;\n}\n"], "url": "/prob/p193753", "title": "zeroFront", "signature": "public int[] zeroFront(int[] nums)", "examples": [{"output": "[0, 0, 1, 1]", "input": "zeroFront([1, 0, 0, 1])"}, {"output": "[0, 0, 1, 1, 1]", "input": "zeroFront([0, 1, 1, 0, 1])"}, {"output": "[0, 1]", "input": "zeroFront([1, 0])"}]}, {"difficulty": 109.0, "summary": "Given two int values, return their sum. Unless the two values are the same, then return double their sum.", "section": "Warmup-1", "solution": ["public int sumDouble(int a, int b) {\n  // Store the sum in a local variable\n  int sum = a + b;\n  \n  // Double it if a and b are the same\n  if (a == b) {\n    sum = sum * 2;\n  }\n  \n  return sum;\n}", "public int sumDouble( int a, int b ){\n{\nint sum = a + b;\n\nreturn a == b ? 2 * sum : sum;\n}", ["public int sumDouble(int a, int b){", "", "", "// /* Given an int n, return the absolute difference between n and 21,", "// except return double the absolute difference if n is over 21."], "/* Given two int values, return their sum. Unless the two values are the same, \n * then return double their sum.\n */\npublic int sumDouble(int a, int b) {\n    int sum = a + b;\n    if(a == b)\n        return 2 * sum;\n        \n    return sum;\n}\n"], "url": "/prob/p154485", "title": "sumDouble", "signature": "public int sumDouble(int a, int b)", "examples": [{"output": "3", "input": "sumDouble(1, 2)"}, {"output": "5", "input": "sumDouble(3, 2)"}, {"output": "8", "input": "sumDouble(2, 2)"}]}, {"difficulty": 209.0, "summary": "Given a list of strings, return a list of the strings, omitting any string that contains a \"z\". (Note: the str.contains(x) method returns a boolean)", "section": "Functional-2", "solution": [], "url": "/prob/p105671", "title": "noZ", "signature": "public List<String> noZ(List<String> strings)", "examples": [{"output": "[\"aaa\", \"bbb\"]", "input": "noZ([\"aaa\", \"bbb\", \"aza\"])"}, {"output": "[\"hi\"]", "input": "noZ([\"hziz\", \"hzello\", \"hi\"])"}, {"output": "[\"hello\", \"are\"]", "input": "noZ([\"hello\", \"howz\", \"are\", \"youz\"])"}]}, {"difficulty": 203.0, "summary": "We want to make a row of bricks that is ", "section": "Logic-2", "solution": ["public boolean makeBricks(int small, int big, int goal){\nint maxBig = goal/5;\nif(maxBig <= big)\ngoal -= maxBig*5;\nelse\ngoal -= big*5;\nif(goal <= small)\nreturn true;\nreturn false;\n}", "/* We want to make a row of bricks that is goal inches long. We have a number \n * of small bricks (1 inch each) and big bricks (5 inches each). Return true \n * if it is possible to make the goal by choosing from the given bricks.\n */\npublic boolean makeBricks(int small, int big, int goal) {\n    int remainder = goal >= (5 * big) ? goal - (5 * big) : goal % 5;\n    \n    return small >= remainder;\n}\n"], "url": "/prob/p183562", "title": "makeBricks", "signature": "public boolean makeBricks(int small, int big, int goal)", "examples": [{"output": "true", "input": "makeBricks(3, 1, 8)"}, {"output": "false", "input": "makeBricks(3, 1, 9)"}, {"output": "true", "input": "makeBricks(3, 2, 10)"}]}, {"difficulty": 206.0, "summary": "Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front;", "section": "Warmup-2", "solution": ["public String frontTimes(String str, int n) {\n  int frontLen = 3;\n  if (frontLen > str.length()) {\n    frontLen = str.length();\n  }\n  String front = str.substring(0, frontLen);\n  \n  String result = \"\";\n  for (int i=0; i<n; i++) {\n    result = result + front;\n  }\n  return result;\n}", "public String frontTimes( String str, int n ){\n{\nString result = \"\";\nString front = str.length() < 3 ? str : str.substring( 0, 3 );\n\nfor ( int i = 0; i < n; i++ )\n{\nresult += front;\n}\n\nreturn result;\n}", "public String frontTimes(String str, int n){\nint len = str.length();\nStringBuilder stbuilder;\nString front;\nif(len >= 3)\nfront = str.substring(0, 3);\nelse\nfront = str;\nstbuilder = new StringBuilder(len*n);\nfor(int i = 1; i <= n; i++)\nstbuilder.append(front);\nreturn stbuilder.toString();\n}", "/* Given a string and a non-negative int n, we'll say that the front of the \n * string is the first 3 chars, or whatever is there if the string is less \n * than length 3. Return n copies of the front.\n */\npublic String frontTimes(String str, int n) {\n    char[] result;\n    String front;\n      \n    if(str.length() < 3)\n        front = str;\n    else\n        front = str.substring(0, 3);\n                      \n    result = new char[n * front.length()];\n                          \n    int index = 0;\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < front.length(); j++) {\n            result[index] = front.charAt(j);\n            index++;\n        }\n    }\n                                                        \n    return new String(result);\n}\n"], "url": "/prob/p101475", "title": "frontTimes", "signature": "public String frontTimes(String str, int n)", "examples": [{"output": "\"ChoCho\"", "input": "frontTimes(\"Chocolate\", 2)"}, {"output": "\"ChoChoCho\"", "input": "frontTimes(\"Chocolate\", 3)"}, {"output": "\"AbcAbcAbc\"", "input": "frontTimes(\"Abc\", 3)"}]}, {"difficulty": 242.0, "summary": "Given an array of strings, return a new array without the strings that are equal to the target string. One approach is to count the occurrences of the target string, make a new array of the correct length, and then copy over the correct strings.", "section": "AP-1", "solution": ["/* Given an array of strings, return a new array without the strings that are \n * equal to the target string. One approach is to count the occurrences of the \n * target string, make a new array of the correct length, and then copy over \n * the correct strings.\n */\npublic String[] wordsWithout(String[] words, String target) {\n    int count = 0;\n    \n    for(int i = 0; i < words.length; i++) {\n        if(!words[i].equals(target))\n            count++;\n    }\n                    \n    String[] arr = new String[count];\n    int index = 0;\n                          \n    for(int i = 0; index < count; i++) {\n        if(!words[i].equals(target)) {\n            arr[index] = words[i];\n            index++;\n        }\n    }\n                                                    \n    return arr;\n}\n"], "url": "/prob/p121236", "title": "wordsWithout", "signature": "public String[] wordsWithout(String[] words, String target)", "examples": [{"output": "[\"b\", \"c\"]", "input": "wordsWithout([\"a\", \"b\", \"c\", \"a\"], \"a\")"}, {"output": "[\"a\", \"c\", \"a\"]", "input": "wordsWithout([\"a\", \"b\", \"c\", \"a\"], \"b\")"}, {"output": "[\"a\", \"b\", \"a\"]", "input": "wordsWithout([\"a\", \"b\", \"c\", \"a\"], \"c\")"}]}, {"difficulty": 318.0, "summary": "Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).", "section": "Recursion-1", "solution": ["public int sumDigits(int n){\nif(n < 10)\nreturn n;\nreturn sumDigits(n/10) + n%10;\n}", "/* Given a non-negative int n, return the sum of its digits recursively \n * (no loops).\n */\npublic int sumDigits(int n) {\n    if(n == 0)\n        return 0;\n          \n    return n % 10 + sumDigits(n / 10);\n}\n"], "url": "/prob/p163932", "title": "sumDigits", "signature": "public int sumDigits(int n)", "examples": [{"output": "9", "input": "sumDigits(126)"}, {"output": "13", "input": "sumDigits(49)"}, {"output": "3", "input": "sumDigits(12)"}]}, {"difficulty": 193.0, "summary": "Given a string and a second \"word\" string, we'll say that the word matches the string if it appears at the front of the string, except its first char does not need to match exactly. On a match, return the front of the string, or otherwise return the empty string. So, so with the string \"hippo\" the word \"hi\" returns \"hi\" and \"xip\" returns \"hip\". The word will be at least length 1.", "section": "String-1", "solution": ["public String startWord(String str, String word) {{\nString match = word.substring(1);\nString front = str.substring(1, match.length());\n\nif (match.equals(front)) {\nreturn str.substring(0, word.length());\n}\n\nreturn \"\";\n}", "public String startWord(String str, String word){\nint lenStr = str.length();\nint lenWord = word.length();\nString temp;\nif(lenStr >= lenWord)\n{\ntemp = str.substring(1, lenWord);\nif(word.substring(1).equals(temp))\nreturn (str.charAt(0)+temp);\nelse\nreturn \"\";\n}\nelse\nreturn \"\";\n}", "/* Given a string and a second \"word\" string, we'll say that the word matches \n * the string if it appears at the front of the string, except its first char \n * does not need to match exactly. On a match, return the front of the string, \n * or otherwise return the empty string. So, so with the string \"hippo\" the \n * word \"hi\" returns \"hi\" and \"xip\" returns \"hip\". The word will be at least \n * length 1.\n */\npublic String startWord(String str, String word) {\n    if(str.length() >= word.length() && \n        str.substring(1, word.length()).equals(word.substring(1)))\n        return str.substring(0, word.length());\n                  \n    return \"\";\n}\n"], "url": "/prob/p141494", "title": "startWord", "signature": "public String startWord(String str, String word)", "examples": [{"output": "\"hi\"", "input": "startWord(\"hippo\", \"hi\")"}, {"output": "\"hip\"", "input": "startWord(\"hippo\", \"xip\")"}, {"output": "\"h\"", "input": "startWord(\"hippo\", \"i\")"}]}, {"difficulty": 239.0, "summary": "Given an array of ints, return true if the array contains a 2 next to a 2 or a 4 next to a 4, but not both.", "section": "Array-2", "solution": ["public boolean either24(int[] nums){\nint no2pair = 1, no4pair = 1;\nfor(int i = 0; i < nums.length - 1 && (no2pair + no4pair != 0); i++)\n{\nif(nums[i] == 2 && nums[i+1] == 2)\nno2pair = 0;\nelse if(nums[i] == 4 && nums[i+1] == 4)\nno4pair = 0;\n}\nreturn ((no2pair ^ no4pair) == 1);\n}", "/* Given an array of ints, return true if the array contains a 2 next to \n * a 2 or a 4 next to a 4, but not both.\n */\npublic boolean either24(int[] nums) {\n    boolean has22 = false;\n    boolean has44 = false;\n      \n    for(int i = 0; i < nums.length - 1; i++) {\n        if(nums[i] == 2 && nums[i+1] == 2)\n            has22 = true;\n                        \n        if(nums[i] == 4 && nums[i+1] == 4)\n            has44 = true;\n    }\n                                      \n    return has22 != has44;\n}\n"], "url": "/prob/p191878", "title": "either24", "signature": "public boolean either24(int[] nums)", "examples": [{"output": "true", "input": "either24([1, 2, 2])"}, {"output": "true", "input": "either24([4, 4, 1])"}, {"output": "false", "input": "either24([4, 4, 1, 2, 2])"}]}, {"difficulty": 106.0, "summary": "You and your date are trying to get a table at a restaurant. The parameter \"you\" is the stylishness of your clothes, in the range 0..10, and \"date\" is the stylishness of your date's clothes. The result getting the table is encoded as an int value with 0=no, 1=maybe, 2=yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).", "section": "Logic-1", "solution": ["public int dateFashion( int you, int date ){\n{\nif ( you <= 2 || date <= 2 )\n{\nreturn 0;\n}\nif ( you >= 8 || date >= 8 )\n{\nreturn 2;\n}\nreturn 1;\n}", "public int dateFashion(int you, int date){\nif(you <= 2 || date <= 2)\nreturn 0;\nif(you >= 8 || date >= 8)\nreturn 2;\nreturn 1;\n}", "/* You and your date are trying to get a table at a restaurant. The parameter \n * \"you\" is the stylishness of your clothes, in the range 0..10, and \"date\" \n * is the stylishness of your date's clothes. The result getting the table is \n * encoded as an int value with 0=no, 1=maybe, 2=yes. If either of you is \n * very stylish, 8 or more, then the result is 2 (yes). With the exception \n * that if either of you has style of 2 or less, then the result is 0 (no). \n * Otherwise the result is 1 (maybe).\n */\npublic int dateFashion(int you, int date) {\n    if(you <= 2 || date <= 2)\n        return 0;\n          \n    if(you >= 8 || date >= 8)\n        return 2;\n                    \n    return 1;\n}\n"], "url": "/prob/p103360", "title": "dateFashion", "signature": "public int dateFashion(int you, int date)", "examples": [{"output": "2", "input": "dateFashion(5, 10)"}, {"output": "0", "input": "dateFashion(5, 2)"}, {"output": "1", "input": "dateFashion(5, 5)"}]}, {"difficulty": 206.0, "summary": "Given a list of strings, return a list where each string has \"*\" added at its end.", "section": "Functional-1", "solution": [], "url": "/prob/p170181", "title": "addStar", "signature": "public List<String> addStar(List<String> strings)", "examples": [{"output": "[\"a*\", \"bb*\", \"ccc*\"]", "input": "addStar([\"a\", \"bb\", \"ccc\"])"}, {"output": "[\"hello*\", \"there*\"]", "input": "addStar([\"hello\", \"there\"])"}, {"output": "[\"**\"]", "input": "addStar([\"*\"])"}]}, {"difficulty": 221.0, "summary": "Given an array of strings, return a new List (e.g. an ArrayList) where all the strings of the given length are omitted. See wordsWithout() below which is more difficult because it uses arrays.", "section": "AP-1", "solution": ["/* Given an array of strings, return a new List (e.g. an ArrayList) where all \n * the strings of the given length are omitted. See wordsWithout() below \n * which is more difficult because it uses arrays.\n */\npublic List wordsWithoutList(String[] words, int len) {\n    ArrayList<String> list = new ArrayList<String>();\n    \n    for(int i = 0; i < words.length; i++) {\n        if(words[i].length() != len)\n            list.add(words[i]);\n    }\n                    \n    return list;\n}\n"], "url": "/prob/p183407", "title": "wordsWithoutList", "signature": "public List wordsWithoutList(String[] words, int len)", "examples": [{"output": "[\"bb\", \"ccc\"]", "input": "wordsWithoutList([\"a\", \"bb\", \"b\", \"ccc\"], 1)"}, {"output": "[\"a\", \"bb\", \"b\"]", "input": "wordsWithoutList([\"a\", \"bb\", \"b\", \"ccc\"], 3)"}, {"output": "[\"a\", \"bb\", \"b\", \"ccc\"]", "input": "wordsWithoutList([\"a\", \"bb\", \"b\", \"ccc\"], 4)"}]}, {"difficulty": 160.0, "summary": "Given a string, if the string \"del\" appears starting at index 1, return a string where that \"del\" has been deleted. Otherwise, return the string unchanged.", "section": "Warmup-1", "solution": ["public String delDel(String str) {\n  if (str.length()>=4 && str.substring(1, 4).equals(\"del\")) {\n    // First char + rest of string starting at 4\n    return str.substring(0, 1) + str.substring(4);\n  }\n  // Otherwise return the original string.\n  return str;\n}", "public String delDel(String str){\nif(str.indexOf(\"del\") == 1)\nreturn (str.charAt(0) + str.substring(4, str.length()));\nelse\nreturn str;\n}", "/* Given a string, if the string \"del\" appears starting at index 1, return a \n * string where that \"del\" has been deleted. Otherwise, return the string \n * unchanged.\n */\npublic String delDel(String str) {\n    if(str.length() >= 4 && str.substring(1, 4).equals(\"del\"))\n        return str.charAt(0) + str.substring(4);\n           \n    return str;\n}\n"], "url": "/prob/p100905", "title": "delDel", "signature": "public String delDel(String str)", "examples": [{"output": "\"abc\"", "input": "delDel(\"adelbc\")"}, {"output": "\"aHello\"", "input": "delDel(\"adelHello\")"}, {"output": "\"adedbc\"", "input": "delDel(\"adedbc\")"}]}, {"difficulty": 380.0, "summary": "We'll say that 2 strings \"match\" if they are non-empty and their first chars are the same. Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier string in the array, swap the 2 strings in the array. A particular first char can only cause 1 swap, so once a char has caused a swap, its later swaps are disabled. Using a map, this can be solved making just one pass over the array. More difficult than it looks.", "section": "Map-2", "solution": [], "url": "/prob/p150113", "title": "firstSwap", "signature": "public String[] firstSwap(String[] strings)", "examples": [{"output": "[\"ac\", \"ab\"]", "input": "firstSwap([\"ab\", \"ac\"])"}, {"output": "[\"ay\", \"by\", \"cy\", \"cx\", \"bx\", \"ax\", \"aaa\", \"azz\"]", "input": "firstSwap([\"ax\", \"bx\", \"cx\", \"cy\", \"by\", \"ay\", \"aaa\", \"azz\"])"}, {"output": "[\"ay\", \"by\", \"ax\", \"bx\", \"ai\", \"aj\", \"bx\", \"by\"]", "input": "firstSwap([\"ax\", \"bx\", \"ay\", \"by\", \"ai\", \"aj\", \"bx\", \"by\"])"}]}, {"difficulty": 196.0, "summary": "Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged.", "section": "String-1", "solution": ["public String withoutX(String str){\nint len = str.length();\nif(len >= 2)\n{\nchar ch = str.charAt(0);\nStringBuilder stbuild = new StringBuilder(len);\nif(ch != 'x')\nstbuild.append(ch);\nstbuild.append(str.substring(1, len-1));\nch = str.charAt(len-1);\nif(ch != 'x')\nstbuild.append(ch);\nreturn stbuild.toString();\n}\nelse if(len == 1 && str.charAt(0) == 'x')\nreturn \"\";\nelse\nreturn str;\n}", "/* Given a string, if the first or last chars are 'x', return the string \n * without those 'x' chars, and otherwise return the string unchanged.\n */\npublic String withoutX(String str) {\n    int begin = 0;\n    int end = str.length();\n      \n    if(str.length() > 0 && str.charAt(0) == 'x')\n        begin = 1;\n                \n    if(str.length() > 1 && str.charAt(str.length() - 1) == 'x')\n        end--;\n                          \n    return str.substring(begin, end);\n}\n"], "url": "/prob/p151940", "title": "withoutX", "signature": "public String withoutX(String str)", "examples": [{"output": "\"Hi\"", "input": "withoutX(\"xHix\")"}, {"output": "\"Hi\"", "input": "withoutX(\"xHi\")"}, {"output": "\"Hxi\"", "input": "withoutX(\"Hxix\")"}]}, {"difficulty": 145.0, "summary": "Given three ints, a b c, return true if two or more of them have the same rightmost digit. The ints are non-negative. Note: the % \"mod\" operator computes the remainder, e.g. 17 % 10 is 7.", "section": "Logic-1", "solution": ["public boolean lastDigit( int a, int b, int c ){\n{\nint aLastDigit = a % 10;\nint bLastDigit = b % 10;\nint cLastDigit = c % 10;\n\nreturn aLastDigit == bLastDigit || bLastDigit == cLastDigit || aLastDigit == cLastDigit;\n}", "public boolean lastDigit(int a, int b, int c){\nint bD = b % 10;\nint cD = c % 10;\nif(aD == bD)\nreturn true;\nif(aD == cD)\nreturn true;\nreturn (bD == cD);\n}", "/* Given three ints, a b c, return true if two or more of them have the same \n * rightmost digit. The ints are non-negative.\n */\npublic boolean lastDigit(int a, int b, int c) {\n    return (a % 10 == b % 10) || (a % 10 == c % 10) || (b % 10 == c % 10);\n}\n"], "url": "/prob/p169213", "title": "lastDigit", "signature": "public boolean lastDigit(int a, int b, int c)", "examples": [{"output": "true", "input": "lastDigit(23, 19, 13)"}, {"output": "false", "input": "lastDigit(23, 19, 12)"}, {"output": "true", "input": "lastDigit(23, 19, 3)"}]}, {"difficulty": 245.0, "summary": "Given an array of ints, return true if it contains a 2, 7, 1 pattern: a value, followed by the value plus 5, followed by the value minus 1. Additionally the 271 counts even if the \"1\" differs by 2 or less from the correct value.", "section": "Warmup-2", "solution": ["public boolean has271(int[] nums) {\n  // Iterate < length-2, so can use i+1 and i+2 in the loop.\n  // Return true immediately when seeing 271.\n  for (int i=0; i < (nums.length-2); i++) {\n    int val = nums[i];\n    if (nums[i+1] == (val+5) &&              // the \"7\" check\n      Math.abs(nums[i+2] - (val-1)) <= 2) {  // the \"1\" check\n        return true;\n    }\n  }\n  \n  // If we get here ... none found.\n  return false;\n}", "public boolean has271( int[] nums ){\n{\nfor ( int i = 0; i < nums.length - 2; i++ )\n{\nif ( ( nums[i] + 5 == nums[i + 1] ) && Math.abs( nums[i + 2] - ( nums[i] - 1 ) ) <= 2 )\n{\nreturn true;\n}\n}\n\nreturn false;\n}", "public boolean has271(int[] nums){\nint temp;\nfor(int i = 0; i < nums.length - 2; i++)\n{\nif(nums[i]+5 == nums[i+1])\n{\ntemp = nums[i] - nums[i+2];\nif(temp <= 3 && temp >= -1)\nreturn true;\n}\n}\nreturn false;\n}", "/* Given an array of ints, return true if it contains a 2, 7, 1 pattern -- \n * a value, followed by the value plus 5, followed by the value minus 1. \n * Additionally the 271 counts even if the \"1\" differs by 2 or less from the \n * correct value.\n */\npublic boolean has271(int[] nums) {\n    for(int i = 0; i < nums.length - 2; i++) {\n        if((nums[i+1] == nums[i] + 5) && \n            (Math.abs(nums[i+2] - (nums[i] - 1)) <= 2))\n            return true;\n    }\n                \n    return false;\n}\n"], "url": "/prob/p167430", "title": "has271", "signature": "public boolean has271(int[] nums)", "examples": [{"output": "true", "input": "has271([1, 2, 7, 1])"}, {"output": "false", "input": "has271([1, 2, 8, 1])"}, {"output": "true", "input": "has271([2, 7, 1])"}]}, {"difficulty": 106.0, "summary": "Given an array of ints, return true if the array is length 1 or more, and the first element and the last element are equal.", "section": "Array-1", "solution": [["public boolean sameFirstLast(int[] nums){", "", "// Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}."], "/* Given an array of ints, return true if the array is length 1 or more, and \n * the first element and the last element are equal.\n */\npublic boolean sameFirstLast(int[] nums) {\n    return nums.length > 0 && nums[0] == nums[nums.length - 1];\n}\n"], "url": "/prob/p118976", "title": "sameFirstLast", "signature": "public boolean sameFirstLast(int[] nums)", "examples": [{"output": "false", "input": "sameFirstLast([1, 2, 3])"}, {"output": "true", "input": "sameFirstLast([1, 2, 3, 1])"}, {"output": "true", "input": "sameFirstLast([1, 2, 1])"}]}, {"difficulty": 303.0, "summary": "Consider the leftmost and righmost appearances of some value in an array. We'll say that the \"span\" is the number of elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.)", "section": "Array-3", "solution": ["public int maxSpan(int[] nums){\nint maxSpan = 0;\nint span;\nint j;\nfor(int i = 0; i < nums.length; i++)\n{\nfor(j = nums.length - 1; nums[i] != nums[j]; j--);\nspan = 1 + j - i;\nif(span > maxSpan)\nmaxSpan = span;\n}\nreturn maxSpan;\n}", "/* Consider the leftmost and righmost appearances of some value in an array. \n * We'll say that the \"span\" is the number of elements between the two \n * inclusive. A single value has a span of 1. Returns the largest span found \n * in the given array. (Efficiency is not a priority.)\n */\npublic int maxSpan(int[] nums) {\n    int max = 0;\n    \n    for(int i = 0; i < nums.length; i++) {\n        int j = nums.length - 1;\n              \n        while(nums[i] != nums[j])\n            j--;\n                              \n        int span = j - i + 1;\n                                      \n        if(span > max)\n            max = span;\n    }\n                                                    \n    return max;\n}\n"], "url": "/prob/p189576", "title": "maxSpan", "signature": "public int maxSpan(int[] nums)", "examples": [{"output": "4", "input": "maxSpan([1, 2, 1, 1, 3])"}, {"output": "6", "input": "maxSpan([1, 4, 2, 1, 4, 1, 4])"}, {"output": "6", "input": "maxSpan([1, 4, 2, 1, 4, 4, 4])"}]}, {"difficulty": 221.0, "summary": "Given an array of ints, return true if one of the first 4 elements in the array is a 9. The array length may be less than 4.", "section": "Warmup-2", "solution": ["public boolean arrayFront9(int[] nums) {\n  // First figure the end for the loop\n  int end = nums.length;\n  if (end > 4) end = 4;\n  \n  for (int i=0; i<end; i++) {\n    if (nums[i] == 9) return true;\n  }\n  \n  return false;\n}", "public boolean arrayFront9( int[] nums ){\n{\nint len = nums.length > 4 ? 4 : nums.length;\n\nfor ( int i = 0; i < len; i++ )\n{\nif ( nums[i] == 9 )\n{\nreturn true;\n}\n}\n\nreturn false;\n}", "public boolean arrayFront9(int[] nums){\nint len = nums.length;\nint count = 0;\nif(len > 4)\nlen = 4;\nfor(int i = 0; i < len; i++)\n{\nif(nums[i] == 9)\nreturn true;\n}\nreturn false;\n}", "/* Given an array of ints, return true if one of the first 4 elements in the \n * array is a 9. The array length may be less than 4.\n */\npublic boolean arrayFront9(int[] nums) {\n    int i = 0;\n    \n    while(i < nums.length && i < 4) {\n        if(nums[i] == 9)\n            return true;\n                      \n        i++;\n    }\n                              \n    return false;\n}\n"], "url": "/prob/p186031", "title": "arrayFront9", "signature": "public boolean arrayFront9(int[] nums)", "examples": [{"output": "true", "input": "arrayFront9([1, 2, 9, 3, 4])"}, {"output": "false", "input": "arrayFront9([1, 2, 3, 4, 9])"}, {"output": "false", "input": "arrayFront9([1, 2, 3, 4, 5])"}]}, {"difficulty": 166.0, "summary": "Given two ints, each in the range 10..99, return true if there is a digit that appears in both numbers, such as the 2 in 12 and 23. (Note: division, e.g. n/10, gives the left digit while the % \"mod\" n%10 gives the right digit.)", "section": "Logic-1", "solution": ["public boolean shareDigit( int a, int b ){\n{\nint aFirstDigit = a / 10;\nint aLastDigit = a % 10;\nint bFirstDigit = b / 10;\nint bLastDigit = b % 10;\n\nreturn aFirstDigit == bFirstDigit ||\naFirstDigit == bLastDigit ||\naLastDigit == bFirstDigit ||\naLastDigit == bLastDigit;\n}", "public boolean shareDigit(int a, int b){\nint aDigit = a%10;\nint bDigit = b%10;\na /= 10;\nb /= 10;\nreturn (a == b || a == bDigit || aDigit == b || aDigit == bDigit);\n}", "/* Given two ints, each in the range 10..99, return true if there is a digit \n * that appears in both numbers, such as the 2 in 12 and 23.\n */\npublic boolean shareDigit(int a, int b) {\n    int al = a / 10;\n    int ar = a % 10;\n    int bl = b / 10;\n    int br = b % 10;\n          \n    return al == bl || al == br || ar == bl || ar == br;\n}\n"], "url": "/prob/p153748", "title": "shareDigit", "signature": "public boolean shareDigit(int a, int b)", "examples": [{"output": "true", "input": "shareDigit(12, 23)"}, {"output": "false", "input": "shareDigit(12, 43)"}, {"output": "false", "input": "shareDigit(12, 44)"}]}, {"difficulty": 320.0, "summary": "Given an array of non-empty strings, create and return a Map<String, String> as follows: for each string add its first character as a key with its last character as the value.", "section": "Map-2", "solution": [], "url": "/prob/p126332", "title": "pairs", "signature": "public Map<String, String> pairs(String[] strings)", "examples": [{"output": "{\"b\": \"g\", \"c\": \"e\"}", "input": "pairs([\"code\", \"bug\"])"}, {"output": "{\"m\": \"n\"}", "input": "pairs([\"man\", \"moon\", \"main\"])"}, {"output": "{\"g\": \"d\", \"m\": \"n\", \"n\": \"t\"}", "input": "pairs([\"man\", \"moon\", \"good\", \"night\"])"}]}, {"difficulty": 406.0, "summary": "Given an array of ints, is it possible to choose a group of some of the ints, beginning at the start index, such that the group sums to the given target? However, with the additional constraint that all 6's must be chosen. (No loops needed.)", "section": "Recursion-2", "solution": ["public boolean groupSum6(int start, int[] nums, int target){\nif(start == nums.length)\n{\nif(target == 0)\nreturn true;\nreturn false;\n}\nif(nums[start] == 6)\nreturn groupSum6(start + 1, nums, target - nums[start]);\nif(groupSum6(start + 1, nums, target - nums[start]))\nreturn true;\nreturn groupSum6(start + 1, nums, target);\n}", "/* Given an array of ints, is it possible to choose a group of some of the \n * ints, beginning at the start index, such that the group sums to the given \n * target? However, with the additional constraint that all 6's must be \n * chosen. (No loops needed.)\n */\npublic boolean groupSum6(int start, int[] nums, int target) {\n    if(start >= nums.length)\n        return target == 0;\n          \n    if(nums[start] == 6)\n        return groupSum6(start+1, nums, target - 6);\n                    \n    if(groupSum6(start+1, nums, target - nums[start]))\n        return true;\n                              \n    if(groupSum6(start+1, nums, target))\n        return true;\n                                        \n    return false;\n}\n"], "url": "/prob/p199368", "title": "groupSum6", "signature": "public boolean groupSum6(int start, int[] nums, int target)", "examples": [{"output": "true", "input": "groupSum6(0, [5, 6, 2], 8)"}, {"output": "false", "input": "groupSum6(0, [5, 6, 2], 9)"}, {"output": "false", "input": "groupSum6(0, [5, 6, 2], 7)"}]}, {"difficulty": 169.0, "summary": "Given three int values, a b c, return the largest.", "section": "Warmup-1", "solution": ["public int intMax(int a, int b, int c) {\n  int max;\n  \n  // First check between a and b\n  if (a > b) {\n    max = a;\n  } else {\n    max = b;\n  }\n  \n  // Now check between max and c\n  if (c > max) {\n    max = c;\n  }\n  \n  return max;\n  \n  // Could use the built in Math.max(x, y) function which selects the larger\n  // of two values.\n}", "public int intMax(int a, int b, int c){\nint max = a;\nif(b > max)\nmax = b;\nif (c > max)\nmax = c;\nreturn max;\n}", "/* Given three int values, a b c, return the largest.\n */\npublic int intMax(int a, int b, int c) {\n    int largest = a;\n    \n    if(b > largest)\n        largest = b;\n              \n    if(c > largest)\n        largest = c;\n                        \n    return largest;\n}\n"], "url": "/prob/p101887", "title": "intMax", "signature": "public int intMax(int a, int b, int c)", "examples": [{"output": "3", "input": "intMax(1, 2, 3)"}, {"output": "3", "input": "intMax(1, 3, 2)"}, {"output": "3", "input": "intMax(3, 2, 1)"}]}, {"difficulty": 345.0, "summary": "Given an array of ints, compute recursively if the array contains a 6. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.", "section": "Recursion-1", "solution": ["public boolean array6(int[] nums, int index){\nif(index == nums.length)\nreturn false;\nif(nums[index] == 6)\nreturn true;\nreturn array6(nums, index + 1);\n}", "/* Given an array of ints, compute recursively if the array contains a 6. \n * We'll use the convention of considering only the part of the array that \n * begins at the given index. In this way, a recursive call can pass index+1 \n * to move down the array. The initial call will pass in index as 0.\n */\npublic boolean array6(int[] nums, int index) {\n    if(index >= nums.length)\n        return false;\n          \n    return nums[index] == 6 || array6(nums, index + 1);\n}\n"], "url": "/prob/p108997", "title": "array6", "signature": "public boolean array6(int[] nums, int index)", "examples": [{"output": "true", "input": "array6([1, 6, 4], 0)"}, {"output": "false", "input": "array6([1, 4], 0)"}, {"output": "true", "input": "array6([6], 0)"}]}, {"difficulty": 233.0, "summary": "Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 ... so \"kittens\" yields \"kien\".", "section": "Warmup-2", "solution": ["public String altPairs(String str) {\n  String result = \"\";\n  \n  // Run i by 4 to hit 0, 4, 8, ...\n  for (int i=0; i<str.length(); i += 4) {\n    // Append the chars between i and i+2\n    int end = i + 2;\n    if (end > str.length()) {\n      end = str.length();\n    }\n    result = result + str.substring(i, end);\n  }\n  \n  return result;\n}", "public String altPairs( String str ){\n{\nString result = \"\";\n\nfor ( int i = 0; i < str.length(); i += 4 )\n{\nresult += str.charAt( i );\nif ( i + 1 < str.length() )\n{\nresult += str.charAt( i + 1 );\n}\n}\n\nreturn result;\n}", "public String altPairs(String str){\nint len = str.length();\nif(len >= 3)\n{\nStringBuilder stbuild = new StringBuilder();\nfor(int i = 0; i < len; i += 4)\n{\nstbuild.append(str.charAt(i));\nif(i+1 < len)\nstbuild.append(str.charAt(i+1));\n}\nreturn stbuild.toString();\n}\nelse\nreturn str;\n}", "/* Given a string, return a string made of the chars at indexes \n * 0,1, 4,5, 8,9 ... so \"kittens\" yields \"kien\".\n */\npublic String altPairs(String str) {\n    char[] result = new char[str.length()];\n    int count = 0;\n      \n    int i = 0;\n    int inc = 1;\n    while(i < str.length()) {\n        result[count] = str.charAt(i);\n        count++;\n        i += inc;\n                            \n        if(inc == 1)\n            inc = 3;\n        else\n            inc = 1;\n    }\n                                                    \n    return new String(result, 0, count);\n}\n"], "url": "/prob/p121596", "title": "altPairs", "signature": "public String altPairs(String str)", "examples": [{"output": "\"kien\"", "input": "altPairs(\"kitten\")"}, {"output": "\"Chole\"", "input": "altPairs(\"Chocolate\")"}, {"output": "\"Congrr\"", "input": "altPairs(\"CodingHorror\")"}]}, {"difficulty": 265.0, "summary": "Given ", "section": "Array-2", "solution": ["/* Given start and end numbers, return a new array containing the sequence of \n * integers from start up to but not including end, so start=5 and end=10 \n * yields {5, 6, 7, 8, 9}. The end number will be greater or equal to the \n * start number. Note that a length-0 array is valid.\n */\npublic int[] fizzArray3(int start, int end) {\n    int[] arr = new int[end - start];\n    \n    for(int i = start; i < end; i++)\n        arr[i - start] = i;\n              \n    return arr;\n}\n"], "url": "/prob/p142539", "title": "fizzArray3", "signature": "public int[] fizzArray3(int start, int end)", "examples": [{"output": "[5, 6, 7, 8, 9]", "input": "fizzArray3(5, 10)"}, {"output": "[11, 12, 13, 14, 15, 16, 17]", "input": "fizzArray3(11, 18)"}, {"output": "[1, 2]", "input": "fizzArray3(1, 3)"}]}, {"difficulty": 239.0, "summary": "The \"key\" array is an array containing the correct answers to an exam, like {\"a\", \"a\", \"b\", \"b\"}. the \"answers\" array contains a student's answers, with \"?\" representing a question left blank. The two arrays are not empty and are the same length. Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer.", "section": "AP-1", "solution": ["/* The \"key\" array is an array containing the correct answers to an exam, \n * like {\"a\", \"a\", \"b\", \"b\"}. the \"answers\" array contains a student's \n * answers, with \"?\" representing a question left blank. The two arrays are \n * not empty and are the same length. Return the score for this array of \n * answers, giving +4 for each correct answer, -1 for each incorrect answer, \n * and +0 for each blank answer.\n */\npublic int scoreUp(String[] key, String[] answers) {\n    int score = 0;\n    \n    for(int i = 0; i < key.length; i++) {\n        if(key[i].charAt(0) == answers[i].charAt(0)) {\n            score += 4;\n        } else if(answers[i].charAt(0) != '?') {\n            score -= 1;\n        }\n    }\n                                  \n    return score;\n}\n"], "url": "/prob/p180365", "title": "scoreUp", "signature": "public int scoreUp(String[] key, String[] answers)", "examples": [{"output": "6", "input": "scoreUp([\"a\", \"a\", \"b\", \"b\"], [\"a\", \"c\", \"b\", \"c\"])"}, {"output": "11", "input": "scoreUp([\"a\", \"a\", \"b\", \"b\"], [\"a\", \"a\", \"b\", \"c\"])"}, {"output": "16", "input": "scoreUp([\"a\", \"a\", \"b\", \"b\"], [\"a\", \"a\", \"b\", \"b\"])"}]}, {"difficulty": 124.0, "summary": "Given an array of ints length 3, figure out which is larger, the first or last element in the array, and set all the other elements to be that value. Return the changed array.", "section": "Array-1", "solution": ["public int[] maxEnd3(int[] nums){\nint[] maxVal = new int[3];\nmaxVal[0] = nums[0];\nif(nums[2] >= maxVal[0])\nmaxVal[0] = nums[2];\nmaxVal[1] = maxVal[0];\nmaxVal[2] = maxVal[0];\nreturn maxVal;\n}", "/* Given an array of ints length 3, figure out which is larger between the \n * first and last elements in the array, and set all the other elements to be \n * that value. Return the changed array.\n */\npublic int[] maxEnd3(int[] nums) {\n    int max = nums[0] > nums[2] ? nums[0] : nums[2];\n    \n    nums[0] = max;\n    nums[1] = max;\n    nums[2] = max;\n            \n    return nums;\n}\n"], "url": "/prob/p146256", "title": "maxEnd3", "signature": "public int[] maxEnd3(int[] nums)", "examples": [{"output": "[3, 3, 3]", "input": "maxEnd3([1, 2, 3])"}, {"output": "[11, 11, 11]", "input": "maxEnd3([11, 5, 9])"}, {"output": "[3, 3, 3]", "input": "maxEnd3([2, 11, 3])"}]}, {"difficulty": 209.0, "summary": "Given a string, return a new string made of every other char starting with the first, so \"Hello\" yields \"Hlo\".", "section": "Warmup-2", "solution": ["public String stringBits(String str) {\n  String result = \"\";\n  // Note: the loop increments i by 2\n  for (int i=0; i<str.length(); i+=2) {\n    result = result + str.substring(i, i+1);\n    // Alternately could use str.charAt(i)\n  }\n  return result;\n}", "public String stringBits( String str ){\n{\nString result = \"\";\n\nfor ( int i = 0; i < str.length(); i += 2 )\n{\nresult = result + str.charAt( i );\n}\n\nreturn result;\n}", "public String stringBits(String str){\nint len = str.length();\nStringBuilder stbuild = new StringBuilder(len+1);\nfor(int i = 0; i < len; i += 2)\nstbuild.append(str.charAt(i));\nreturn stbuild.toString();\n}", "/* Given a string, return a new string made of every other char starting with \n * the first, so \"Hello\" yields \"Hlo\".\n */\npublic String stringBits(String str) {\n    int size = (int) Math.ceil((double) str.length() / 2);\n    char[] result = new char[size];\n      \n    int index = 0;\n    for(int i = 0; i < str.length(); i += 2) {\n        result[index] = str.charAt(i);\n        index++;\n    }\n                      \n    return new String(result);\n}\n"], "url": "/prob/p165666", "title": "stringBits", "signature": "public String stringBits(String str)", "examples": [{"output": "\"Hlo\"", "input": "stringBits(\"Hello\")"}, {"output": "\"H\"", "input": "stringBits(\"Hi\")"}, {"output": "\"Hello\"", "input": "stringBits(\"Heeololeo\")"}]}, {"difficulty": 227.0, "summary": "Given an array of ints, return true if the number of 1's is greater than the number of 4's", "section": "Array-2", "solution": ["public boolean more14(int[] nums){\nint balance = 0;\nfor(int i = 0; i < nums.length; i++)\n{\nif(nums[i] == 1)\nbalance++;\nelse if(nums[i] == 4)\nbalance--;\n}\nreturn (balance > 0);\n}", "/* Given an array of ints, return true if the number of 1's is greater than \n * the number of 4's\n */\npublic boolean more14(int[] nums) {\n    int count1 = 0;\n    int count4 = 0;\n      \n    for(int i = 0; i < nums.length; i++) {\n        if(nums[i] == 1)\n            count1++;\n                        \n        if(nums[i] == 4)\n            count4++;\n    }\n                                      \n    return count1 > count4;\n}\n"], "url": "/prob/p104627", "title": "more14", "signature": "public boolean more14(int[] nums)", "examples": [{"output": "true", "input": "more14([1, 4, 1])"}, {"output": "false", "input": "more14([1, 4, 1, 4])"}, {"output": "true", "input": "more14([1, 1])"}]}, {"difficulty": 207.0, "summary": "Count the number of \"xx\" in the given string. We'll say that overlapping is allowed, so \"xxx\" contains 2 \"xx\".", "section": "Warmup-2", "solution": ["int countXX(String str) {\n  int count = 0;\n  for (int i = 0; i < str.length()-1; i++) {\n    if (str.substring(i, i+2).equals(\"xx\")) count++;\n  }\n  return count;\n}\n\n// Solution notes: the loop is shortened to end at str.length()-1\n// so we can pull out a length 2 substring without going out of bounds.\n// Remember to use equals() to compare strings, not ==.", "public int countXX( String str ){\n{\nint count = 0;\n\nfor ( int i = str.indexOf( \"xx\" ); i != -1; i = str.indexOf( \"xx\", i + 1 ) )\n{\ncount++;\n}\n\nreturn count;\n}", "/* Count the number of \"xx\" in the given string. We'll say that overlapping is \n * allowed, so \"xxx\" contains 2 \"xx\".\n */\nint countXX(String str) {\n    int count = 0;\n    for(int i = 0; i < str.length() - 1; i++) {\n        if(str.substring(i, i + 2).equals(\"xx\"))\n            count++;\n    }\n    return count;\n}\n"], "url": "/prob/p194667", "title": "countXX", "signature": "int countXX(String str)", "examples": [{"output": "1", "input": "countXX(\"abcxx\")"}, {"output": "2", "input": "countXX(\"xxx\")"}, {"output": "3", "input": "countXX(\"xxxx\")"}]}, {"difficulty": 203.0, "summary": "Given an array of scores, return true if each score is equal or greater than the one before. The array will be length 2 or more.", "section": "AP-1", "solution": ["public boolean scoresIncreasing( int[] scores ){\n{\nfor ( int i = 0; i < scores.length - 1; i++ )\n{\nif ( scores[i + 1] < scores[i] )\n{\nreturn false;\n}\n}\n\nreturn true;\n}", "/* Given an array of scores, return true if each score is equal or greater \n * than the one before. The array will be length 2 or more.\n */\npublic boolean scoresIncreasing(int[] scores) {\n    for(int i = 1; i < scores.length; i++) {\n        if(scores[i] < scores[i-1])\n            return false;\n    }\n                \n    return true;\n}\n"], "url": "/prob/p146974", "title": "scoresIncreasing", "signature": "public boolean scoresIncreasing(int[] scores)", "examples": [{"output": "true", "input": "scoresIncreasing([1, 3, 4])"}, {"output": "false", "input": "scoresIncreasing([1, 3, 2])"}, {"output": "true", "input": "scoresIncreasing([1, 1, 4])"}]}, {"difficulty": 127.0, "summary": "Given 2 ints, a and b, return their sum. However, \"teen\" values in the range 13..19 inclusive, are extra lucky. So if either value is a teen, just return 19.", "section": "Logic-1", "solution": ["public int teenSum( int a, int b ){\n{\nreturn ( 13 <= a && a <= 19 ) || ( 13 <= b && b <= 19 ) ? 19 : a + b;\n}", "public int teenSum(int a, int b){\nif(a >= 13 && a <= 19 || b >= 13 && b <= 19)\nreturn 19;\nreturn (a + b);\n}", "/* Given 2 ints, a and b, return their sum. However, \"teen\" values in the \n * range 13..19 inclusive, are extra lucky. So if either value is a teen, \n * just return 19.\n */\npublic int teenSum(int a, int b) {\n    if((13 <= a && a <= 19) || (13 <= b && b <= 19))\n        return 19;\n          \n    return a + b;\n}\n"], "url": "/prob/p178728", "title": "teenSum", "signature": "public int teenSum(int a, int b)", "examples": [{"output": "7", "input": "teenSum(3, 4)"}, {"output": "19", "input": "teenSum(10, 13)"}, {"output": "19", "input": "teenSum(13, 2)"}]}, {"difficulty": 209.0, "summary": "Return the \"centered\" average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array is length 3 or more.", "section": "Array-2", "solution": ["public int centeredAverage(int[] nums){\nint max = nums[0];\nint min = nums[0];\nint sum = nums[0];\nfor(int i = 1; i < nums.length; i++)\n{\nsum  += nums[i];\nif(nums[i] > max)\nmax = nums[i];\nelse if(nums[i] < min)\nmin = nums[i];\n}\nreturn (sum-max-min) / (nums.length - 2);\n}", "/* Return the \"centered\" average of an array of ints, which we'll say is the \n * mean average of the values, except ignoring the largest and smallest \n * values in the array. If there are multiple copies of the smallest value, \n * ignore just one copy, and likewise for the largest value. Use int division \n * to produce the final average. You may assume that the array is length 3 \n * or more.\n */\npublic int centeredAverage(int[] nums) {\n    int sum = 0;\n    int min = nums[0];\n    int max = nums[0];\n         \n    for(int i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        min = Math.min(min, nums[i]);\n        max = Math.max(max, nums[i]);\n    }\n                           \n    return (sum - min - max) / (nums.length - 2);\n}\n"], "url": "/prob/p136585", "title": "centeredAverage", "signature": "public int centeredAverage(int[] nums)", "examples": [{"output": "3", "input": "centeredAverage([1, 2, 3, 4, 100])"}, {"output": "5", "input": "centeredAverage([1, 1, 5, 5, 10, 8, 7])"}, {"output": "-3", "input": "centeredAverage([-10, -4, -2, -4, -2, 0])"}]}, {"difficulty": 366.0, "summary": "Count recursively the total number of \"abc\" and \"aba\" substrings that appear in the given string.", "section": "Recursion-1", "solution": ["public int countAbc(String str){\nString left;\nif(str.length() < 3)\nreturn 0;\nleft = str.substring(0, 3);\nif(left.equals(\"abc\"))\nreturn 1 + countAbc(str.substring(3));\nif(left.equals(\"aba\"))\nreturn 1 + countAbc(str.substring(2));\nreturn countAbc(str.substring(1));\n}", "/* Count recursively the total number of \"abc\" and \"aba\" substrings that \n * appear in the given string.\n */\npublic int countAbc(String str) {\n    if(str.length() <= 2)\n        return 0;\n          \n    if(str.substring(0, 3).equals(\"abc\") || str.substring(0, 3).equals(\"aba\"))\n        return 1 + countAbc(str.substring(2));\n                    \n    return countAbc(str.substring(1));\n}\n"], "url": "/prob/p161124", "title": "countAbc", "signature": "public int countAbc(String str)", "examples": [{"output": "1", "input": "countAbc(\"abc\")"}, {"output": "2", "input": "countAbc(\"abcxxabc\")"}, {"output": "2", "input": "countAbc(\"abaxxaba\")"}]}, {"difficulty": 230.0, "summary": "Given an array of positive ints, return a new array of length \"count\" containing the first even numbers from the original array. The original array will contain at least \"count\" even numbers.", "section": "AP-1", "solution": ["/* Given an array of positive ints, return a new array of length \"count\" \n * containing the first even numbers from the original array. The original \n * array will contain at least \"count\" even numbers.\n */\npublic int[] copyEvens(int[] nums, int count) {\n    int[] arr = new int[count];\n    int index = 0;\n      \n    for(int i = 0; index < count; i++) {\n        if(nums[i] % 2 == 0) {\n            arr[index] = nums[i];\n            index++;\n        }\n    }\n                                \n    return arr;\n}\n"], "url": "/prob/p134174", "title": "copyEvens", "signature": "public int[] copyEvens(int[] nums, int count)", "examples": [{"output": "[2, 4]", "input": "copyEvens([3, 2, 4, 5, 8], 2)"}, {"output": "[2, 4, 8]", "input": "copyEvens([3, 2, 4, 5, 8], 3)"}, {"output": "[6, 2, 4]", "input": "copyEvens([6, 1, 2, 4, 5, 8], 3)"}]}, {"difficulty": 215.0, "summary": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note:  str.toLowerCase() returns the lowercase version of a string.", "section": "String-2", "solution": ["public boolean endOther( String a, String b ){\n{\na = a.toLowerCase();\nb = b.toLowerCase();\n\nreturn a.endsWith( b ) || b.endsWith( a );\n}", "public boolean endOther(String a, String b){\nint aLen = a.length();\nint bLen = b.length();\nString end;\nString temp;\na = a.toLowerCase();\nb = b.toLowerCase();\nif(aLen >= bLen)\n{\nend = a.substring(aLen - bLen);\ntemp = b;\n}\nelse\n{\nend = b.substring(bLen - aLen);\ntemp = a;\n}\nreturn (end.equals(temp));\n}", "/* Given two strings, return true if either of the strings appears at the \n * very end of the other string, ignoring upper/lower case differences (in \n * other words, the computation should not be \"case sensitive\").\n */\npublic boolean endOther(String a, String b) {\n    if(a.length() < b.length()) {\n        String temp = a;\n        a = b.toLowerCase();\n        b = temp.toLowerCase();\n    }\n                  \n    return a.substring(a.length() - b.length()).equals(b);\n}\n"], "url": "/prob/p126880", "title": "endOther", "signature": "public boolean endOther(String a, String b)", "examples": [{"output": "true", "input": "endOther(\"Hiabc\", \"abc\")"}, {"output": "true", "input": "endOther(\"AbC\", \"HiaBc\")"}, {"output": "true", "input": "endOther(\"abc\", \"abXabc\")"}]}]