[{"signature": "public int countHi2(String str)", "title": "countHi2", "difficulty": 375.0, "url": "/prob/p143900", "section": "Recursion-1", "summary": "Given a string, compute recursively the number of times lowercase \"hi\" appears in the string, however do not count \"hi\" that have an 'x' immedately before them.", "solution": [], "examples": [{"output": "1", "input": "countHi2(\"ahixhi\")"}, {"output": "2", "input": "countHi2(\"ahibhi\")"}, {"output": "0", "input": "countHi2(\"xhixhi\")"}]}, {"signature": "public int[] reverse3(int[] nums)", "title": "reverse3", "difficulty": 121.0, "url": "/prob/p112409", "section": "Array-1", "summary": "Given an array of ints length 3, return a new array with the elements in reverse order, so {1, 2, 3} becomes {3, 2, 1}.", "solution": [], "examples": [{"output": "[3, 2, 1]", "input": "reverse3([1, 2, 3])"}, {"output": "[9, 11, 5]", "input": "reverse3([5, 11, 9])"}, {"output": "[0, 0, 7]", "input": "reverse3([7, 0, 0])"}]}, {"signature": "public int countClumps(int[] nums)", "title": "countClumps", "difficulty": 327.0, "url": "/prob/p193817", "section": "Array-3", "summary": "Say that a \"clump\" in an array is a series of 2 or more adjacent elements of the same value. Return the number of clumps in the given array.", "solution": [], "examples": [{"output": "2", "input": "countClumps([1, 2, 2, 3, 4, 4])"}, {"output": "2", "input": "countClumps([1, 1, 2, 1, 1])"}, {"output": "1", "input": "countClumps([1, 1, 1, 1, 1])"}]}, {"signature": "public int[] makePi()", "title": "makePi", "difficulty": 109.0, "url": "/prob/p167011", "section": "Array-1", "summary": "Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.", "solution": [], "examples": [{"output": "[3, 1, 4]", "input": "makePi()"}]}, {"signature": "public int start1(int[] a, int[] b)", "title": "start1", "difficulty": 151.0, "url": "/prob/p109660", "section": "Array-1", "summary": "Start with 2 int arrays, a and b, of any length. Return how many of the arrays have 1 as their first element.", "solution": [], "examples": [{"output": "2", "input": "start1([1, 2, 3], [1, 3])"}, {"output": "1", "input": "start1([7, 2, 3], [1])"}, {"output": "1", "input": "start1([1, 2], [])"}]}, {"signature": "public String getSandwich(String str)", "title": "getSandwich", "difficulty": 245.0, "url": "/prob/p129952", "section": "String-2", "summary": "A sandwich is two pieces of bread with something in between. Return the string that is between the first and last appearance of \"bread\" in the given string, or return the empty string \"\" if there are not two pieces of bread.", "solution": [], "examples": [{"output": "\"jam\"", "input": "getSandwich(\"breadjambread\")"}, {"output": "\"jam\"", "input": "getSandwich(\"xxbreadjambreadyy\")"}, {"output": "\"\"", "input": "getSandwich(\"xxbreadyy\")"}]}, {"signature": "public String stringYak(String str)", "title": "stringYak", "difficulty": 236.0, "url": "/prob/p126212", "section": "Warmup-2", "summary": "Suppose the string \"yak\" is unlucky. Given a string, return a version where all the \"yak\" are removed, but the \"a\" can be any char. The \"yak\" strings will not overlap.", "solution": ["public String stringYak(String str) {\n  String result = \"\";\n  \n  for (int i=0; i<str.length(); i++) {\n    // Look for i starting a \"yak\" -- advance i in that case\n    if (i+2<str.length() && str.charAt(i)=='y' && str.charAt(i+2)=='k') {\n      i =  i + 2;\n    } else { // Otherwise do the normal append\n      result = result + str.charAt(i);\n    }\n  }\n  \n  return result;\n}"], "examples": [{"output": "\"pak\"", "input": "stringYak(\"yakpak\")"}, {"output": "\"pak\"", "input": "stringYak(\"pakyak\")"}, {"output": "\"123ya\"", "input": "stringYak(\"yak123ya\")"}]}, {"signature": "public int sortaSum(int a, int b)", "title": "sortaSum", "difficulty": 115.0, "url": "/prob/p183071", "section": "Logic-1", "summary": "Given 2 ints, a and b, return their sum. However, sums in the range 10..19 inclusive, are forbidden, so in that case just return 20.", "solution": [], "examples": [{"output": "7", "input": "sortaSum(3, 4)"}, {"output": "20", "input": "sortaSum(9, 4)"}, {"output": "21", "input": "sortaSum(10, 11)"}]}, {"signature": "public int[] fizzArray(int n)", "title": "fizzArray", "difficulty": 230.0, "url": "/prob/p180920", "section": "Array-2", "summary": "Given a number n, create and return a new int array of length n, containing the numbers 0, 1, 2, ... n-1. The given n may be 0, in which case just return a length 0 array. You do not need a separate if-statement for the length-0 case; the for-loop should naturally execute 0 times in that case, so it just works. The syntax to make a new int array is: new int[desired_length]  \u00a0 (See also: ", "solution": [], "examples": [{"output": "[0, 1, 2, 3]", "input": "fizzArray(4)"}, {"output": "[0]", "input": "fizzArray(1)"}, {"output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "input": "fizzArray(10)"}]}, {"signature": "public int array11(int[] nums, int index)", "title": "array11", "difficulty": 348.0, "url": "/prob/p135988", "section": "Recursion-1", "summary": "Given an array of ints, compute recursively the number of times that the value 11 appears in the array. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.", "solution": [], "examples": [{"output": "1", "input": "array11([1, 2, 11], 0)"}, {"output": "2", "input": "array11([11, 11], 0)"}, {"output": "0", "input": "array11([1, 2, 3, 4], 0)"}]}, {"signature": "boolean doubleX(String str)", "title": "doubleX", "difficulty": 208.0, "url": "/prob/p186759", "section": "Warmup-2", "summary": "Given a string, return true if the first instance of \"x\" in the string is immediately followed by another \"x\".", "solution": [], "examples": [{"output": "true", "input": "doubleX(\"axxbb\")"}, {"output": "false", "input": "doubleX(\"axaxax\")"}, {"output": "true", "input": "doubleX(\"xxxxx\")"}]}, {"signature": "public boolean splitArray(int[] nums)", "title": "splitArray", "difficulty": 418.0, "url": "/prob/p185204", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to divide the ints into two groups, so that the sums of the two groups are the same. Every int must be in one group or the other. Write a recursive helper method that takes whatever arguments you like, and make the initial call to your recursive helper from splitArray(). (No loops needed.)", "solution": [], "examples": [{"output": "true", "input": "splitArray([2, 2])"}, {"output": "false", "input": "splitArray([2, 3])"}, {"output": "true", "input": "splitArray([5, 2, 3])"}]}, {"signature": "public int[] plusTwo(int[] a, int[] b)", "title": "plusTwo", "difficulty": 160.0, "url": "/prob/p180840", "section": "Array-1", "summary": "Given 2 int arrays, each length 2, return a new array length 4 containing all their elements.", "solution": [], "examples": [{"output": "[1, 2, 3, 4]", "input": "plusTwo([1, 2], [3, 4])"}, {"output": "[4, 4, 2, 2]", "input": "plusTwo([4, 4], [2, 2])"}, {"output": "[9, 2, 3, 4]", "input": "plusTwo([9, 2], [3, 4])"}]}, {"signature": "public int[] notAlone(int[] nums, int val)", "title": "notAlone", "difficulty": 278.0, "url": "/prob/p169506", "section": "Array-2", "summary": "We'll say that an element in an array is \"alone\" if there are values before and after it, and those values are different from it. Return a version of the given array where every instance of the given value which is alone is replaced by whichever value to its left or right is larger.", "solution": [], "examples": [{"output": "[1, 3, 3]", "input": "notAlone([1, 2, 3], 2)"}, {"output": "[1, 3, 3, 5, 5, 2]", "input": "notAlone([1, 2, 3, 2, 5, 2], 2)"}, {"output": "[3, 4]", "input": "notAlone([3, 4], 3)"}]}, {"signature": "public int sum13(int[] nums)", "title": "sum13", "difficulty": 212.0, "url": "/prob/p127384", "section": "Array-2", "summary": "Return the sum of the numbers in the array, returning 0 for an empty array. Except the number 13 is very unlucky, so it does not count and numbers that come immediately after a 13 also do not count.", "solution": [], "examples": [{"output": "6", "input": "sum13([1, 2, 2, 1])"}, {"output": "2", "input": "sum13([1, 1])"}, {"output": "6", "input": "sum13([1, 2, 2, 1, 13])"}]}, {"signature": "public int[] zeroMax(int[] nums)", "title": "zeroMax", "difficulty": 287.0, "url": "/prob/p187050", "section": "Array-2", "summary": "Return a version of the given array where each zero value in the array is replaced by the largest odd value to the right of the zero in the array. If there is no odd value to the right of the zero, leave the zero as a zero.", "solution": [], "examples": [{"output": "[5, 5, 3, 3]", "input": "zeroMax([0, 5, 0, 3])"}, {"output": "[3, 4, 3, 3]", "input": "zeroMax([0, 4, 0, 3])"}, {"output": "[1, 1, 0]", "input": "zeroMax([0, 1, 0])"}]}, {"signature": "public String notReplace(String str)", "title": "notReplace", "difficulty": 333.0, "url": "/prob/p154137", "section": "String-3", "summary": "Given a string, return a string where every appearance of the lowercase word \"is\" has been replaced with \"is not\". The word \"is\" should not be immediately preceeded or followed by a letter -- so for example the \"is\" in \"this\" does not count. (Note: Character.isLetter(char) tests if a char is a letter.)", "solution": [], "examples": [{"output": "\"is not test\"", "input": "notReplace(\"is test\")"}, {"output": "\"is not-is not\"", "input": "notReplace(\"is-is\")"}, {"output": "\"This is not right\"", "input": "notReplace(\"This is right\")"}]}, {"signature": "public int[] post4(int[] nums)", "title": "post4", "difficulty": 275.0, "url": "/prob/p164144", "section": "Array-2", "summary": "Given a non-empty array of ints, return a new array containing the elements from the original array that come after the last 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.", "solution": [], "examples": [{"output": "[1, 2]", "input": "post4([2, 4, 1, 2])"}, {"output": "[2]", "input": "post4([4, 1, 4, 2])"}, {"output": "[1, 2, 3]", "input": "post4([4, 4, 1, 2, 3])"}]}, {"signature": "public boolean mixStart(String str)", "title": "mixStart", "difficulty": 163.0, "url": "/prob/p151713", "section": "Warmup-1", "summary": "Return true if the given string begins with \"mix\", except the 'm' can be anything, so \"pix\", \"9ix\" .. all count.", "solution": ["public boolean mixStart(String str) {\n  // Check if string is too small\n  // (so substring() below does not go off the end)\n  if (str.length() < 3) return false;\n  \n  // Pull out length 2 string for the \"ix\" part\n  // (i.e. substring starting at index 1 and stopping just before 3).\n  String two = str.substring(1, 3);\n  \n  if (two.equals(\"ix\")) {\n    return true;\n  } else {\n    return false;\n  }\n  // This last part can be shortened to just:\n  // return(two.equals(\"ix\"));\n}"], "examples": [{"output": "true", "input": "mixStart(\"mix snacks\")"}, {"output": "true", "input": "mixStart(\"pix snacks\")"}, {"output": "false", "input": "mixStart(\"piz snacks\")"}]}, {"signature": "public boolean inOrderEqual(int a, int b, int c, boolean equalOk)", "title": "inOrderEqual", "difficulty": 142.0, "url": "/prob/p140272", "section": "Logic-1", "summary": "Given three ints, a b c, return true if they are in strict increasing order, such as 2 5 11, or 5 6 7, but not 6 5 7 or 5 5 7. However, with the exception that if \"equalOk\" is true, equality is allowed, such as 5 5 7 or 5 5 5.", "solution": [], "examples": [{"output": "true", "input": "inOrderEqual(2, 5, 11, false)"}, {"output": "false", "input": "inOrderEqual(5, 7, 6, false)"}, {"output": "true", "input": "inOrderEqual(5, 5, 7, true)"}]}, {"signature": "public String starOut(String str)", "title": "starOut", "difficulty": 254.0, "url": "/prob/p139564", "section": "String-2", "summary": "Return a version of the given string, where for every star (*) in the string the star and the chars immediately to its left and right are gone. So \"ab*cd\" yields \"ad\" and \"ab**cd\" also yields \"ad\".", "solution": [], "examples": [{"output": "\"ad\"", "input": "starOut(\"ab*cd\")"}, {"output": "\"ad\"", "input": "starOut(\"ab**cd\")"}, {"output": "\"silly\"", "input": "starOut(\"sm*eilly\")"}]}, {"signature": "public Map<String, String> mapAB(Map<String, String> map)", "title": "mapAB", "difficulty": 209.0, "url": "/prob/p107259", "section": "Map-1", "summary": "Modify and return the given map as follows: for this problem the map may or may not contain the \"a\" and \"b\" keys. If both keys are present, append their 2 string values together and store the result under the key \"ab\".", "solution": [], "examples": [{"output": "{\"a\": \"Hi\", \"ab\": \"HiThere\", \"b\": \"There\"}", "input": "mapAB({\"a\": \"Hi\", \"b\": \"There\"})"}, {"output": "{\"a\": \"Hi\"}", "input": "mapAB({\"a\": \"Hi\"})"}, {"output": "{\"b\": \"There\"}", "input": "mapAB({\"b\": \"There\"})"}]}, {"signature": "public int countX(String str)", "title": "countX", "difficulty": 330.0, "url": "/prob/p170371", "section": "Recursion-1", "summary": "Given a string, compute recursively (no loops) the number of lowercase 'x' chars in the string.", "solution": [], "examples": [{"output": "4", "input": "countX(\"xxhixx\")"}, {"output": "3", "input": "countX(\"xhixhix\")"}, {"output": "0", "input": "countX(\"hi\")"}]}, {"signature": "public String endUp(String str)", "title": "endUp", "difficulty": 187.0, "url": "/prob/p125268", "section": "Warmup-1", "summary": "Given a string, return a new string where the last 3 chars are now in upper case. If the string has less than 3 chars, uppercase whatever is there. Note that str.toUpperCase() returns the uppercase version of a string.", "solution": ["public String endUp(String str) {\n  if (str.length() <= 3) return str.toUpperCase();\n  int cut = str.length() - 3;\n  String front = str.substring(0, cut);\n  String back  = str.substring(cut);  // this takes from cut to the end\n  \n  return front + back.toUpperCase();\n}"], "examples": [{"output": "\"HeLLO\"", "input": "endUp(\"Hello\")"}, {"output": "\"hi thERE\"", "input": "endUp(\"hi there\")"}, {"output": "\"HI\"", "input": "endUp(\"hi\")"}]}, {"signature": "public String wordEnds(String str, String word)", "title": "wordEnds", "difficulty": 260.0, "url": "/prob/p147538", "section": "String-2", "summary": "Given a string and a non-empty ", "solution": [], "examples": [{"output": "\"c13i\"", "input": "wordEnds(\"abcXY123XYijk\", \"XY\")"}, {"output": "\"13\"", "input": "wordEnds(\"XY123XY\", \"XY\")"}, {"output": "\"11\"", "input": "wordEnds(\"XY1XY\", \"XY\")"}]}, {"signature": "public int sumHeights(int[] heights, int start, int end)", "title": "sumHeights", "difficulty": 246.0, "url": "/prob/p148138", "section": "AP-1", "summary": "We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the sum of the changes for a walk beginning at the start index and ending at the end index. For example, with the heights {5, 3, 6, 7, 2} and start=2, end=4 yields a sum of 1 + 5 = 6. The start end end index will both be valid indexes into the array with start <= end.", "solution": [], "examples": [{"output": "6", "input": "sumHeights([5, 3, 6, 7, 2], 2, 4)"}, {"output": "2", "input": "sumHeights([5, 3, 6, 7, 2], 0, 1)"}, {"output": "11", "input": "sumHeights([5, 3, 6, 7, 2], 0, 4)"}]}, {"signature": "public int[] front11(int[] a, int[] b)", "title": "front11", "difficulty": 181.0, "url": "/prob/p128270", "section": "Array-1", "summary": "Given 2 int arrays, a and b, of any length, return a new array with the first element of each array. If either array is length 0, ignore that array.", "solution": [], "examples": [{"output": "[1, 7]", "input": "front11([1, 2, 3], [7, 9, 8])"}, {"output": "[1, 2]", "input": "front11([1], [2])"}, {"output": "[1]", "input": "front11([1, 7], [])"}]}, {"signature": "public String makeAbba(String a, String b)", "title": "makeAbba", "difficulty": 106.0, "url": "/prob/p161056", "section": "String-1", "summary": "Given two strings, a and b, return the result of putting them together in the order abba, e.g. \"Hi\" and \"Bye\" returns \"HiByeByeHi\".", "solution": [], "examples": [{"output": "\"HiByeByeHi\"", "input": "makeAbba(\"Hi\", \"Bye\")"}, {"output": "\"YoAliceAliceYo\"", "input": "makeAbba(\"Yo\", \"Alice\")"}, {"output": "\"WhatUpUpWhat\"", "input": "makeAbba(\"What\", \"Up\")"}]}, {"signature": "public String front22(String str)", "title": "front22", "difficulty": 142.0, "url": "/prob/p183592", "section": "Warmup-1", "summary": "Given a string, take the first 2 chars and return the string with the 2 chars added at both the front and back, so \"kitten\" yields\"kikittenki\". If the string length is less than 2, use whatever chars are there.", "solution": ["public String front22(String str) {\n  // First figure the number of chars to take\n  int take = 2;\n  if (take > str.length()) {\n    take = str.length();\n  }\n  \n  String front = str.substring(0, take);\n  return front + str + front;\n}"], "examples": [{"output": "\"kikittenki\"", "input": "front22(\"kitten\")"}, {"output": "\"HaHaHa\"", "input": "front22(\"Ha\")"}, {"output": "\"ababcab\"", "input": "front22(\"abc\")"}]}, {"signature": "public int[] shiftLeft(int[] nums)", "title": "shiftLeft", "difficulty": 266.0, "url": "/prob/p105031", "section": "Array-2", "summary": "Return an array that is \"left shifted\" by one -- so {6, 2, 5, 3} returns {2, 5, 3, 6}. You may modify and return the given array, or return a new array.", "solution": [], "examples": [{"output": "[2, 5, 3, 6]", "input": "shiftLeft([6, 2, 5, 3])"}, {"output": "[2, 1]", "input": "shiftLeft([1, 2])"}, {"output": "[1]", "input": "shiftLeft([1])"}]}, {"signature": "public boolean strCopies(String str, String sub, int n)", "title": "strCopies", "difficulty": 387.0, "url": "/prob/p118182", "section": "Recursion-1", "summary": "Given a string and a non-empty substring ", "solution": [], "examples": [{"output": "true", "input": "strCopies(\"catcowcat\", \"cat\", 2)"}, {"output": "false", "input": "strCopies(\"catcowcat\", \"cow\", 2)"}, {"output": "true", "input": "strCopies(\"catcowcat\", \"cow\", 1)"}]}, {"signature": "public boolean evenlySpaced(int a, int b, int c)", "title": "evenlySpaced", "difficulty": 221.0, "url": "/prob/p198700", "section": "Logic-2", "summary": "Given three ints, a b c, one of them is small, one is medium and one is large. Return true if the three values are evenly spaced, so the difference between small and medium is the same as the difference between medium and large.", "solution": [], "examples": [{"output": "true", "input": "evenlySpaced(2, 4, 6)"}, {"output": "true", "input": "evenlySpaced(4, 6, 2)"}, {"output": "false", "input": "evenlySpaced(4, 6, 3)"}]}, {"signature": "public int sum67(int[] nums)", "title": "sum67", "difficulty": 215.0, "url": "/prob/p111327", "section": "Array-2", "summary": "Return the sum of the numbers in the array, except ignore sections of numbers starting with a 6 and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.", "solution": [], "examples": [{"output": "5", "input": "sum67([1, 2, 2])"}, {"output": "5", "input": "sum67([1, 2, 2, 6, 99, 99, 7])"}, {"output": "4", "input": "sum67([1, 1, 6, 7, 2])"}]}, {"signature": "public Map<String, Boolean> wordMultiple(String[] strings)", "title": "wordMultiple", "difficulty": 360.0, "url": "/prob/p190862", "section": "Map-2", "summary": "Given an array of strings, return a Map<String, Boolean> where each different string is a key and its value is true if that string appears 2 or more times in the array.", "solution": [], "examples": [{"output": "{\"a\": true, \"b\": true, \"c\": false}", "input": "wordMultiple([\"a\", \"b\", \"a\", \"c\", \"b\"])"}, {"output": "{\"a\": false, \"b\": false, \"c\": false}", "input": "wordMultiple([\"c\", \"b\", \"a\"])"}, {"output": "{\"c\": true}", "input": "wordMultiple([\"c\", \"c\", \"c\", \"c\"])"}]}, {"signature": "public String left2(String str)", "title": "left2", "difficulty": 133.0, "url": "/prob/p197720", "section": "String-1", "summary": "Given a string, return a \"rotated left 2\" version where the first 2 chars are moved to the end. The string length will be at least 2.", "solution": [], "examples": [{"output": "\"lloHe\"", "input": "left2(\"Hello\")"}, {"output": "\"vaja\"", "input": "left2(\"java\")"}, {"output": "\"Hi\"", "input": "left2(\"Hi\")"}]}, {"signature": "public List<Integer> noTeen(List<Integer> nums)", "title": "noTeen", "difficulty": 203.0, "url": "/prob/p137274", "section": "Functional-2", "summary": "Given a list of integers, return a list of those numbers, omitting any that are between 13 and 19 inclusive.", "solution": [], "examples": [{"output": "[12, 20]", "input": "noTeen([12, 13, 19, 20])"}, {"output": "[1, 1]", "input": "noTeen([1, 14, 1])"}, {"output": "[]", "input": "noTeen([15])"}]}, {"signature": "public boolean lastDigit(int a, int b)", "title": "lastDigit", "difficulty": 184.0, "url": "/prob/p125339", "section": "Warmup-1", "summary": "Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57. Note that the % \"mod\" operator computes remainders, so 17 % 10 is 7.", "solution": ["public boolean lastDigit(int a, int b) {\n  // True if the last digits are the same\n  return(a % 10 == b % 10);\n}"], "examples": [{"output": "true", "input": "lastDigit(7, 17)"}, {"output": "false", "input": "lastDigit(6, 17)"}, {"output": "true", "input": "lastDigit(3, 113)"}]}, {"signature": "public int bigHeights(int[] heights, int start, int end)", "title": "bigHeights", "difficulty": 246.2, "url": "/prob/p197710", "section": "AP-1", "summary": "(A variation on the sumHeights problem.) We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the number of \"big\" steps for a walk starting at the start index and ending at the end index. We'll say that  step is big if it is 5 or more up or down. The start end end index will both be valid indexes into the array with start <= end.", "solution": [], "examples": [{"output": "1", "input": "bigHeights([5, 3, 6, 7, 2], 2, 4)"}, {"output": "0", "input": "bigHeights([5, 3, 6, 7, 2], 0, 1)"}, {"output": "1", "input": "bigHeights([5, 3, 6, 7, 2], 0, 4)"}]}, {"signature": "public int close10(int a, int b)", "title": "close10", "difficulty": 172.0, "url": "/prob/p172021", "section": "Warmup-1", "summary": "Given 2 int values, return whichever value is nearest to the value 10, or return 0 in the event of a tie. Note that Math.abs(n) returns the absolute value of a number.", "solution": ["public int close10(int a, int b) {\n  int aDiff = Math.abs(a - 10);\n  int bDiff = Math.abs(b - 10);\n  \n  if (aDiff < bDiff) {\n    return a;\n  }\n  if (bDiff < aDiff) {\n    return b;\n  }\n  return 0;  // i.e. aDiff == bDiff\n  \n  // Solution notes: aDiff/bDiff local vars clean the code up a bit.\n  // Could have \"else\" before the second if and the return 0.\n}"], "examples": [{"output": "8", "input": "close10(8, 13)"}, {"output": "8", "input": "close10(13, 8)"}, {"output": "0", "input": "close10(13, 7)"}]}, {"signature": "public int scoresAverage(int[] scores)", "title": "scoresAverage", "difficulty": 212.0, "url": "/prob/p123837", "section": "AP-1", "summary": "Given an array of scores, compute the int average of the first half and the second half, and return whichever is larger. We'll say that the second half begins at index length/2. The array length will be at least 2. To practice decomposition, write a separate helper method ", "solution": [], "examples": [{"output": "4", "input": "scoresAverage([2, 2, 4, 4])"}, {"output": "4", "input": "scoresAverage([4, 4, 4, 2, 2, 2])"}, {"output": "4", "input": "scoresAverage([3, 4, 5, 1, 2, 3])"}]}, {"signature": "public int last2(String str)", "title": "last2", "difficulty": 215.0, "url": "/prob/p178318", "section": "Warmup-2", "summary": "Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so \"hixxxhi\" yields 1 (we won't count the end substring).", "solution": ["public int last2(String str) {\n  // Screen out too-short string case.\n  if (str.length() < 2) return 0;\n  \n  String end = str.substring(str.length()-2);\n  // Note: substring() with 1 value goes through the end of the string\n  int count = 0;\n  \n  // Check each substring length 2 starting at i\n  for (int i=0; i<str.length()-2; i++) {\n    String sub = str.substring(i, i+2);\n    if (sub.equals(end)) {  // Use .equals() with strings\n      count++;\n    }\n  }\n\n  return count;\n}"], "examples": [{"output": "1", "input": "last2(\"hixxhi\")"}, {"output": "1", "input": "last2(\"xaxxaxaxx\")"}, {"output": "2", "input": "last2(\"axxxaaxx\")"}]}, {"signature": "public String extraEnd(String str)", "title": "extraEnd", "difficulty": 115.0, "url": "/prob/p108853", "section": "String-1", "summary": "Given a string, return a new string made of 3 copies of the last 2 chars of the original string. The string length will be at least 2.", "solution": [], "examples": [{"output": "\"lololo\"", "input": "extraEnd(\"Hello\")"}, {"output": "\"ababab\"", "input": "extraEnd(\"ab\")"}, {"output": "\"HiHiHi\"", "input": "extraEnd(\"Hi\")"}]}, {"signature": "public Map<String, Integer> wordLen(String[] strings)", "title": "wordLen", "difficulty": 306.0, "url": "/prob/p125327", "section": "Map-2", "summary": "Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, and the value is that string's length.", "solution": [], "examples": [{"output": "{\"bb\": 2, \"a\": 1}", "input": "wordLen([\"a\", \"bb\", \"a\", \"bb\"])"}, {"output": "{\"that\": 4, \"and\": 3, \"this\": 4}", "input": "wordLen([\"this\", \"and\", \"that\", \"and\"])"}, {"output": "{\"code\": 4, \"bug\": 3}", "input": "wordLen([\"code\", \"code\", \"code\", \"bug\"])"}]}, {"signature": "public boolean monkeyTrouble(boolean aSmile, boolean bSmile)", "title": "monkeyTrouble", "difficulty": 106.0, "url": "/prob/p181646", "section": "Warmup-1", "summary": "We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble.", "solution": ["public boolean monkeyTrouble(boolean aSmile, boolean bSmile) {\n  if (aSmile && bSmile) {\n    return true;\n  }\n  if (!aSmile && !bSmile) {\n    return true;\n  }\n  return false;\n  // The above can be shortened to:\n  //   return ((aSmile && bSmile) || (!aSmile && !bSmile));\n  // Or this very short version (think about how this is the same as the above)\n  //   return (aSmile == bSmile);\n}"], "examples": [{"output": "true", "input": "monkeyTrouble(true, true)"}, {"output": "true", "input": "monkeyTrouble(false, false)"}, {"output": "false", "input": "monkeyTrouble(true, false)"}]}, {"signature": "public int sum2(int[] nums)", "title": "sum2", "difficulty": 127.0, "url": "/prob/p190968", "section": "Array-1", "summary": "Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0.", "solution": [], "examples": [{"output": "3", "input": "sum2([1, 2, 3])"}, {"output": "2", "input": "sum2([1, 1])"}, {"output": "2", "input": "sum2([1, 1, 1, 1])"}]}, {"signature": "public String twoChar(String str, int index)", "title": "twoChar", "difficulty": 154.0, "url": "/prob/p144623", "section": "String-1", "summary": "Given a string and an index, return a string length 2 starting at the given index. If the index is too big or too small to define a string length 2, use the first 2 chars. The string length will be at least 2.", "solution": [], "examples": [{"output": "\"ja\"", "input": "twoChar(\"java\", 0)"}, {"output": "\"va\"", "input": "twoChar(\"java\", 2)"}, {"output": "\"ja\"", "input": "twoChar(\"java\", 3)"}]}, {"signature": "public List<String> no34(List<String> strings)", "title": "no34", "difficulty": 212.0, "url": "/prob/p184496", "section": "Functional-2", "summary": "Given a list of strings, return a list of the strings, omitting any string length 3 or 4.", "solution": [], "examples": [{"output": "[\"a\", \"bb\"]", "input": "no34([\"a\", \"bb\", \"ccc\"])"}, {"output": "[\"a\", \"bb\"]", "input": "no34([\"a\", \"bb\", \"ccc\", \"dddd\"])"}, {"output": "[\"apple\"]", "input": "no34([\"ccc\", \"dddd\", \"apple\"])"}]}, {"signature": "public boolean frontAgain(String str)", "title": "frontAgain", "difficulty": 178.0, "url": "/prob/p196652", "section": "String-1", "summary": "Given a string, return true if the first 2 chars in the string also appear at the end of the string, such as with \"edited\".", "solution": [], "examples": [{"output": "true", "input": "frontAgain(\"edited\")"}, {"output": "false", "input": "frontAgain(\"edit\")"}, {"output": "true", "input": "frontAgain(\"ed\")"}]}, {"signature": "public int[] withoutTen(int[] nums)", "title": "withoutTen", "difficulty": 284.0, "url": "/prob/p196976", "section": "Array-2", "summary": "Return a version of the given array where all the 10's have been removed. The remaining elements should shift left towards the start of the array as needed, and the empty spaces a the end of the array should be 0. So {1, 10, 10, 2} yields {1, 2, 0, 0}. You may modify and return the given array or make a new array.", "solution": [], "examples": [{"output": "[1, 2, 0, 0]", "input": "withoutTen([1, 10, 10, 2])"}, {"output": "[2, 0, 0]", "input": "withoutTen([10, 2, 10])"}, {"output": "[1, 99, 0]", "input": "withoutTen([1, 99, 10])"}]}, {"signature": "public boolean parrotTrouble(boolean talking, int hour)", "title": "parrotTrouble", "difficulty": 115.0, "url": "/prob/p140449", "section": "Warmup-1", "summary": "We have a loud talking parrot. The \"hour\" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.", "solution": ["public boolean parrotTrouble(boolean talking, int hour) {\n  return (talking && (hour < 7 || hour > 20));\n  // Need extra parenthesis around the || clause\n  // since && binds more tightly than ||\n  // && is like arithmetic *, || is like arithmetic +\n}"], "examples": [{"output": "true", "input": "parrotTrouble(true, 6)"}, {"output": "false", "input": "parrotTrouble(true, 7)"}, {"output": "false", "input": "parrotTrouble(false, 6)"}]}, {"signature": "public int[] tenRun(int[] nums)", "title": "tenRun", "difficulty": 269.0, "url": "/prob/p199484", "section": "Array-2", "summary": "For each multiple of 10 in the given array, change all the values following it to be that multiple of 10, until encountering another multiple of 10. So {2, 10, 3, 4, 20, 5} yields {2, 10, 10, 10, 20, 20}.", "solution": [], "examples": [{"output": "[2, 10, 10, 10, 20, 20]", "input": "tenRun([2, 10, 3, 4, 20, 5])"}, {"output": "[10, 10, 20, 20]", "input": "tenRun([10, 1, 20, 2])"}, {"output": "[10, 10, 10, 20]", "input": "tenRun([10, 1, 9, 20])"}]}, {"signature": "public String oneTwo(String str)", "title": "oneTwo", "difficulty": 250.0, "url": "/prob/p122943", "section": "String-2", "summary": "Given a string, compute a new string by moving the first char to come after the next two chars, so \"abc\" yields \"bca\". Repeat this process for each subsequent group of 3 chars, so \"abcdef\" yields \"bcaefd\". Ignore any group of fewer than 3 chars at the end.", "solution": [], "examples": [{"output": "\"bca\"", "input": "oneTwo(\"abc\")"}, {"output": "\"cat\"", "input": "oneTwo(\"tca\")"}, {"output": "\"catdog\"", "input": "oneTwo(\"tcagdo\")"}]}, {"signature": "public int luckySum(int a, int b, int c)", "title": "luckySum", "difficulty": 209.0, "url": "/prob/p130788", "section": "Logic-2", "summary": "Given 3 int values, a b c, return their sum. However, if one of the values is 13 then it does not count towards the sum and values to its right do not count. So for example, if b is 13, then both b and c do not count.", "solution": [], "examples": [{"output": "6", "input": "luckySum(1, 2, 3)"}, {"output": "3", "input": "luckySum(1, 2, 13)"}, {"output": "1", "input": "luckySum(1, 13, 3)"}]}, {"signature": "public int[] fix34(int[] nums)", "title": "fix34", "difficulty": 306.0, "url": "/prob/p159339", "section": "Array-3", "summary": "Return an array that contains exactly the same numbers as the given array, but rearranged so that every 3 is immediately followed by a 4. Do not move the 3's, but every other number may move. The array contains the same number of 3's and 4's, every 3 has a number after it that is not a 3, and a 3 appears in the array before any 4.", "solution": [], "examples": [{"output": "[1, 3, 4, 1]", "input": "fix34([1, 3, 1, 4])"}, {"output": "[1, 3, 4, 1, 1, 3, 4]", "input": "fix34([1, 3, 1, 4, 4, 3, 1])"}, {"output": "[3, 4, 2, 2]", "input": "fix34([3, 2, 2, 4])"}]}, {"signature": "public boolean array220(int[] nums, int index)", "title": "array220", "difficulty": 351.0, "url": "/prob/p173469", "section": "Recursion-1", "summary": "Given an array of ints, compute recursively if the array contains somewhere a value followed in the array by that value times 10. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.", "solution": [], "examples": [{"output": "true", "input": "array220([1, 2, 20], 0)"}, {"output": "true", "input": "array220([3, 30], 0)"}, {"output": "false", "input": "array220([3], 0)"}]}, {"signature": "public String sameEnds(String string)", "title": "sameEnds", "difficulty": 321.0, "url": "/prob/p131516", "section": "String-3", "summary": "Given a string, return the longest substring that appears at both the beginning and end of the string without overlapping. For example, sameEnds(\"abXab\") is \"ab\".", "solution": [], "examples": [{"output": "\"ab\"", "input": "sameEnds(\"abXYab\")"}, {"output": "\"x\"", "input": "sameEnds(\"xx\")"}, {"output": "\"x\"", "input": "sameEnds(\"xxx\")"}]}, {"signature": "public int bunnyEars2(int bunnies)", "title": "bunnyEars2", "difficulty": 312.0, "url": "/prob/p107330", "section": "Recursion-1", "summary": "We have bunnies standing in a line, numbered 1, 2, ... The odd bunnies (1, 3, ..) have the normal 2 ears. The even bunnies (2, 4, ..) we'll say have 3 ears, because they each have a raised foot. Recursively return the number of \"ears\" in the bunny line 1, 2, ... n (without loops or multiplication).", "solution": [], "examples": [{"output": "0", "input": "bunnyEars2(0)"}, {"output": "2", "input": "bunnyEars2(1)"}, {"output": "5", "input": "bunnyEars2(2)"}]}, {"signature": "public List<Integer> square(List<Integer> nums)", "title": "square", "difficulty": 203.0, "url": "/prob/p139586", "section": "Functional-1", "summary": "Given a list of integers, return a list where each integer is multiplied with itself.", "solution": [], "examples": [{"output": "[1, 4, 9]", "input": "square([1, 2, 3])"}, {"output": "[36, 64, 36, 64, 1]", "input": "square([6, 8, -6, -8, 1])"}, {"output": "[]", "input": "square([])"}]}, {"signature": "public String lastTwo(String str)", "title": "lastTwo", "difficulty": 172.0, "url": "/prob/p194786", "section": "String-1", "summary": "Given a string of any length, return a new string where the last 2 chars, if present, are swapped, so \"coding\" yields \"codign\".", "solution": [], "examples": [{"output": "\"codign\"", "input": "lastTwo(\"coding\")"}, {"output": "\"cta\"", "input": "lastTwo(\"cat\")"}, {"output": "\"ba\"", "input": "lastTwo(\"ab\")"}]}, {"signature": "public String endX(String str)", "title": "endX", "difficulty": 360.0, "url": "/prob/p105722", "section": "Recursion-1", "summary": "Given a string, compute recursively a new string where all the lowercase 'x' chars have been moved to the end of the string.", "solution": [], "examples": [{"output": "\"rexx\"", "input": "endX(\"xxre\")"}, {"output": "\"hixxxx\"", "input": "endX(\"xxhixx\")"}, {"output": "\"hihixxx\"", "input": "endX(\"xhixhix\")"}]}, {"signature": "public String everyNth(String str, int n)", "title": "everyNth", "difficulty": 190.0, "url": "/prob/p196441", "section": "Warmup-1", "summary": "Given a non-empty string and an int N, return the string made starting with char 0, and then every Nth char of the string. So if N is 3, use char 0, 3, 6, ... and so on. N is 1 or more.", "solution": ["public String everyNth(String str, int n) {\n  String result = \"\";\n  \n  // Look at every nth char\n  for (int i=0; i<str.length(); i = i + n) {\n    result = result + str.charAt(i);\n  }\n  return result;\n}"], "examples": [{"output": "\"Mrce\"", "input": "everyNth(\"Miracle\", 2)"}, {"output": "\"aceg\"", "input": "everyNth(\"abcdefg\", 2)"}, {"output": "\"adg\"", "input": "everyNth(\"abcdefg\", 3)"}]}, {"signature": "public boolean makes10(int a, int b)", "title": "makes10", "difficulty": 118.0, "url": "/prob/p182873", "section": "Warmup-1", "summary": "Given 2 ints, a and b, return true if one if them is 10 or if their sum is 10.", "solution": ["public boolean makes10(int a, int b) {\n  return (a == 10 || b == 10 || a+b == 10);\n}"], "examples": [{"output": "true", "input": "makes10(9, 10)"}, {"output": "false", "input": "makes10(9, 9)"}, {"output": "true", "input": "makes10(1, 9)"}]}, {"signature": "public int matchUp(int[] nums1, int[] nums2)", "title": "matchUp", "difficulty": 242.0, "url": "/prob/p136254", "section": "Array-2", "summary": "Given arrays nums1 and nums2 of the same length, for every element in nums1, consider the corresponding element in nums2 (at the same index). Return the count of the number of times that the two elements differ by 2 or less, but are not equal.", "solution": [], "examples": [{"output": "2", "input": "matchUp([1, 2, 3], [2, 3, 10])"}, {"output": "3", "input": "matchUp([1, 2, 3], [2, 3, 5])"}, {"output": "2", "input": "matchUp([1, 2, 3], [2, 3, 3])"}]}, {"signature": "public int factorial(int n)", "title": "factorial", "difficulty": 303.0, "url": "/prob/p154669", "section": "Recursion-1", "summary": "Given n of 1 or more, return the factorial of n, which is n * (n-1) * (n-2) ... 1. Compute the result recursively (without loops).", "solution": [], "examples": [{"output": "1", "input": "factorial(1)"}, {"output": "2", "input": "factorial(2)"}, {"output": "6", "input": "factorial(3)"}]}, {"signature": "public String nTwice(String str, int n)", "title": "nTwice", "difficulty": 151.0, "url": "/prob/p174148", "section": "String-1", "summary": "Given a string and an int n, return a string made of the first and last n chars from the string. The string length will be at least n.", "solution": [], "examples": [{"output": "\"Helo\"", "input": "nTwice(\"Hello\", 2)"}, {"output": "\"Choate\"", "input": "nTwice(\"Chocolate\", 3)"}, {"output": "\"Ce\"", "input": "nTwice(\"Chocolate\", 1)"}]}, {"signature": "public boolean sum28(int[] nums)", "title": "sum28", "difficulty": 224.0, "url": "/prob/p199612", "section": "Array-2", "summary": "Given an array of ints, return true if the sum of all the 2's in the array is exactly 8.", "solution": [], "examples": [{"output": "true", "input": "sum28([2, 3, 2, 2, 4, 2])"}, {"output": "false", "input": "sum28([2, 3, 2, 2, 4, 2, 2])"}, {"output": "false", "input": "sum28([1, 2, 3, 4])"}]}, {"signature": "public boolean no23(int[] nums)", "title": "no23", "difficulty": 139.0, "url": "/prob/p175689", "section": "Array-1", "summary": "Given an int array length 2, return true if it does not contain a 2 or 3.", "solution": [], "examples": [{"output": "true", "input": "no23([4, 5])"}, {"output": "false", "input": "no23([4, 2])"}, {"output": "false", "input": "no23([3, 5])"}]}, {"signature": "public List<String> moreY(List<String> strings)", "title": "moreY", "difficulty": 210.0, "url": "/prob/p177528", "section": "Functional-1", "summary": "Given a list of strings, return a list where each string has \"y\" added at its start and end.", "solution": [], "examples": [{"output": "[\"yay\", \"yby\", \"ycy\"]", "input": "moreY([\"a\", \"b\", \"c\"])"}, {"output": "[\"yhelloy\", \"ytherey\"]", "input": "moreY([\"hello\", \"there\"])"}, {"output": "[\"yyayy\"]", "input": "moreY([\"yay\"])"}]}, {"signature": "public List<Integer> rightDigit(List<Integer> nums)", "title": "rightDigit", "difficulty": 220.0, "url": "/prob/p152194", "section": "Functional-1", "summary": "Given a list of non-negative integers, return an integer list of the rightmost digits. (Note: use %)", "solution": [], "examples": [{"output": "[1, 2, 3]", "input": "rightDigit([1, 22, 93])"}, {"output": "[6, 8, 6, 8, 1]", "input": "rightDigit([16, 8, 886, 8, 1])"}, {"output": "[0, 0]", "input": "rightDigit([10, 0])"}]}, {"signature": "public String right2(String str)", "title": "right2", "difficulty": 136.0, "url": "/prob/p130781", "section": "String-1", "summary": "Given a string, return a \"rotated right 2\" version where the last 2 chars are moved to the start. The string length will be at least 2.", "solution": [], "examples": [{"output": "\"loHel\"", "input": "right2(\"Hello\")"}, {"output": "\"vaja\"", "input": "right2(\"java\")"}, {"output": "\"Hi\"", "input": "right2(\"Hi\")"}]}, {"signature": "public boolean has77(int[] nums)", "title": "has77", "difficulty": 245.0, "url": "/prob/p168357", "section": "Array-2", "summary": "Given an array of ints, return true if the array contains two 7's next to each other, or there are two 7's separated by one element, such as with {7, 1, 7}.", "solution": [], "examples": [{"output": "true", "input": "has77([1, 7, 7])"}, {"output": "true", "input": "has77([1, 7, 1, 7])"}, {"output": "false", "input": "has77([1, 7, 1, 1, 7])"}]}, {"signature": "public String withoutString(String base, String remove)", "title": "withoutString", "difficulty": 306.0, "url": "/prob/p192570", "section": "String-3", "summary": "Given two strings, ", "solution": [], "examples": [{"output": "\"He there\"", "input": "withoutString(\"Hello there\", \"llo\")"}, {"output": "\"Hllo thr\"", "input": "withoutString(\"Hello there\", \"e\")"}, {"output": "\"Hello there\"", "input": "withoutString(\"Hello there\", \"x\")"}]}, {"signature": "public int[] midThree(int[] nums)", "title": "midThree", "difficulty": 166.0, "url": "/prob/p155713", "section": "Array-1", "summary": "Given an array of ints of odd length, return a new array length 3 containing the elements from the middle of the array. The array length will be at least 3.", "solution": [], "examples": [{"output": "[2, 3, 4]", "input": "midThree([1, 2, 3, 4, 5])"}, {"output": "[7, 5, 3]", "input": "midThree([8, 6, 7, 5, 3, 0, 9])"}, {"output": "[1, 2, 3]", "input": "midThree([1, 2, 3])"}]}, {"signature": "public String withouEnd2(String str)", "title": "withouEnd2", "difficulty": 142.0, "url": "/prob/p174254", "section": "String-1", "summary": "Given a string, return a version without both the first and last char of the string. The string may be any length, including 0.", "solution": [], "examples": [{"output": "\"ell\"", "input": "withouEnd2(\"Hello\")"}, {"output": "\"b\"", "input": "withouEnd2(\"abc\")"}, {"output": "\"\"", "input": "withouEnd2(\"ab\")"}]}, {"signature": "public Map<String, String> topping3(Map<String, String> map)", "title": "topping3", "difficulty": 218.0, "url": "/prob/p128461", "section": "Map-1", "summary": "Given a map of food keys and topping values, modify and return the map as follows:  if the key \"potato\" has a value, set that as the value for the key \"fries\". If the key \"salad\" has a value, set that as the value for the key \"spinach\".", "solution": [], "examples": [{"output": "{\"potato\": \"ketchup\", \"fries\": \"ketchup\"}", "input": "topping3({\"potato\": \"ketchup\"})"}, {"output": "{\"potato\": \"butter\", \"fries\": \"butter\"}", "input": "topping3({\"potato\": \"butter\"})"}, {"output": "{\"spinach\": \"oil\", \"salad\": \"oil\", \"potato\": \"ketchup\", \"fries\": \"ketchup\"}", "input": "topping3({\"salad\": \"oil\", \"potato\": \"ketchup\"})"}]}, {"signature": "public int countTriple(String str)", "title": "countTriple", "difficulty": 315.0, "url": "/prob/p195714", "section": "String-3", "summary": "We'll say that a \"triple\" in a string is a char appearing three times in a row. Return the number of triples in the given string. The triples may overlap.", "solution": [], "examples": [{"output": "1", "input": "countTriple(\"abcXXXabc\")"}, {"output": "3", "input": "countTriple(\"xxxabyyyycd\")"}, {"output": "0", "input": "countTriple(\"a\")"}]}, {"signature": "public String lastChars(String a, String b)", "title": "lastChars", "difficulty": 166.0, "url": "/prob/p138183", "section": "String-1", "summary": "Given 2 strings, a and b, return a new string made of the first char of a and the last char of b, so \"yo\" and \"java\" yields \"ya\". If either string is length 0, use '@' for its missing char.", "solution": [], "examples": [{"output": "\"ls\"", "input": "lastChars(\"last\", \"chars\")"}, {"output": "\"ya\"", "input": "lastChars(\"yo\", \"java\")"}, {"output": "\"h@\"", "input": "lastChars(\"hi\", \"\")"}]}, {"signature": "public String nonStart(String a, String b)", "title": "nonStart", "difficulty": 130.0, "url": "/prob/p143825", "section": "String-1", "summary": "Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1.", "solution": [], "examples": [{"output": "\"ellohere\"", "input": "nonStart(\"Hello\", \"There\")"}, {"output": "\"avaode\"", "input": "nonStart(\"java\", \"code\")"}, {"output": "\"hotlava\"", "input": "nonStart(\"shotl\", \"java\")"}]}, {"signature": "public int bunnyEars(int bunnies)", "title": "bunnyEars", "difficulty": 306.0, "url": "/prob/p183649", "section": "Recursion-1", "summary": "We have a number of bunnies and each bunny has two big floppy ears. We want to compute the total number of ears across all the bunnies recursively (without loops or multiplication).", "solution": [], "examples": [{"output": "0", "input": "bunnyEars(0)"}, {"output": "2", "input": "bunnyEars(1)"}, {"output": "4", "input": "bunnyEars(2)"}]}, {"signature": "public String allStar(String str)", "title": "allStar", "difficulty": 354.0, "url": "/prob/p183394", "section": "Recursion-1", "summary": "Given a string, compute recursively a new string where all the adjacent chars are now separated by a \"*\".", "solution": [], "examples": [{"output": "\"h*e*l*l*o\"", "input": "allStar(\"hello\")"}, {"output": "\"a*b*c\"", "input": "allStar(\"abc\")"}, {"output": "\"a*b\"", "input": "allStar(\"ab\")"}]}, {"signature": "public int countHi(String str)", "title": "countHi", "difficulty": 333.0, "url": "/prob/p184029", "section": "Recursion-1", "summary": "Given a string, compute recursively (no loops) the number of times lowercase \"hi\" appears in the string.", "solution": [], "examples": [{"output": "1", "input": "countHi(\"xxhixx\")"}, {"output": "2", "input": "countHi(\"xhixhix\")"}, {"output": "1", "input": "countHi(\"hi\")"}]}, {"signature": "public boolean closeFar(int a, int b, int c)", "title": "closeFar", "difficulty": 215.0, "url": "/prob/p138990", "section": "Logic-2", "summary": "Given three ints, a b c, return true if one of b or c is \"close\" (differing from a by at most 1), while the other is \"far\", differing from both other values by 2 or more. Note: Math.abs(num) computes the absolute value of a number.", "solution": [], "examples": [{"output": "true", "input": "closeFar(1, 2, 10)"}, {"output": "false", "input": "closeFar(1, 2, 3)"}, {"output": "true", "input": "closeFar(4, 1, 3)"}]}, {"signature": "public int redTicket(int a, int b, int c)", "title": "redTicket", "difficulty": 157.0, "url": "/prob/p170833", "section": "Logic-1", "summary": "You have a red lottery ticket showing ints a, b, and c, each of which is 0, 1, or 2. If they are all the value 2, the result is 10. Otherwise if they are all the same, the result is 5. Otherwise so long as both b and c are different from a, the result is 1. Otherwise the result is 0.", "solution": [], "examples": [{"output": "10", "input": "redTicket(2, 2, 2)"}, {"output": "0", "input": "redTicket(2, 2, 1)"}, {"output": "5", "input": "redTicket(0, 0, 0)"}]}, {"signature": "public boolean split53(int[] nums)", "title": "split53", "difficulty": 424.0, "url": "/prob/p168295", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to divide the ints into two groups, so that the sum of the two groups is the same, with these constraints: all the values that are multiple of 5 must be in one group, and all the values that are a multiple of 3 (and not a multiple of 5) must be in the other. (No loops needed.)", "solution": [], "examples": [{"output": "true", "input": "split53([1, 1])"}, {"output": "false", "input": "split53([1, 1, 1])"}, {"output": "true", "input": "split53([2, 4, 2])"}]}, {"signature": "public boolean xyzThere(String str)", "title": "xyzThere", "difficulty": 218.0, "url": "/prob/p136594", "section": "String-2", "summary": "Return true if the given string contains an appearance of \"xyz\" where the xyz is not directly preceeded by a period (.). So \"xxyz\" counts but \"x.xyz\" does not.", "solution": [], "examples": [{"output": "true", "input": "xyzThere(\"abcxyz\")"}, {"output": "false", "input": "xyzThere(\"abc.xyz\")"}, {"output": "true", "input": "xyzThere(\"xyz.abc\")"}]}, {"signature": "public boolean dividesSelf(int n)", "title": "dividesSelf", "difficulty": 227.0, "url": "/prob/p165941", "section": "AP-1", "summary": "We'll say that a positive int divides itself if every digit in the number divides into the number evenly. So for example 128 divides itself since 1, 2, and 8 all divide into 128 evenly. We'll say that 0 does not divide into anything evenly, so no number with a 0 digit divides itself. Note: use % to get the rightmost digit, and / to discard the rightmost digit.", "solution": [], "examples": [{"output": "true", "input": "dividesSelf(128)"}, {"output": "true", "input": "dividesSelf(12)"}, {"output": "false", "input": "dividesSelf(120)"}]}, {"signature": "public boolean haveThree(int[] nums)", "title": "haveThree", "difficulty": 254.0, "url": "/prob/p109783", "section": "Array-2", "summary": "Given an array of ints, return true if the value 3 appears in the array exactly 3 times, and no 3's are next to each other.", "solution": [], "examples": [{"output": "true", "input": "haveThree([3, 1, 3, 1, 3])"}, {"output": "false", "input": "haveThree([3, 1, 3, 3])"}, {"output": "false", "input": "haveThree([3, 4, 3, 3, 4])"}]}, {"signature": "public String stringSplosion(String str)", "title": "stringSplosion", "difficulty": 212.0, "url": "/prob/p117334", "section": "Warmup-2", "summary": "Given a non-empty string like \"Code\" return a string like \"CCoCodCode\".", "solution": ["public String stringSplosion(String str) {\n  String result = \"\";\n  // On each iteration, add the substring of the chars 0..i\n  for (int i=0; i<str.length(); i++) {\n    result = result + str.substring(0, i+1);\n  }\n  return result;\n}"], "examples": [{"output": "\"CCoCodCode\"", "input": "stringSplosion(\"Code\")"}, {"output": "\"aababc\"", "input": "stringSplosion(\"abc\")"}, {"output": "\"aab\"", "input": "stringSplosion(\"ab\")"}]}, {"signature": "public boolean groupSum(int start, int[] nums, int target)", "title": "groupSum", "difficulty": 403.0, "url": "/prob/p145416", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target? This is a classic backtracking recursion problem. Once you understand the recursive backtracking strategy in this problem, you can use the same pattern for many problems to search a space of choices. Rather than looking at the whole array, our convention is to consider the part of the array starting at index ", "solution": [], "examples": [{"output": "true", "input": "groupSum(0, [2, 4, 8], 10)"}, {"output": "true", "input": "groupSum(0, [2, 4, 8], 14)"}, {"output": "false", "input": "groupSum(0, [2, 4, 8], 9)"}]}, {"signature": "public List<Integer> noNeg(List<Integer> nums)", "title": "noNeg", "difficulty": 200.0, "url": "/prob/p103456", "section": "Functional-2", "summary": "Given a list of integers, return a list of the integers, omitting any that are less than 0.", "solution": [], "examples": [{"output": "[1]", "input": "noNeg([1, -2])"}, {"output": "[3, 3]", "input": "noNeg([-3, -3, 3, 3])"}, {"output": "[]", "input": "noNeg([-1, -1, -1])"}]}, {"signature": "public boolean squirrelPlay(int temp, boolean isSummer)", "title": "squirrelPlay", "difficulty": 109.0, "url": "/prob/p141061", "section": "Logic-1", "summary": "The squirrels in Palo Alto spend most of the day playing. In particular, they play if the temperature is between 60 and 90 (inclusive). Unless it is summer, then the upper limit is 100 instead of 90. Given an int temperature and a boolean isSummer, return true if the squirrels play and false otherwise.", "solution": [], "examples": [{"output": "true", "input": "squirrelPlay(70, false)"}, {"output": "false", "input": "squirrelPlay(95, false)"}, {"output": "true", "input": "squirrelPlay(95, true)"}]}, {"signature": "public boolean no14(int[] nums)", "title": "no14", "difficulty": 233.0, "url": "/prob/p136648", "section": "Array-2", "summary": "Given an array of ints, return true if it contains no 1's or it contains no 4's.", "solution": [], "examples": [{"output": "true", "input": "no14([1, 2, 3])"}, {"output": "false", "input": "no14([1, 2, 3, 4])"}, {"output": "true", "input": "no14([2, 3, 4])"}]}, {"signature": "public Map<String, Integer> wordCount(String[] strings)", "title": "wordCount", "difficulty": 350.0, "url": "/prob/p117630", "section": "Map-2", "summary": "The classic word-count algorithm: given an array of strings, return a Map<String, Integer> with a key for each different string, with the value the number of times that string appears in the array.", "solution": [], "examples": [{"output": "{\"a\": 2, \"b\": 2, \"c\": 1}", "input": "wordCount([\"a\", \"b\", \"a\", \"c\", \"b\"])"}, {"output": "{\"a\": 1, \"b\": 1, \"c\": 1}", "input": "wordCount([\"c\", \"b\", \"a\"])"}, {"output": "{\"c\": 4}", "input": "wordCount([\"c\", \"c\", \"c\", \"c\"])"}]}, {"signature": "public int blueTicket(int a, int b, int c)", "title": "blueTicket", "difficulty": 163.0, "url": "/prob/p192267", "section": "Logic-1", "summary": "You have a blue lottery ticket, with ints a, b, and c on it. This makes three pairs, which we'll call ab, bc, and ac. Consider the sum of the numbers in each pair. If any pair sums to exactly 10, the result is 10. Otherwise if the ab sum is exactly 10 more than either bc or ac sums, the result is 5. Otherwise the result is 0.", "solution": [], "examples": [{"output": "10", "input": "blueTicket(9, 1, 0)"}, {"output": "0", "input": "blueTicket(9, 2, 0)"}, {"output": "10", "input": "blueTicket(6, 1, 4)"}]}, {"signature": "public boolean in1To10(int n, boolean outsideMode)", "title": "in1To10", "difficulty": 121.0, "url": "/prob/p137365", "section": "Logic-1", "summary": "Given a number n, return true if n is in the range 1..10, inclusive. Unless outsideMode is true, in which case return true if the number is less or equal to 1, or greater or equal to 10.", "solution": [], "examples": [{"output": "true", "input": "in1To10(5, false)"}, {"output": "false", "input": "in1To10(11, false)"}, {"output": "true", "input": "in1To10(11, true)"}]}, {"signature": "public Map<String, String> firstChar(String[] strings)", "title": "firstChar", "difficulty": 353.0, "url": "/prob/p168493", "section": "Map-2", "summary": "Given an array of non-empty strings, return a Map<String, String> with a key for every different first character seen, with the value of all the strings starting with that character appended together in the order they appear in the array.", "solution": [], "examples": [{"output": "{\"s\": \"saltsoda\", \"t\": \"teatoast\"}", "input": "firstChar([\"salt\", \"tea\", \"soda\", \"toast\"])"}, {"output": "{\"a\": \"aaaAA\", \"b\": \"bb\", \"c\": \"cccCC\", \"d\": \"d\"}", "input": "firstChar([\"aa\", \"bb\", \"cc\", \"aAA\", \"cCC\", \"d\"])"}, {"output": "{}", "input": "firstChar([])"}]}, {"signature": "public boolean lessBy10(int a, int b, int c)", "title": "lessBy10", "difficulty": 148.0, "url": "/prob/p179196", "section": "Logic-1", "summary": "Given three ints, a b c, return true if one of them is 10 or more less than one of the others.", "solution": [], "examples": [{"output": "true", "input": "lessBy10(1, 7, 11)"}, {"output": "false", "input": "lessBy10(1, 7, 10)"}, {"output": "true", "input": "lessBy10(11, 1, 7)"}]}, {"signature": "public int commonTwo(String[] a, String[] b)", "title": "commonTwo", "difficulty": 254.0, "url": "/prob/p100369", "section": "AP-1", "summary": "Start with two arrays of strings, a and b, each in alphabetical order, possibly with duplicates. Return the count of the number of strings which appear in both arrays. The best \"linear\" solution makes a single pass over both arrays, taking advantage of the fact that they are in alphabetical order.", "solution": [], "examples": [{"output": "2", "input": "commonTwo([\"a\", \"c\", \"x\"], [\"b\", \"c\", \"d\", \"x\"])"}, {"output": "3", "input": "commonTwo([\"a\", \"c\", \"x\"], [\"a\", \"b\", \"c\", \"x\", \"z\"])"}, {"output": "3", "input": "commonTwo([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"])"}]}, {"signature": "public int sumNumbers(String str)", "title": "sumNumbers", "difficulty": 330.0, "url": "/prob/p121193", "section": "String-3", "summary": "Given a string, return the sum of the numbers appearing in the string, ignoring all other characters. A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char) tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts a string to an int.)", "solution": [], "examples": [{"output": "123", "input": "sumNumbers(\"abc123xyz\")"}, {"output": "44", "input": "sumNumbers(\"aa11b33\")"}, {"output": "18", "input": "sumNumbers(\"7 11\")"}]}, {"signature": "public boolean tripleUp(int[] nums)", "title": "tripleUp", "difficulty": 263.0, "url": "/prob/p137874", "section": "Array-2", "summary": "Return true if the array contains, somewhere, three increasing adjacent numbers like .... 4, 5, 6, ... or 23, 24, 25.", "solution": [], "examples": [{"output": "true", "input": "tripleUp([1, 4, 5, 6, 2])"}, {"output": "true", "input": "tripleUp([1, 2, 3])"}, {"output": "false", "input": "tripleUp([1, 2, 4])"}]}, {"signature": "public String changeXY(String str)", "title": "changeXY", "difficulty": 336.0, "url": "/prob/p101372", "section": "Recursion-1", "summary": "Given a string, compute recursively (no loops) a new string where all the lowercase 'x' chars have been changed to 'y' chars.", "solution": [], "examples": [{"output": "\"codey\"", "input": "changeXY(\"codex\")"}, {"output": "\"yyhiyy\"", "input": "changeXY(\"xxhixx\")"}, {"output": "\"yhiyhiy\"", "input": "changeXY(\"xhixhix\")"}]}, {"signature": "public List<String> noLong(List<String> strings)", "title": "noLong", "difficulty": 209.0, "url": "/prob/p194496", "section": "Functional-2", "summary": "Given a list of strings, return a list of the strings, omitting any string length 4 or more.", "solution": [], "examples": [{"output": "[\"not\", \"too\"]", "input": "noLong([\"this\", \"not\", \"too\", \"long\"])"}, {"output": "[\"a\", \"bbb\"]", "input": "noLong([\"a\", \"bbb\", \"cccc\"])"}, {"output": "[]", "input": "noLong([\"cccc\", \"cccc\", \"cccc\"])"}]}, {"signature": "public String helloName(String name)", "title": "helloName", "difficulty": 103.0, "url": "/prob/p171896", "section": "String-1", "summary": "Given a string name, e.g. \"Bob\", return a greeting of the form \"Hello Bob!\".", "solution": [], "examples": [{"output": "\"Hello Bob!\"", "input": "helloName(\"Bob\")"}, {"output": "\"Hello Alice!\"", "input": "helloName(\"Alice\")"}, {"output": "\"Hello X!\"", "input": "helloName(\"X\")"}]}, {"signature": "public boolean equalIsNot(String str)", "title": "equalIsNot", "difficulty": 309.0, "url": "/prob/p141736", "section": "String-3", "summary": "Given a string, return true if the number of appearances of \"is\" anywhere in the string is equal to the number of appearances of \"not\" anywhere in the string (case sensitive).", "solution": [], "examples": [{"output": "false", "input": "equalIsNot(\"This is not\")"}, {"output": "true", "input": "equalIsNot(\"This is notnot\")"}, {"output": "true", "input": "equalIsNot(\"noisxxnotyynotxisi\")"}]}, {"signature": "public boolean endsLy(String str)", "title": "endsLy", "difficulty": 148.0, "url": "/prob/p103895", "section": "String-1", "summary": "Given a string, return true if it ends in \"ly\".", "solution": [], "examples": [{"output": "true", "input": "endsLy(\"oddly\")"}, {"output": "false", "input": "endsLy(\"y\")"}, {"output": "false", "input": "endsLy(\"oddy\")"}]}, {"signature": "public int maxMirror(int[] nums)", "title": "maxMirror", "difficulty": 324.0, "url": "/prob/p196409", "section": "Array-3", "summary": "We'll say that a \"mirror\" section in an array is a group of contiguous elements such that somewhere in the array, the same group appears in reverse order. For example, the largest mirror section in {1, 2, 3, 8, 9, 3, 2, 1} is length 3 (the {1, 2, 3} part). Return the size of the largest mirror section found in the given array.", "solution": [], "examples": [{"output": "3", "input": "maxMirror([1, 2, 3, 8, 9, 3, 2, 1])"}, {"output": "3", "input": "maxMirror([1, 2, 1, 4])"}, {"output": "2", "input": "maxMirror([7, 1, 2, 9, 7, 2, 1])"}]}, {"signature": "public boolean isEverywhere(int[] nums, int val)", "title": "isEverywhere", "difficulty": 236.0, "url": "/prob/p110222", "section": "Array-2", "summary": "We'll say that a value is \"everywhere\" in an array if for every pair of adjacent elements in the array, at least one of the pair is that value. Return true if the given value is everywhere in the array.", "solution": [], "examples": [{"output": "true", "input": "isEverywhere([1, 2, 1, 3], 1)"}, {"output": "false", "input": "isEverywhere([1, 2, 1, 3], 2)"}, {"output": "false", "input": "isEverywhere([1, 2, 1, 3, 4], 1)"}]}, {"signature": "public int noTeenSum(int a, int b, int c)", "title": "noTeenSum", "difficulty": 212.0, "url": "/prob/p182879", "section": "Logic-2", "summary": "Given 3 int values, a b c, return their sum. However, if any of the values is a teen -- in the range 13..19 inclusive -- then that value counts as 0, except 15 and 16 do not count as a teens. Write a separate helper \"public int fixTeen(int n) {\"that takes in an int value and returns that value fixed for the teen rule. In this way, you avoid repeating the teen code 3 times (i.e. \"decomposition\"). Define the helper below and at the same indent level as the main noTeenSum().", "solution": [], "examples": [{"output": "6", "input": "noTeenSum(1, 2, 3)"}, {"output": "3", "input": "noTeenSum(2, 13, 1)"}, {"output": "3", "input": "noTeenSum(2, 1, 14)"}]}, {"signature": "public int[] makeEnds(int[] nums)", "title": "makeEnds", "difficulty": 133.0, "url": "/prob/p101230", "section": "Array-1", "summary": "Given an array of ints, return a new array length 2 containing the first and last elements from the original array. The original array will be length 1 or more.", "solution": [], "examples": [{"output": "[1, 3]", "input": "makeEnds([1, 2, 3])"}, {"output": "[1, 4]", "input": "makeEnds([1, 2, 3, 4])"}, {"output": "[7, 2]", "input": "makeEnds([7, 4, 6, 2])"}]}, {"signature": "public boolean xyBalance(String str)", "title": "xyBalance", "difficulty": 224.0, "url": "/prob/p134250", "section": "String-2", "summary": "We'll say that a String is xy-balanced if for all the 'x' chars in the string, there exists a 'y' char somewhere later in the string. So \"xxy\" is balanced, but \"xyx\" is not. One 'y' can balance multiple 'x's. Return true if the given string is xy-balanced.", "solution": [], "examples": [{"output": "true", "input": "xyBalance(\"aaxbby\")"}, {"output": "false", "input": "xyBalance(\"aaxbb\")"}, {"output": "false", "input": "xyBalance(\"yaaxbb\")"}]}, {"signature": "public boolean catDog(String str)", "title": "catDog", "difficulty": 209.0, "url": "/prob/p111624", "section": "String-2", "summary": "Return true if the string \"cat\" and \"dog\" appear the same number of times in the given string.", "solution": [], "examples": [{"output": "true", "input": "catDog(\"catdog\")"}, {"output": "false", "input": "catDog(\"catcat\")"}, {"output": "true", "input": "catDog(\"1cat1cadodog\")"}]}, {"signature": "public Map<String, String> mapAB3(Map<String, String> map)", "title": "mapAB3", "difficulty": 224.0, "url": "/prob/p115012", "section": "Map-1", "summary": "Modify and return the given map as follows: if exactly one of the keys \"a\" or \"b\" has a value in the map (but not both), set the other to have that same value in the map.", "solution": [], "examples": [{"output": "{\"a\": \"aaa\", \"b\": \"aaa\", \"c\": \"cake\"}", "input": "mapAB3({\"a\": \"aaa\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"bbb\", \"b\": \"bbb\", \"c\": \"cake\"}", "input": "mapAB3({\"b\": \"bbb\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"cake\"}", "input": "mapAB3({\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"cake\"})"}]}, {"signature": "public Map<String, String> topping2(Map<String, String> map)", "title": "topping2", "difficulty": 215.0, "url": "/prob/p196458", "section": "Map-1", "summary": "Given a map of food keys and their topping values, modify and return the map as follows: if the key \"ice cream\" has a value, set that as the value for the key \"yogurt\" also. If the key \"spinach\" has a value, change that value to \"nuts\".", "solution": [], "examples": [{"output": "{\"yogurt\": \"cherry\", \"ice cream\": \"cherry\"}", "input": "topping2({\"ice cream\": \"cherry\"})"}, {"output": "{\"yogurt\": \"cherry\", \"spinach\": \"nuts\", \"ice cream\": \"cherry\"}", "input": "topping2({\"spinach\": \"dirt\", \"ice cream\": \"cherry\"})"}, {"output": "{\"yogurt\": \"salt\"}", "input": "topping2({\"yogurt\": \"salt\"})"}]}, {"signature": "public boolean or35(int n)", "title": "or35", "difficulty": 140.0, "url": "/prob/p112564", "section": "Warmup-1", "summary": "Return true if the given non-negative number is a multiple of 3 or a multiple of 5. Use the % \"mod\" operator -- see ", "solution": ["public boolean or35(int n) {\n  return (n % 3 == 0) || (n % 5 == 0);\n}"], "examples": [{"output": "true", "input": "or35(3)"}, {"output": "true", "input": "or35(10)"}, {"output": "false", "input": "or35(8)"}]}, {"signature": "public boolean commonEnd(int[] a, int[] b)", "title": "commonEnd", "difficulty": 112.0, "url": "/prob/p191991", "section": "Array-1", "summary": "Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. Both arrays will be length 1 or more.", "solution": [], "examples": [{"output": "true", "input": "commonEnd([1, 2, 3], [7, 3])"}, {"output": "false", "input": "commonEnd([1, 2, 3], [7, 3, 2])"}, {"output": "true", "input": "commonEnd([1, 2, 3], [1, 3])"}]}, {"signature": "public boolean inOrder(int a, int b, int c, boolean bOk)", "title": "inOrder", "difficulty": 139.0, "url": "/prob/p154188", "section": "Logic-1", "summary": "Given three ints, a b c, return true if b is greater than a, and c is greater than b. However, with the exception that if \"bOk\" is true, b does not need to be greater than a.", "solution": [], "examples": [{"output": "true", "input": "inOrder(1, 2, 4, false)"}, {"output": "false", "input": "inOrder(1, 2, 1, false)"}, {"output": "true", "input": "inOrder(1, 1, 2, true)"}]}, {"signature": "public int maxMod5(int a, int b)", "title": "maxMod5", "difficulty": 154.0, "url": "/prob/p115384", "section": "Logic-1", "summary": "Given two int values, return whichever value is larger. However if the two values have the same remainder when divided by 5, then the return the smaller value. However, in all cases, if the two values are the same, return 0. Note: the % \"mod\" operator computes the remainder, e.g. 7 % 5 is 2.", "solution": [], "examples": [{"output": "3", "input": "maxMod5(2, 3)"}, {"output": "6", "input": "maxMod5(6, 2)"}, {"output": "3", "input": "maxMod5(3, 2)"}]}, {"signature": "public String backAround(String str)", "title": "backAround", "difficulty": 139.0, "url": "/prob/p161642", "section": "Warmup-1", "summary": "Given a string, take the last char and return a new string with the last char added at the front and back, so \"cat\" yields \"tcatt\". The original string will be length 1 or more.", "solution": ["public String backAround(String str) {\n  // Get the last char\n  String last = str.substring(str.length() - 1);\n  return last + str + last;\n}"], "examples": [{"output": "\"tcatt\"", "input": "backAround(\"cat\")"}, {"output": "\"oHelloo\"", "input": "backAround(\"Hello\")"}, {"output": "\"aaa\"", "input": "backAround(\"a\")"}]}, {"signature": "public boolean startHi(String str)", "title": "startHi", "difficulty": 145.0, "url": "/prob/p191022", "section": "Warmup-1", "summary": "Given a string, return true if the string starts with \"hi\" and false otherwise.", "solution": ["public boolean startHi(String str) {\n  // First test if the string is not at least length 2\n  // (so the substring() below does not go past the end).\n  if (str.length() < 2) return false;\n  \n  // Pull out the string of the first two chars\n  String firstTwo = str.substring(0, 2);\n  \n  // Test if it is equal to \"hi\"\n  if (firstTwo.equals(\"hi\")) {\n    return true;\n  } else {\n    return false;\n  }\n  // This last part can be shortened to: return(firstTwo.equals(\"hi\"));\n}"], "examples": [{"output": "true", "input": "startHi(\"hi there\")"}, {"output": "true", "input": "startHi(\"hi\")"}, {"output": "false", "input": "startHi(\"hello hi\")"}]}, {"signature": "public int array667(int[] nums)", "title": "array667", "difficulty": 239.0, "url": "/prob/p110019", "section": "Warmup-2", "summary": "Given an array of ints, return the number of times that two 6's are next to each other in the array. Also count instances where the second \"6\" is actually a 7.", "solution": ["public int array667(int[] nums) {\n  int count = 0;\n  // Note: iterate to length-1, so can use i+1 in the loop\n  for (int i=0; i < (nums.length-1); i++) {\n    if (nums[i] == 6) {\n      if (nums[i+1] == 6 || nums[i+1] == 7) {\n        count++;\n      }\n    }\n  }\n  return count;\n}"], "examples": [{"output": "1", "input": "array667([6, 6, 2])"}, {"output": "1", "input": "array667([6, 6, 2, 6])"}, {"output": "1", "input": "array667([6, 7, 2, 6])"}]}, {"signature": "public boolean in3050(int a, int b)", "title": "in3050", "difficulty": 175.0, "url": "/prob/p132134", "section": "Warmup-1", "summary": "Given 2 int values, return true if they are both in the range 30..40 inclusive, or they are both in the range 40..50 inclusive.", "solution": ["public boolean in3050(int a, int b) {\n  if (a >= 30 && a <= 40 && b >= 30 && b <= 40) {\n    return true;\n  }\n  if (a >= 40 && a <= 50 && b >= 40 && b <= 50) {\n    return true;\n  }\n  return false;\n  // This could be written as one very large expression,\n  // connecting the two main parts with ||\n}"], "examples": [{"output": "true", "input": "in3050(30, 31)"}, {"output": "false", "input": "in3050(30, 41)"}, {"output": "true", "input": "in3050(40, 50)"}]}, {"signature": "public String repeatEnd(String str, int n)", "title": "repeatEnd", "difficulty": 230.0, "url": "/prob/p152339", "section": "String-2", "summary": "Given a string and an int n, return a string made of n repetitions of the last n characters of the string. You may assume that n is between 0 and the length of the string, inclusive.", "solution": [], "examples": [{"output": "\"llollollo\"", "input": "repeatEnd(\"Hello\", 3)"}, {"output": "\"lolo\"", "input": "repeatEnd(\"Hello\", 2)"}, {"output": "\"o\"", "input": "repeatEnd(\"Hello\", 1)"}]}, {"signature": "public int[] makeLast(int[] nums)", "title": "makeLast", "difficulty": 142.0, "url": "/prob/p137188", "section": "Array-1", "summary": "Given an int array, return a new array with double the length where its last element is the same as the original array, and all the other elements are 0. The original array will be length 1 or more. Note: by default, a new int array contains all 0's.", "solution": [], "examples": [{"output": "[0, 0, 0, 0, 0, 6]", "input": "makeLast([4, 5, 6])"}, {"output": "[0, 0, 0, 2]", "input": "makeLast([1, 2])"}, {"output": "[0, 3]", "input": "makeLast([3])"}]}, {"signature": "public String wordAppend(String[] strings)", "title": "wordAppend", "difficulty": 356.0, "url": "/prob/p103593", "section": "Map-2", "summary": "Loop over the given array of strings to build a result string like this: when a string appears the 2nd, 4th, 6th, etc. time in the array, append the string to the result. Return the empty string if no string appears a 2nd time.", "solution": [], "examples": [{"output": "\"a\"", "input": "wordAppend([\"a\", \"b\", \"a\"])"}, {"output": "\"aa\"", "input": "wordAppend([\"a\", \"b\", \"a\", \"c\", \"a\", \"d\", \"a\"])"}, {"output": "\"a\"", "input": "wordAppend([\"a\", \"\", \"a\"])"}]}, {"signature": "public String[] allSwap(String[] strings)", "title": "allSwap", "difficulty": 377.0, "url": "/prob/p134133", "section": "Map-2", "summary": "We'll say that 2 strings \"match\" if they are non-empty and their first chars are the same. Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier string in the array, swap the 2 strings in the array. When a position in the array has been swapped, it no longer matches anything. Using a map, this can be solved making just one pass over the array. More difficult than it looks.", "solution": [], "examples": [{"output": "[\"ac\", \"ab\"]", "input": "allSwap([\"ab\", \"ac\"])"}, {"output": "[\"ay\", \"by\", \"cy\", \"cx\", \"bx\", \"ax\", \"azz\", \"aaa\"]", "input": "allSwap([\"ax\", \"bx\", \"cx\", \"cy\", \"by\", \"ay\", \"aaa\", \"azz\"])"}, {"output": "[\"ay\", \"by\", \"ax\", \"bx\", \"aj\", \"ai\", \"by\", \"bx\"]", "input": "allSwap([\"ax\", \"bx\", \"ay\", \"by\", \"ai\", \"aj\", \"bx\", \"by\"])"}]}, {"signature": "public boolean scores100(int[] scores)", "title": "scores100", "difficulty": 206.0, "url": "/prob/p179487", "section": "AP-1", "summary": "Given an array of scores, return true if there are scores of 100 next to each other in the array. The array length will be at least 2.", "solution": [], "examples": [{"output": "true", "input": "scores100([1, 100, 100])"}, {"output": "false", "input": "scores100([1, 100, 99, 100])"}, {"output": "true", "input": "scores100([100, 1, 100, 100])"}]}, {"signature": "public int matchUp(String[] a, String[] b)", "title": "matchUp", "difficulty": 236.0, "url": "/prob/p139677", "section": "AP-1", "summary": "Given 2 arrays that are the same length containing strings, compare the 1st string in one array to the 1st string in the other array, the 2nd to the 2nd and so on. Count the number of times that the 2 strings are non-empty and start with the same char. The strings may be any length, including 0.", "solution": [], "examples": [{"output": "1", "input": "matchUp([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"xx\", \"bb\"])"}, {"output": "2", "input": "matchUp([\"aa\", \"bb\", \"cc\"], [\"aaa\", \"b\", \"bb\"])"}, {"output": "1", "input": "matchUp([\"aa\", \"bb\", \"cc\"], [\"\", \"\", \"ccc\"])"}]}, {"signature": "public int countCode(String str)", "title": "countCode", "difficulty": 212.0, "url": "/prob/p123614", "section": "String-2", "summary": "Return the number of times that the string \"code\" appears anywhere in the given string, except we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.", "solution": [], "examples": [{"output": "1", "input": "countCode(\"aaacodebbb\")"}, {"output": "2", "input": "countCode(\"codexxcode\")"}, {"output": "2", "input": "countCode(\"cozexxcope\")"}]}, {"signature": "public boolean noTriples(int[] nums)", "title": "noTriples", "difficulty": 242.0, "url": "/prob/p170221", "section": "Warmup-2", "summary": "Given an array of ints, we'll say that a triple is a value appearing 3 times in a row in the array. Return true if the array does not contain any triples.", "solution": ["public boolean noTriples(int[] nums) {\n  // Iterate < length-2, so can use i+1 and i+2 in the loop.\n  // Return false immediately if every seeing a triple.\n  for (int i=0; i < (nums.length-2); i++) {\n    int first = nums[i];\n    if (nums[i+1]==first && nums[i+2]==first) return false;\n  }\n  \n  // If we get here ... no triples.\n  return true;\n}"], "examples": [{"output": "true", "input": "noTriples([1, 1, 2, 2, 1])"}, {"output": "false", "input": "noTriples([1, 1, 2, 2, 2, 1])"}, {"output": "false", "input": "noTriples([1, 1, 1, 2, 2, 2, 1])"}]}, {"signature": "public boolean nearTen(int num)", "title": "nearTen", "difficulty": 124.0, "url": "/prob/p193613", "section": "Logic-1", "summary": "Given a non-negative number \"num\", return true if num is within 2 of a multiple of 10. Note: (a % b) is the remainder of dividing a by b, so (7 % 5) is 2. See also: ", "solution": [], "examples": [{"output": "true", "input": "nearTen(12)"}, {"output": "false", "input": "nearTen(17)"}, {"output": "true", "input": "nearTen(19)"}]}, {"signature": "public boolean firstLast6(int[] nums)", "title": "firstLast6", "difficulty": 103.0, "url": "/prob/p185685", "section": "Array-1", "summary": "Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more.", "solution": [], "examples": [{"output": "true", "input": "firstLast6([1, 2, 6])"}, {"output": "true", "input": "firstLast6([6, 1, 2, 3])"}, {"output": "false", "input": "firstLast6([13, 6, 1, 2, 3])"}]}, {"signature": "public String withoutEnd(String str)", "title": "withoutEnd", "difficulty": 124.0, "url": "/prob/p130896", "section": "String-1", "summary": "Given a string, return a version without the first and last char, so \"Hello\" yields \"ell\". The string length will be at least 2.", "solution": [], "examples": [{"output": "\"ell\"", "input": "withoutEnd(\"Hello\")"}, {"output": "\"av\"", "input": "withoutEnd(\"java\")"}, {"output": "\"odin\"", "input": "withoutEnd(\"coding\")"}]}, {"signature": "public Map<String, String> mapAB2(Map<String, String> map)", "title": "mapAB2", "difficulty": 221.0, "url": "/prob/p115011", "section": "Map-1", "summary": "Modify and return the given map as follows: if the keys \"a\" and \"b\" are both in the map and have equal values, remove them both.", "solution": [], "examples": [{"output": "{\"c\": \"cake\"}", "input": "mapAB2({\"a\": \"aaa\", \"b\": \"aaa\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"bbb\"}", "input": "mapAB2({\"a\": \"aaa\", \"b\": \"bbb\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"aaa\"}", "input": "mapAB2({\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"aaa\"})"}]}, {"signature": "public String middleThree(String str)", "title": "middleThree", "difficulty": 157.0, "url": "/prob/p115863", "section": "String-1", "summary": "Given a string of odd length, return the string length 3 from its middle, so \"Candy\" yields \"and\". The string length will be at least 3.", "solution": [], "examples": [{"output": "\"and\"", "input": "middleThree(\"Candy\")"}, {"output": "\"and\"", "input": "middleThree(\"and\")"}, {"output": "\"lvi\"", "input": "middleThree(\"solving\")"}]}, {"signature": "public int sumHeights2(int[] heights, int start, int end)", "title": "sumHeights2", "difficulty": 246.1, "url": "/prob/p157900", "section": "AP-1", "summary": "(A variation on the sumHeights problem.) We have an array of heights, representing the altitude along a walking trail. Given start/end indexes into the array, return the sum of the changes for a walk beginning at the start index and ending at the end index, however increases in height count double. For example, with the heights {5, 3, 6, 7, 2} and start=2, end=4 yields a sum of 1*2 + 5 = 7. The start end end index will both be valid indexes into the array with start <= end.", "solution": [], "examples": [{"output": "7", "input": "sumHeights2([5, 3, 6, 7, 2], 2, 4)"}, {"output": "2", "input": "sumHeights2([5, 3, 6, 7, 2], 0, 1)"}, {"output": "15", "input": "sumHeights2([5, 3, 6, 7, 2], 0, 4)"}]}, {"signature": "public int[] copyEndy(int[] nums, int count)", "title": "copyEndy", "difficulty": 233.0, "url": "/prob/p130124", "section": "AP-1", "summary": "We'll say that a positive int n is \"endy\" if it is in the range 0..10 or 90..100 (inclusive). Given an array of positive ints, return a new array of length \"count\" containing the first endy numbers from the original array. Decompose out a separate isEndy(int n) method to test if a number is endy. The original array will contain at least \"count\" endy numbers.", "solution": [], "examples": [{"output": "[9, 90]", "input": "copyEndy([9, 11, 90, 22, 6], 2)"}, {"output": "[9, 90, 6]", "input": "copyEndy([9, 11, 90, 22, 6], 3)"}, {"output": "[1, 1]", "input": "copyEndy([12, 1, 1, 13, 0, 20], 2)"}]}, {"signature": "public int arrayCount9(int[] nums)", "title": "arrayCount9", "difficulty": 218.0, "url": "/prob/p184031", "section": "Warmup-2", "summary": "Given an array of ints, return the number of 9's in the array.", "solution": ["public int arrayCount9(int[] nums) {\n  int count = 0;\n  for (int i=0; i<nums.length; i++) {\n    if (nums[i] == 9) {\n      count++;\n    }\n  }\n  return count;\n}"], "examples": [{"output": "1", "input": "arrayCount9([1, 2, 9])"}, {"output": "2", "input": "arrayCount9([1, 9, 9])"}, {"output": "3", "input": "arrayCount9([1, 9, 9, 3, 9])"}]}, {"signature": "public int[] pre4(int[] nums)", "title": "pre4", "difficulty": 272.0, "url": "/prob/p100246", "section": "Array-2", "summary": "Given a non-empty array of ints, return a new array containing the elements from the original array that come before the first 4 in the original array. The original array will contain at least one 4. Note that it is valid in java to create an array of length 0.", "solution": [], "examples": [{"output": "[1, 2]", "input": "pre4([1, 2, 4, 1])"}, {"output": "[3, 1]", "input": "pre4([3, 1, 4])"}, {"output": "[1]", "input": "pre4([1, 4, 4])"}]}, {"signature": "public int maxTriple(int[] nums)", "title": "maxTriple", "difficulty": 169.0, "url": "/prob/p185176", "section": "Array-1", "summary": "Given an array of ints of odd length, look at the first, last, and middle values in the array and return the largest. The array length will be a least 1.", "solution": [], "examples": [{"output": "3", "input": "maxTriple([1, 2, 3])"}, {"output": "5", "input": "maxTriple([1, 5, 3])"}, {"output": "5", "input": "maxTriple([5, 2, 3])"}]}, {"signature": "public String[] mergeTwo(String[] a, String[] b, int n)", "title": "mergeTwo", "difficulty": 251.0, "url": "/prob/p139150", "section": "AP-1", "summary": "Start with two arrays of strings, A and B, each with its elements in alphabetical order and without duplicates. Return a new array containing the first N elements from the two arrays. The result array should be in alphabetical order and without duplicates. A and B will both have a length which is N or more. The best \"linear\" solution makes a single pass over A and B, taking advantage of the fact that they are in alphabetical order, copying elements directly to the new array.", "solution": [], "examples": [{"output": "[\"a\", \"b\", \"c\"]", "input": "mergeTwo([\"a\", \"c\", \"z\"], [\"b\", \"f\", \"z\"], 3)"}, {"output": "[\"a\", \"c\", \"f\"]", "input": "mergeTwo([\"a\", \"c\", \"z\"], [\"c\", \"f\", \"z\"], 3)"}, {"output": "[\"c\", \"f\", \"g\"]", "input": "mergeTwo([\"f\", \"g\", \"z\"], [\"c\", \"f\", \"g\"], 3)"}]}, {"signature": "public String firstHalf(String str)", "title": "firstHalf", "difficulty": 121.0, "url": "/prob/p172267", "section": "String-1", "summary": "Given a string of even length, return the first half. So the string \"WooHoo\" yields \"Woo\".", "solution": [], "examples": [{"output": "\"Woo\"", "input": "firstHalf(\"WooHoo\")"}, {"output": "\"Hello\"", "input": "firstHalf(\"HelloThere\")"}, {"output": "\"abc\"", "input": "firstHalf(\"abcdef\")"}]}, {"signature": "public int countPairs(String str)", "title": "countPairs", "difficulty": 363.0, "url": "/prob/p154048", "section": "Recursion-1", "summary": "We'll say that a \"pair\" in a string is two instances of a char separated by a char. So \"AxA\" the A's make a pair. Pair's can overlap, so \"AxAxA\" contains 3 pairs -- 2 for A and 1 for x. Recursively compute the number of pairs in the given string.", "solution": [], "examples": [{"output": "1", "input": "countPairs(\"axa\")"}, {"output": "2", "input": "countPairs(\"axax\")"}, {"output": "1", "input": "countPairs(\"axbx\")"}]}, {"signature": "public boolean less20(int n)", "title": "less20", "difficulty": 123.8, "url": "/prob/p133158", "section": "Logic-1", "summary": "Return true if the given non-negative number is 1 or 2 ", "solution": [], "examples": [{"output": "true", "input": "less20(18)"}, {"output": "true", "input": "less20(19)"}, {"output": "false", "input": "less20(20)"}]}, {"signature": "public String notString(String str)", "title": "notString", "difficulty": 127.0, "url": "/prob/p191914", "section": "Warmup-1", "summary": "Given a string, return a new string where \"not \" has been added to the front. However, if the string already begins with \"not\", return the string unchanged. Note: use .equals() to compare 2 strings.", "solution": ["public String notString(String str) {\n  if (str.length() >= 3 && str.substring(0, 3).equals(\"not\")) {\n    return str;\n  }\n  \n  return \"not \" + str;\n}"], "examples": [{"output": "\"not candy\"", "input": "notString(\"candy\")"}, {"output": "\"not x\"", "input": "notString(\"x\")"}, {"output": "\"not bad\"", "input": "notString(\"not bad\")"}]}, {"signature": "public String fizzString(String str)", "title": "fizzString", "difficulty": 135.0, "url": "/prob/p137136", "section": "Logic-1", "summary": "Given a string str, if the string starts with \"f\" return \"Fizz\". If the string ends with \"b\" return \"Buzz\". If both the \"f\" and \"b\" conditions are true, return \"FizzBuzz\". In all other cases, return the string unchanged. (See also: ", "solution": [], "examples": [{"output": "\"Fizz\"", "input": "fizzString(\"fig\")"}, {"output": "\"Buzz\"", "input": "fizzString(\"dib\")"}, {"output": "\"FizzBuzz\"", "input": "fizzString(\"fib\")"}]}, {"signature": "public String missingChar(String str, int n)", "title": "missingChar", "difficulty": 130.0, "url": "/prob/p190570", "section": "Warmup-1", "summary": "Given a non-empty string and an int n, return a new string where the char at index n has been removed. The value of n will be a valid index of a char in the original string (i.e. n will be in the range 0..str.length()-1 inclusive).", "solution": ["public String missingChar(String str, int n) {\n  String front = str.substring(0, n);\n  \n  // Start this substring at n+1 to omit the char.\n  // Can also be shortened to just str.substring(n+1)\n  // which goes through the end of the string.\n  String back = str.substring(n+1, str.length());\n  \n  return front + back;\n}"], "examples": [{"output": "\"ktten\"", "input": "missingChar(\"kitten\", 1)"}, {"output": "\"itten\"", "input": "missingChar(\"kitten\", 0)"}, {"output": "\"kittn\"", "input": "missingChar(\"kitten\", 4)"}]}, {"signature": "public boolean scoresClump(int[] scores)", "title": "scoresClump", "difficulty": 209.0, "url": "/prob/p194530", "section": "AP-1", "summary": "Given an array of scores sorted in increasing order, return true if the array contains 3 adjacent scores that differ from each other by at most 2, such as with {3, 4, 5} or {3, 5, 5}.", "solution": [], "examples": [{"output": "true", "input": "scoresClump([3, 4, 5])"}, {"output": "false", "input": "scoresClump([3, 4, 6])"}, {"output": "true", "input": "scoresClump([1, 3, 5, 5])"}]}, {"signature": "public boolean more20(int n)", "title": "more20", "difficulty": 122.4, "url": "/prob/p118290", "section": "Logic-1", "summary": "Return true if the given non-negative number is 1 or 2 more than a multiple of 20. See also: ", "solution": [], "examples": [{"output": "false", "input": "more20(20)"}, {"output": "true", "input": "more20(21)"}, {"output": "true", "input": "more20(22)"}]}, {"signature": "public boolean in1020(int a, int b)", "title": "in1020", "difficulty": 151.0, "url": "/prob/p144535", "section": "Warmup-1", "summary": "Given 2 int values, return true if either of them is in the range 10..20 inclusive.", "solution": ["public boolean in1020(int a, int b) {\n  return ((a >= 10 && a <= 20) || (b >= 10 && b <= 20));\n}"], "examples": [{"output": "true", "input": "in1020(12, 99)"}, {"output": "true", "input": "in1020(21, 12)"}, {"output": "false", "input": "in1020(8, 99)"}]}, {"signature": "public String[] wordsFront(String[] words, int n)", "title": "wordsFront", "difficulty": 218.0, "url": "/prob/p183837", "section": "AP-1", "summary": "Given an array of strings, return a new array containing the first N strings. N will be in the range 1..length.", "solution": [], "examples": [{"output": "[\"a\"]", "input": "wordsFront([\"a\", \"b\", \"c\", \"d\"], 1)"}, {"output": "[\"a\", \"b\"]", "input": "wordsFront([\"a\", \"b\", \"c\", \"d\"], 2)"}, {"output": "[\"a\", \"b\", \"c\"]", "input": "wordsFront([\"a\", \"b\", \"c\", \"d\"], 3)"}]}, {"signature": "public int fibonacci(int n)", "title": "fibonacci", "difficulty": 309.0, "url": "/prob/p120015", "section": "Recursion-1", "summary": "The fibonacci sequence is a famous bit of mathematics, and it happens to have a recursive definition. The first two values in the sequence are 0 and 1 (essentially 2 base cases). Each subsequent value is the sum of the previous two values, so the whole sequence is: 0, 1, 1, 2, 3, 5, 8, 13, 21 and so on. Define a recursive fibonacci(n) method that returns the nth fibonacci number, with n=0 representing the start of the sequence.", "solution": [], "examples": [{"output": "0", "input": "fibonacci(0)"}, {"output": "1", "input": "fibonacci(1)"}, {"output": "1", "input": "fibonacci(2)"}]}, {"signature": "public String without2(String str)", "title": "without2", "difficulty": 187.0, "url": "/prob/p142247", "section": "String-1", "summary": "Given a string, if a length 2 substring appears at both its beginning and end, return a string without the substring at the beginning, so \"HelloHe\" yields \"lloHe\". The substring may overlap with itself, so \"Hi\" yields \"\". Otherwise, return the original string unchanged.", "solution": [], "examples": [{"output": "\"lloHe\"", "input": "without2(\"HelloHe\")"}, {"output": "\"HelloHi\"", "input": "without2(\"HelloHi\")"}, {"output": "\"\"", "input": "without2(\"Hi\")"}]}, {"signature": "public boolean specialEleven(int n)", "title": "specialEleven", "difficulty": 122.3, "url": "/prob/p100962", "section": "Logic-1", "summary": "We'll say a number is special if it is a multiple of 11 or if it is one more than a multiple of 11. Return true if the given non-negative number is special. Use the % \"mod\" operator -- see ", "solution": [], "examples": [{"output": "true", "input": "specialEleven(22)"}, {"output": "true", "input": "specialEleven(23)"}, {"output": "false", "input": "specialEleven(24)"}]}, {"signature": "public int[] make2(int[] a, int[] b)", "title": "make2", "difficulty": 178.0, "url": "/prob/p143461", "section": "Array-1", "summary": "Given 2 int arrays, a and b, return a new array length 2 containing, as much as will fit, the elements from a followed by the elements from b. The arrays may be any length, including 0, but there will be 2 or more elements available between the 2 arrays.", "solution": [], "examples": [{"output": "[4, 5]", "input": "make2([4, 5], [1, 2, 3])"}, {"output": "[4, 1]", "input": "make2([4], [1, 2, 3])"}, {"output": "[1, 2]", "input": "make2([], [1, 2])"}]}, {"signature": "public boolean groupSumClump(int start, int[] nums, int target)", "title": "groupSumClump", "difficulty": 415.0, "url": "/prob/p105136", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target, with this additional constraint: if there are numbers in the array that are adjacent and the identical value, they must either all be chosen, or none of them chosen. For example, with the array {1, 2, 2, 2, 5, 2}, either all three 2's in the middle must be chosen or not, all as a group. (one loop can be used to find the extent of the identical values).", "solution": [], "examples": [{"output": "true", "input": "groupSumClump(0, [2, 4, 8], 10)"}, {"output": "true", "input": "groupSumClump(0, [1, 2, 4, 8, 1], 14)"}, {"output": "false", "input": "groupSumClump(0, [2, 4, 4, 8], 14)"}]}, {"signature": "public boolean has12(int[] nums)", "title": "has12", "difficulty": 248.0, "url": "/prob/p169260", "section": "Array-2", "summary": "Given an array of ints, return true if there is a 1 in the array with a 2 somewhere later in the array.", "solution": [], "examples": [{"output": "true", "input": "has12([1, 3, 2])"}, {"output": "true", "input": "has12([3, 1, 2])"}, {"output": "true", "input": "has12([3, 1, 4, 5, 2])"}]}, {"signature": "public int loneSum(int a, int b, int c)", "title": "loneSum", "difficulty": 206.0, "url": "/prob/p148972", "section": "Logic-2", "summary": "Given 3 int values, a b c, return their sum. However, if one of the values is the same as another of the values, it does not count towards the sum.", "solution": [], "examples": [{"output": "6", "input": "loneSum(1, 2, 3)"}, {"output": "2", "input": "loneSum(3, 2, 3)"}, {"output": "0", "input": "loneSum(3, 3, 3)"}]}, {"signature": "public boolean prefixAgain(String str, int n)", "title": "prefixAgain", "difficulty": 239.0, "url": "/prob/p136417", "section": "String-2", "summary": "Given a string, consider the prefix string made of the first N chars of the string. Does that prefix string appear somewhere else in the string? Assume that the string is not empty and that N is in the range 1..str.length().", "solution": [], "examples": [{"output": "true", "input": "prefixAgain(\"abXYabc\", 1)"}, {"output": "true", "input": "prefixAgain(\"abXYabc\", 2)"}, {"output": "false", "input": "prefixAgain(\"abXYabc\", 3)"}]}, {"signature": "public boolean nearHundred(int n)", "title": "nearHundred", "difficulty": 121.0, "url": "/prob/p184004", "section": "Warmup-1", "summary": "Given an int n, return true if it is within 10 of 100 or 200. Note: Math.abs(num) computes the absolute value of a number.", "solution": ["public boolean nearHundred(int n) {\n  return ((Math.abs(100 - n) <= 10) ||\n    (Math.abs(200 - n) <= 10));\n}"], "examples": [{"output": "true", "input": "nearHundred(93)"}, {"output": "true", "input": "nearHundred(90)"}, {"output": "false", "input": "nearHundred(89)"}]}, {"signature": "public int strDist(String str, String sub)", "title": "strDist", "difficulty": 390.0, "url": "/prob/p195413", "section": "Recursion-1", "summary": "Given a string and a non-empty substring ", "solution": [], "examples": [{"output": "9", "input": "strDist(\"catcowcat\", \"cat\")"}, {"output": "3", "input": "strDist(\"catcowcat\", \"cow\")"}, {"output": "9", "input": "strDist(\"cccatcowcatxx\", \"cat\")"}]}, {"signature": "public List<String> lower(List<String> strings)", "title": "lower", "difficulty": 221.0, "url": "/prob/p186894", "section": "Functional-1", "summary": "Given a list of strings, return a list where each string is converted to lower case (Note: String toLowerCase() method).", "solution": [], "examples": [{"output": "[\"hello\", \"hi\"]", "input": "lower([\"Hello\", \"Hi\"])"}, {"output": "[\"aaa\", \"bbb\", \"ccc\"]", "input": "lower([\"AAA\", \"BBB\", \"ccc\"])"}, {"output": "[\"kitten\", \"chocolate\"]", "input": "lower([\"KitteN\", \"ChocolaTE\"])"}]}, {"signature": "public boolean hasTeen(int a, int b, int c)", "title": "hasTeen", "difficulty": 154.0, "url": "/prob/p178986", "section": "Warmup-1", "summary": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 3 int values, return true if 1 or more of them are teen.", "solution": ["public boolean hasTeen(int a, int b, int c) {\n  // Here it is written as one big expression,\n  // vs. a series of if-statements.\n  return (a>=13 && a<=19) ||\n         (b>=13 && b<=19) ||\n         (c>=13 && c<=19);\n}"], "examples": [{"output": "true", "input": "hasTeen(13, 20, 10)"}, {"output": "true", "input": "hasTeen(20, 19, 10)"}, {"output": "true", "input": "hasTeen(20, 10, 13)"}]}, {"signature": "public int[] biggerTwo(int[] a, int[] b)", "title": "biggerTwo", "difficulty": 154.0, "url": "/prob/p109537", "section": "Array-1", "summary": "Start with 2 int arrays, a and b, each length 2. Consider the sum of the values in each array. Return the array which has the largest sum. In event of a tie, return a.", "solution": [], "examples": [{"output": "[3, 4]", "input": "biggerTwo([1, 2], [3, 4])"}, {"output": "[3, 4]", "input": "biggerTwo([3, 4], [1, 2])"}, {"output": "[1, 2]", "input": "biggerTwo([1, 1], [1, 2])"}]}, {"signature": "public boolean twoTwo(int[] nums)", "title": "twoTwo", "difficulty": 257.0, "url": "/prob/p102145", "section": "Array-2", "summary": "Given an array of ints, return true if every 2 that appears in the array is next to another 2.", "solution": [], "examples": [{"output": "true", "input": "twoTwo([4, 2, 2, 3])"}, {"output": "true", "input": "twoTwo([2, 2, 4])"}, {"output": "false", "input": "twoTwo([2, 2, 4, 2])"}]}, {"signature": "public int roundSum(int a, int b, int c)", "title": "roundSum", "difficulty": 214.0, "url": "/prob/p186753", "section": "Logic-2", "summary": "For this problem, we'll round an int value up to the next multiple of 10 if its rightmost digit is 5 or more, so 15 rounds up to 20. Alternately, round down to the previous multiple of 10 if its rightmost digit is less than 5, so 12 rounds down to 10. Given 3 ints, a b c, return the sum of their rounded values. To avoid code repetition, write a separate helper \"public int round10(int num) {\" and call it 3 times. Write the helper entirely below and at the same indent level as roundSum().", "solution": [], "examples": [{"output": "60", "input": "roundSum(16, 17, 18)"}, {"output": "30", "input": "roundSum(12, 13, 14)"}, {"output": "10", "input": "roundSum(6, 4, 4)"}]}, {"signature": "public boolean loneTeen(int a, int b)", "title": "loneTeen", "difficulty": 157.0, "url": "/prob/p165701", "section": "Warmup-1", "summary": "We'll say that a number is \"teen\" if it is in the range 13..19 inclusive. Given 2 int values, return true if one or the other is teen, but not both.", "solution": ["public boolean loneTeen(int a, int b) {\n  // Store teen-ness in boolean local vars first. Boolean local\n  // vars like this are a little rare, but here they work great.\n  boolean aTeen = (a >= 13 && a <= 19);\n  boolean bTeen = (b >= 13 && b <= 19);\n  \n  return (aTeen && !bTeen) || (!aTeen && bTeen);\n  // Translation: one or the other, but not both.\n  // Alternately could use the Java xor operator, but it's obscure.\n}"], "examples": [{"output": "true", "input": "loneTeen(13, 99)"}, {"output": "true", "input": "loneTeen(21, 19)"}, {"output": "false", "input": "loneTeen(13, 13)"}]}, {"signature": "public int sumLimit(int a, int b)", "title": "sumLimit", "difficulty": 169.0, "url": "/prob/p118077", "section": "Logic-1", "summary": "Given 2 non-negative ints, a and b, return their sum, so long as the sum has the same number of digits as a. If the sum has more digits than a, just return a without b. (Note: one way to compute the number of digits of a non-negative int n is to convert it to a string with String.valueOf(n) and then check the length of the string.)", "solution": [], "examples": [{"output": "5", "input": "sumLimit(2, 3)"}, {"output": "8", "input": "sumLimit(8, 3)"}, {"output": "9", "input": "sumLimit(8, 1)"}]}, {"signature": "public boolean icyHot(int temp1, int temp2)", "title": "icyHot", "difficulty": 148.0, "url": "/prob/p192082", "section": "Warmup-1", "summary": "Given two temperatures, return true if one is less than 0 and the other is greater than 100.", "solution": ["public boolean icyHot(int temp1, int temp2) {\n  if ((temp1 < 0 && temp2 > 100) || (temp1 > 100 && temp2 < 0)) {\n    return true;\n  } else {\n    return false;\n  }\n  // Could be written as: return ((temp1 < 0 && ...));\n}"], "examples": [{"output": "true", "input": "icyHot(120, -1)"}, {"output": "true", "input": "icyHot(-1, 120)"}, {"output": "false", "input": "icyHot(2, 120)"}]}, {"signature": "public String comboString(String a, String b)", "title": "comboString", "difficulty": 127.0, "url": "/prob/p168564", "section": "String-1", "summary": "Given 2 strings, a and b, return a string of the form short+long+short, with the shorter string on the outside and the longer string on the inside. The strings will not be the same length, but they may be empty (length 0).", "solution": [], "examples": [{"output": "\"hiHellohi\"", "input": "comboString(\"Hello\", \"hi\")"}, {"output": "\"hiHellohi\"", "input": "comboString(\"hi\", \"Hello\")"}, {"output": "\"baaab\"", "input": "comboString(\"aaa\", \"b\")"}]}, {"signature": "public String startOz(String str)", "title": "startOz", "difficulty": 166.0, "url": "/prob/p199720", "section": "Warmup-1", "summary": "Given a string, return a string made of the first 2 chars (if present), however include first char only if it is 'o' and include the second only if it is 'z', so \"ozymandias\" yields \"oz\".", "solution": ["public String startOz(String str) {\n  String result = \"\";\n  \n  if (str.length() >= 1 && str.charAt(0)=='o') {\n    result = result + str.charAt(0);\n  }\n  \n  if (str.length() >= 2 && str.charAt(1)=='z') {\n    result = result + str.charAt(1);\n  }\n  \n  return result;\n}"], "examples": [{"output": "\"oz\"", "input": "startOz(\"ozymandias\")"}, {"output": "\"z\"", "input": "startOz(\"bzoo\")"}, {"output": "\"o\"", "input": "startOz(\"oxx\")"}]}, {"signature": "public boolean sameStarChar(String str)", "title": "sameStarChar", "difficulty": 248.0, "url": "/prob/p194491", "section": "String-2", "summary": "Returns true if for every '*' (star) in the string, if there are chars both immediately before and after the star, they are the same.", "solution": [], "examples": [{"output": "true", "input": "sameStarChar(\"xy*yzz\")"}, {"output": "false", "input": "sameStarChar(\"xy*zzz\")"}, {"output": "true", "input": "sameStarChar(\"*xa*az\")"}]}, {"signature": "public String doubleChar(String str)", "title": "doubleChar", "difficulty": 203.0, "url": "/prob/p165312", "section": "String-2", "summary": "Given a string, return a string where for every char in the original, there are two chars.", "solution": [], "examples": [{"output": "\"TThhee\"", "input": "doubleChar(\"The\")"}, {"output": "\"AAAAbbbb\"", "input": "doubleChar(\"AAbb\")"}, {"output": "\"HHii--TThheerree\"", "input": "doubleChar(\"Hi-There\")"}]}, {"signature": "public boolean linearIn(int[] outer, int[] inner)", "title": "linearIn", "difficulty": 315.0, "url": "/prob/p134022", "section": "Array-3", "summary": "Given two arrays of ints sorted in increasing order, ", "solution": [], "examples": [{"output": "true", "input": "linearIn([1, 2, 4, 6], [2, 4])"}, {"output": "false", "input": "linearIn([1, 2, 4, 6], [2, 3, 4])"}, {"output": "true", "input": "linearIn([1, 2, 4, 4, 6], [2, 4])"}]}, {"signature": "public boolean old35(int n)", "title": "old35", "difficulty": 122.5, "url": "/prob/p159612", "section": "Logic-1", "summary": "Return true if the given non-negative number is a multiple of 3 or 5, but not both. Use the % \"mod\" operator -- see ", "solution": [], "examples": [{"output": "true", "input": "old35(3)"}, {"output": "true", "input": "old35(10)"}, {"output": "false", "input": "old35(15)"}]}, {"signature": "public List<String> noYY(List<String> strings)", "title": "noYY", "difficulty": 220.0, "url": "/prob/p115967", "section": "Functional-2", "summary": "Given a list of strings, return a list where each string has \"y\" added at its end, omitting any resulting strings that contain \"yy\" as a substring anywhere.", "solution": [], "examples": [{"output": "[\"ay\", \"by\", \"cy\"]", "input": "noYY([\"a\", \"b\", \"c\"])"}, {"output": "[\"ay\", \"by\"]", "input": "noYY([\"a\", \"b\", \"cy\"])"}, {"output": "[\"xxy\", \"yay\", \"zzy\"]", "input": "noYY([\"xx\", \"ya\", \"zz\"])"}]}, {"signature": "public boolean answerCell(boolean isMorning, boolean isMom, boolean isAsleep)", "title": "answerCell", "difficulty": 130.0, "url": "/prob/p110973", "section": "Logic-1", "summary": "Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer.", "solution": [], "examples": [{"output": "true", "input": "answerCell(false, false, false)"}, {"output": "false", "input": "answerCell(false, false, true)"}, {"output": "false", "input": "answerCell(true, false, false)"}]}, {"signature": "public String theEnd(String str, boolean front)", "title": "theEnd", "difficulty": 139.0, "url": "/prob/p162477", "section": "String-1", "summary": "Given a string, return a string length 1 from its front, unless ", "solution": [], "examples": [{"output": "\"H\"", "input": "theEnd(\"Hello\", true)"}, {"output": "\"o\"", "input": "theEnd(\"Hello\", false)"}, {"output": "\"o\"", "input": "theEnd(\"oh\", true)"}]}, {"signature": "public int[] middleWay(int[] a, int[] b)", "title": "middleWay", "difficulty": 130.0, "url": "/prob/p146449", "section": "Array-1", "summary": "Given 2 int arrays, a and b, each length 3, return a new array length 2 containing their middle elements.", "solution": [], "examples": [{"output": "[2, 5]", "input": "middleWay([1, 2, 3], [4, 5, 6])"}, {"output": "[7, 8]", "input": "middleWay([7, 7, 7], [3, 8, 0])"}, {"output": "[2, 4]", "input": "middleWay([5, 2, 9], [1, 4, 5])"}]}, {"signature": "public boolean only14(int[] nums)", "title": "only14", "difficulty": 230.0, "url": "/prob/p186672", "section": "Array-2", "summary": "Given an array of ints, return true if every element is a 1 or a 4.", "solution": [], "examples": [{"output": "true", "input": "only14([1, 4, 1, 4])"}, {"output": "false", "input": "only14([1, 4, 2, 4])"}, {"output": "true", "input": "only14([1, 1])"}]}, {"signature": "public boolean groupSum5(int start, int[] nums, int target)", "title": "groupSum5", "difficulty": 412.0, "url": "/prob/p138907", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target with these additional constraints: all multiples of 5 in the array must be included in the group. If the value immediately following a multiple of 5 is 1, it must not be chosen. (No loops needed.)", "solution": [], "examples": [{"output": "true", "input": "groupSum5(0, [2, 5, 10, 4], 19)"}, {"output": "true", "input": "groupSum5(0, [2, 5, 10, 4], 17)"}, {"output": "false", "input": "groupSum5(0, [2, 5, 10, 4], 12)"}]}, {"signature": "public int countHi(String str)", "title": "countHi", "difficulty": 206.0, "url": "/prob/p147448", "section": "String-2", "summary": "Return the number of times that the string \"hi\" appears anywhere in the given string.", "solution": [], "examples": [{"output": "1", "input": "countHi(\"abc hi ho\")"}, {"output": "2", "input": "countHi(\"ABChi hi\")"}, {"output": "2", "input": "countHi(\"hihi\")"}]}, {"signature": "public boolean posNeg(int a, int b, boolean negative)", "title": "posNeg", "difficulty": 124.0, "url": "/prob/p159227", "section": "Warmup-1", "summary": "Given 2 int values, return true if one is negative and one is positive. Except if the parameter \"negative\" is true, then return true only if both are negative.", "solution": ["public boolean posNeg(int a, int b, boolean negative) {\n  if (negative) {\n    return (a < 0 && b < 0);\n  }\n  else {\n    return ((a < 0 && b > 0) || (a > 0 && b < 0));\n  }\n}"], "examples": [{"output": "true", "input": "posNeg(1, -1, false)"}, {"output": "true", "input": "posNeg(-1, 1, false)"}, {"output": "true", "input": "posNeg(-4, -5, true)"}]}, {"signature": "public int makeChocolate(int small, int big, int goal)", "title": "makeChocolate", "difficulty": 224.0, "url": "/prob/p191363", "section": "Logic-2", "summary": "We want make a package of ", "solution": [], "examples": [{"output": "4", "input": "makeChocolate(4, 1, 9)"}, {"output": "-1", "input": "makeChocolate(4, 1, 10)"}, {"output": "2", "input": "makeChocolate(4, 1, 7)"}]}, {"signature": "public List<Integer> math1(List<Integer> nums)", "title": "math1", "difficulty": 215.0, "url": "/prob/p103869", "section": "Functional-1", "summary": "Given a list of integers, return a list where each integer is added to 1 and the result is multiplied by 10.", "solution": [], "examples": [{"output": "[20, 30, 40]", "input": "math1([1, 2, 3])"}, {"output": "[70, 90, 70, 90, 20]", "input": "math1([6, 8, 6, 8, 1])"}, {"output": "[110]", "input": "math1([10])"}]}, {"signature": "public String stringClean(String str)", "title": "stringClean", "difficulty": 372.0, "url": "/prob/p104029", "section": "Recursion-1", "summary": "Given a string, return recursively a \"cleaned\" string where adjacent chars that are the same have been reduced to a single char. So \"yyzzza\" yields \"yza\".", "solution": [], "examples": [{"output": "\"yza\"", "input": "stringClean(\"yyzzza\")"}, {"output": "\"abcd\"", "input": "stringClean(\"abbbcdd\")"}, {"output": "\"Helo\"", "input": "stringClean(\"Hello\")"}]}, {"signature": "public String firstTwo(String str)", "title": "firstTwo", "difficulty": 118.0, "url": "/prob/p163411", "section": "String-1", "summary": "Given a string, return the string made of its first two chars, so the String \"Hello\" yields \"He\". If the string is shorter than length 2, return whatever there is, so \"X\" yields \"X\", and the empty string \"\" yields the empty string \"\". Note that str.length() returns the length of a string.", "solution": [], "examples": [{"output": "\"He\"", "input": "firstTwo(\"Hello\")"}, {"output": "\"ab\"", "input": "firstTwo(\"abcdefg\")"}, {"output": "\"ab\"", "input": "firstTwo(\"ab\")"}]}, {"signature": "public int countYZ(String str)", "title": "countYZ", "difficulty": 303.0, "url": "/prob/p199171", "section": "String-3", "summary": "Given a string, count the number of words ending in 'y' or 'z' -- so the 'y' in \"heavy\" and the 'z' in \"fez\" count, but not the 'y' in \"yellow\" (not case sensitive). We'll say that a y or z is at the end of a word if there is not an alphabetic letter immediately following it. (Note: Character.isLetter(char) tests if a char is an alphabetic letter.)", "solution": [], "examples": [{"output": "2", "input": "countYZ(\"fez day\")"}, {"output": "2", "input": "countYZ(\"day fez\")"}, {"output": "2", "input": "countYZ(\"day fyyyz\")"}]}, {"signature": "public boolean has23(int[] nums)", "title": "has23", "difficulty": 136.0, "url": "/prob/p171022", "section": "Array-1", "summary": "Given an int array length 2, return true if it contains a 2 or a 3.", "solution": [], "examples": [{"output": "true", "input": "has23([2, 5])"}, {"output": "true", "input": "has23([4, 3])"}, {"output": "false", "input": "has23([4, 5])"}]}, {"signature": "public int count11(String str)", "title": "count11", "difficulty": 369.0, "url": "/prob/p167015", "section": "Recursion-1", "summary": "Given a string, compute recursively (no loops) the number of \"11\" substrings in the string. The \"11\" substrings should not overlap.", "solution": [], "examples": [{"output": "2", "input": "count11(\"11abc11\")"}, {"output": "3", "input": "count11(\"abc11x11x11\")"}, {"output": "1", "input": "count11(\"111\")"}]}, {"signature": "public int bigDiff(int[] nums)", "title": "bigDiff", "difficulty": 206.0, "url": "/prob/p196640", "section": "Array-2", "summary": "Given an array length 1 or more of ints, return the difference between the largest and smallest values in the array. Note: the built-in Math.min(v1, v2) and Math.max(v1, v2) methods  return the smaller or larger of two values.", "solution": [], "examples": [{"output": "7", "input": "bigDiff([10, 3, 5, 6])"}, {"output": "8", "input": "bigDiff([7, 2, 10, 9])"}, {"output": "8", "input": "bigDiff([2, 10, 7, 2])"}]}, {"signature": "public boolean groupNoAdj(int start, int[] nums, int target)", "title": "groupNoAdj", "difficulty": 409.0, "url": "/prob/p169605", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to choose a group of some of the ints, such that the group sums to the given target with this additional constraint: If a value in the array is chosen to be in the group, the value immediately following it in the array must not be chosen. (No loops needed.)", "solution": [], "examples": [{"output": "true", "input": "groupNoAdj(0, [2, 5, 10, 4], 12)"}, {"output": "false", "input": "groupNoAdj(0, [2, 5, 10, 4], 14)"}, {"output": "false", "input": "groupNoAdj(0, [2, 5, 10, 4], 7)"}]}, {"signature": "public String zipZap(String str)", "title": "zipZap", "difficulty": 251.0, "url": "/prob/p180759", "section": "String-2", "summary": "Look for patterns like \"zip\" and \"zap\" in the string -- length-3, starting with 'z' and ending with 'p'. Return a string where for all such words, the middle letter is gone, so \"zipXzap\" yields \"zpXzp\".", "solution": [], "examples": [{"output": "\"zpXzp\"", "input": "zipZap(\"zipXzap\")"}, {"output": "\"zpzp\"", "input": "zipZap(\"zopzop\")"}, {"output": "\"zzzpzp\"", "input": "zipZap(\"zzzopzop\")"}]}, {"signature": "public String repeatSeparator(String word, String sep, int count)", "title": "repeatSeparator", "difficulty": 236.0, "url": "/prob/p109637", "section": "String-2", "summary": "Given two strings, ", "solution": [], "examples": [{"output": "\"WordXWordXWord\"", "input": "repeatSeparator(\"Word\", \"X\", 3)"}, {"output": "\"ThisAndThis\"", "input": "repeatSeparator(\"This\", \"And\", 2)"}, {"output": "\"This\"", "input": "repeatSeparator(\"This\", \"And\", 1)"}]}, {"signature": "public int stringMatch(String a, String b)", "title": "stringMatch", "difficulty": 227.0, "url": "/prob/p198640", "section": "Warmup-2", "summary": "Given 2 strings, a and b, return the number of the positions where they contain the same length 2 substring. So \"xxcaazz\" and \"xxbaaz\" yields 3, since the \"xx\", \"aa\", and \"az\" substrings appear in the same place in both strings.", "solution": ["public int stringMatch(String a, String b) {\n  // Figure which string is shorter.\n  int len = Math.min(a.length(), b.length());\n  int count = 0;\n  \n  // Look at both substrings starting at i\n  for (int i=0; i<len-1; i++) {\n    String aSub = a.substring(i, i+2);\n    String bSub = b.substring(i, i+2);\n    if (aSub.equals(bSub)) {  // Use .equals() with strings\n      count++;\n    }\n  }\n\n  return count;\n}"], "examples": [{"output": "3", "input": "stringMatch(\"xxcaazz\", \"xxbaaz\")"}, {"output": "2", "input": "stringMatch(\"abc\", \"abc\")"}, {"output": "0", "input": "stringMatch(\"abc\", \"axc\")"}]}, {"signature": "public int blackjack(int a, int b)", "title": "blackjack", "difficulty": 218.0, "url": "/prob/p117019", "section": "Logic-2", "summary": "Given 2 int values greater than 0, return whichever value is nearest to 21 without going over. Return 0 if they both go over.", "solution": [], "examples": [{"output": "21", "input": "blackjack(19, 21)"}, {"output": "21", "input": "blackjack(21, 19)"}, {"output": "19", "input": "blackjack(19, 22)"}]}, {"signature": "public boolean nestParen(String str)", "title": "nestParen", "difficulty": 381.0, "url": "/prob/p183174", "section": "Recursion-1", "summary": "Given a string, return true if it is a nesting of zero or more pairs of parenthesis, like \"(())\" or \"((()))\". Suggestion: check the first and last chars, and then recur on what's inside them.", "solution": [], "examples": [{"output": "true", "input": "nestParen(\"(())\")"}, {"output": "true", "input": "nestParen(\"((()))\")"}, {"output": "false", "input": "nestParen(\"(((x))\")"}]}, {"signature": "public String makeOutWord(String out, String word)", "title": "makeOutWord", "difficulty": 112.0, "url": "/prob/p184030", "section": "String-1", "summary": "Given an \"out\" string length 4, such as \"<<>>\", and a word, return a new string where the word is in the middle of the out string, e.g. \"<<word>>\". Note: use str.substring(i, j) to extract the String starting at index i and going up to but not including index j.", "solution": [], "examples": [{"output": "\"<<Yay>>\"", "input": "makeOutWord(\"<<>>\", \"Yay\")"}, {"output": "\"<<WooHoo>>\"", "input": "makeOutWord(\"<<>>\", \"WooHoo\")"}, {"output": "\"[[word]]\"", "input": "makeOutWord(\"[[]]\", \"word\")"}]}, {"signature": "public String stringTimes(String str, int n)", "title": "stringTimes", "difficulty": 203.0, "url": "/prob/p142270", "section": "Warmup-2", "summary": "Given a string and a non-negative int n, return a larger string that is n copies of the original string.", "solution": ["public String stringTimes(String str, int n) {\n  String result = \"\";\n  for (int i=0; i<n; i++) {\n    result = result + str;  // could use += here\n  }\n  return result;\n}"], "examples": [{"output": "\"HiHi\"", "input": "stringTimes(\"Hi\", 2)"}, {"output": "\"HiHiHi\"", "input": "stringTimes(\"Hi\", 3)"}, {"output": "\"Hi\"", "input": "stringTimes(\"Hi\", 1)"}]}, {"signature": "public Map<String, String> mapBully(Map<String, String> map)", "title": "mapBully", "difficulty": 203.0, "url": "/prob/p197888", "section": "Map-1", "summary": "Modify and return the given map as follows: if the key \"a\" has a value, set the key \"b\" to have that value, and set the key \"a\" to have the value \"\". Basically \"b\" is a bully, taking the value and replacing it with the empty string.", "solution": [], "examples": [{"output": "{\"a\": \"\", \"b\": \"candy\"}", "input": "mapBully({\"a\": \"candy\", \"b\": \"dirt\"})"}, {"output": "{\"a\": \"\", \"b\": \"candy\"}", "input": "mapBully({\"a\": \"candy\"})"}, {"output": "{\"a\": \"\", \"b\": \"candy\", \"c\": \"meh\"}", "input": "mapBully({\"a\": \"candy\", \"b\": \"carrot\", \"c\": \"meh\"})"}]}, {"signature": "public String mixString(String a, String b)", "title": "mixString", "difficulty": 227.0, "url": "/prob/p125185", "section": "String-2", "summary": "Given two strings, ", "solution": [], "examples": [{"output": "\"axbycz\"", "input": "mixString(\"abc\", \"xyz\")"}, {"output": "\"HTihere\"", "input": "mixString(\"Hi\", \"There\")"}, {"output": "\"xTxhxexre\"", "input": "mixString(\"xxxx\", \"There\")"}]}, {"signature": "public boolean unlucky1(int[] nums)", "title": "unlucky1", "difficulty": 175.0, "url": "/prob/p197308", "section": "Array-1", "summary": "We'll say that a 1 immediately followed by a 3 in an array is an \"unlucky\" 1. Return true if the given array contains an unlucky 1 in the first 2 or last 2 positions in the array.", "solution": [], "examples": [{"output": "true", "input": "unlucky1([1, 3, 4, 5])"}, {"output": "true", "input": "unlucky1([2, 1, 3, 4, 5])"}, {"output": "false", "input": "unlucky1([1, 1, 1])"}]}, {"signature": "public boolean hasBad(String str)", "title": "hasBad", "difficulty": 160.0, "url": "/prob/p139075", "section": "String-1", "summary": "Given a string, return true if \"bad\" appears starting at index 0 or 1 in the string, such as with \"badxxx\" or \"xbadxx\" but not \"xxbadxx\". The string may be any length, including 0. Note: use .equals() to compare 2 strings.", "solution": [], "examples": [{"output": "true", "input": "hasBad(\"badxx\")"}, {"output": "true", "input": "hasBad(\"xbadxx\")"}, {"output": "false", "input": "hasBad(\"xxbadxx\")"}]}, {"signature": "public boolean xyzMiddle(String str)", "title": "xyzMiddle", "difficulty": 242.0, "url": "/prob/p159772", "section": "String-2", "summary": "Given a string, does \"xyz\" appear in the middle of the string? To define middle, we'll say that the number of chars to the left and right of the \"xyz\" must differ by at most one. This problem is harder than it looks.", "solution": [], "examples": [{"output": "true", "input": "xyzMiddle(\"AAxyzBB\")"}, {"output": "true", "input": "xyzMiddle(\"AxyzBB\")"}, {"output": "false", "input": "xyzMiddle(\"AxyzBBB\")"}]}, {"signature": "public int count8(int n)", "title": "count8", "difficulty": 324.0, "url": "/prob/p192383", "section": "Recursion-1", "summary": "Given a non-negative int n, compute recursively (no loops) the count of the occurrences of 8 as a digit, except that an 8 with another 8 immediately to its left counts double, so 8818 yields 4. Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).", "solution": [], "examples": [{"output": "1", "input": "count8(8)"}, {"output": "2", "input": "count8(818)"}, {"output": "4", "input": "count8(8818)"}]}, {"signature": "public String mirrorEnds(String string)", "title": "mirrorEnds", "difficulty": 324.0, "url": "/prob/p139411", "section": "String-3", "summary": "Given a string, look for a mirror image (backwards) string at both the beginning and end of the given string. In other words, zero or more characters at the very begining of the given string, and at the very end of the string in reverse order (possibly overlapping). For example, the string \"abXYZba\" has the mirror end \"ab\".", "solution": [], "examples": [{"output": "\"ab\"", "input": "mirrorEnds(\"abXYZba\")"}, {"output": "\"a\"", "input": "mirrorEnds(\"abca\")"}, {"output": "\"aba\"", "input": "mirrorEnds(\"aba\")"}]}, {"signature": "public int userCompare(String aName, int aId, String bName, int bId)", "title": "userCompare", "difficulty": 248.0, "url": "/prob/p143482", "section": "AP-1", "summary": "We have data for two users, A and B, each with a String name and an int id. The goal is to order the users such as for sorting. Return -1 if A comes before B, 1 if A comes after B, and 0 if they are the same. Order first by the string names, and then by the id numbers if the names are the same. Note: with Strings str1.compareTo(str2) returns an int value which is negative/0/positive to indicate how str1 is ordered to str2 (the value is not limited to -1/0/1). (On the AP, there would be two User objects, but here the code simply takes the two strings and two ints directly. The code logic is the same.)", "solution": [], "examples": [{"output": "-1", "input": "userCompare(\"bb\", 1, \"zz\", 2)"}, {"output": "1", "input": "userCompare(\"bb\", 1, \"aa\", 2)"}, {"output": "0", "input": "userCompare(\"bb\", 1, \"bb\", 1)"}]}, {"signature": "public String noX(String str)", "title": "noX", "difficulty": 342.0, "url": "/prob/p118230", "section": "Recursion-1", "summary": "Given a string, compute recursively a new string where all the 'x' chars have been removed.", "solution": [], "examples": [{"output": "\"ab\"", "input": "noX(\"xaxb\")"}, {"output": "\"abc\"", "input": "noX(\"abc\")"}, {"output": "\"\"", "input": "noX(\"xx\")"}]}, {"signature": "public int[] seriesUp(int n)", "title": "seriesUp", "difficulty": 321.0, "url": "/prob/p104090", "section": "Array-3", "summary": "Given n>=0, create an array with the pattern {1, \u00a0\u00a0 1, 2, \u00a0\u00a0 1, 2, 3, \u00a0\u00a0... 1, 2, 3 .. n} (spaces added to show the grouping). Note that the length of the array will be 1 + 2 + 3 ... + n, which is known to sum to exactly n*(n + 1)/2.", "solution": [], "examples": [{"output": "[1, 1, 2, 1, 2, 3]", "input": "seriesUp(3)"}, {"output": "[1, 1, 2, 1, 2, 3, 1, 2, 3, 4]", "input": "seriesUp(4)"}, {"output": "[1, 1, 2]", "input": "seriesUp(2)"}]}, {"signature": "public int sumDigits(String str)", "title": "sumDigits", "difficulty": 318.0, "url": "/prob/p197890", "section": "String-3", "summary": "Given a string, return the sum of the digits 0-9 that appear in the string, ignoring all other characters. Return 0 if there are no digits in the string. (Note: Character.isDigit(char) tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts a string to an int.)", "solution": [], "examples": [{"output": "6", "input": "sumDigits(\"aa1bc2d3\")"}, {"output": "8", "input": "sumDigits(\"aa11b33\")"}, {"output": "0", "input": "sumDigits(\"Chocolate\")"}]}, {"signature": "public int sum3(int[] nums)", "title": "sum3", "difficulty": 115.0, "url": "/prob/p175763", "section": "Array-1", "summary": "Given an array of ints length 3, return the sum of all the elements.", "solution": [], "examples": [{"output": "6", "input": "sum3([1, 2, 3])"}, {"output": "18", "input": "sum3([5, 11, 2])"}, {"output": "7", "input": "sum3([7, 0, 0])"}]}, {"signature": "public boolean bobThere(String str)", "title": "bobThere", "difficulty": 221.0, "url": "/prob/p175762", "section": "String-2", "summary": "Return true if the given string contains a \"bob\" string, but where the middle 'o' char can be any char.", "solution": [], "examples": [{"output": "true", "input": "bobThere(\"abcbob\")"}, {"output": "true", "input": "bobThere(\"b9b\")"}, {"output": "false", "input": "bobThere(\"bac\")"}]}, {"signature": "public List<Integer> two2(List<Integer> nums)", "title": "two2", "difficulty": 223.0, "url": "/prob/p148198", "section": "Functional-2", "summary": "Given a list of non-negative integers, return a list of those numbers multiplied by 2, omitting any of the resulting numbers that end in 2.", "solution": [], "examples": [{"output": "[4, 6]", "input": "two2([1, 2, 3])"}, {"output": "[4]", "input": "two2([2, 6, 11])"}, {"output": "[0]", "input": "two2([0])"}]}, {"signature": "public boolean gHappy(String str)", "title": "gHappy", "difficulty": 312.0, "url": "/prob/p198664", "section": "String-3", "summary": "We'll say that a lowercase 'g' in a string is \"happy\" if there is another 'g' immediately to its left or right. Return true if all the g's in the given string are happy.", "solution": [], "examples": [{"output": "true", "input": "gHappy(\"xxggxx\")"}, {"output": "false", "input": "gHappy(\"xxgxx\")"}, {"output": "false", "input": "gHappy(\"xxggyygxx\")"}]}, {"signature": "public int maxBlock(String str)", "title": "maxBlock", "difficulty": 327.0, "url": "/prob/p179479", "section": "String-3", "summary": "Given a string, return the length of the largest \"block\" in the string. A block is a run of adjacent chars that are the same.", "solution": [], "examples": [{"output": "2", "input": "maxBlock(\"hoopla\")"}, {"output": "3", "input": "maxBlock(\"abbCCCddBBBxx\")"}, {"output": "0", "input": "maxBlock(\"\")"}]}, {"signature": "public String frontBack(String str)", "title": "frontBack", "difficulty": 133.0, "url": "/prob/p123384", "section": "Warmup-1", "summary": "Given a string, return a new string where the first and last chars have been exchanged.", "solution": ["public String frontBack(String str) {\n  if (str.length() <= 1) return str;\n  \n  String mid = str.substring(1, str.length()-1);\n  \n  // last + mid + first\n  return str.charAt(str.length()-1) + mid + str.charAt(0);\n}"], "examples": [{"output": "\"eodc\"", "input": "frontBack(\"code\")"}, {"output": "\"a\"", "input": "frontBack(\"a\")"}, {"output": "\"ba\"", "input": "frontBack(\"ab\")"}]}, {"signature": "public boolean sleepIn(boolean weekday, boolean vacation)", "title": "sleepIn", "difficulty": 103.0, "url": "/prob/p187868", "section": "Warmup-1", "summary": "The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in.", "solution": ["public boolean sleepIn(boolean weekday, boolean vacation) {\n  if (!weekday || vacation) {\n    return true;\n  }\n  \n  return false;\n  \n  // Solution notes: better to write \"vacation\" than \"vacation == true\"\n  // though they mean exactly the same thing.\n  // Likewise \"!weekday\" is better than \"weekday == false\".\n  // This all can be shortened to: return (!weekday || vacation);\n  // Here we just put the return-false last, or could use an if/else.\n}"], "examples": [{"output": "true", "input": "sleepIn(false, false)"}, {"output": "false", "input": "sleepIn(true, false)"}, {"output": "true", "input": "sleepIn(false, true)"}]}, {"signature": "public Map<String, String> mapShare(Map<String, String> map)", "title": "mapShare", "difficulty": 206.0, "url": "/prob/p148813", "section": "Map-1", "summary": "Modify and return the given map as follows: if the key \"a\" has a value, set the key \"b\" to have that same value. In all cases remove the key \"c\", leaving the rest of the map unchanged.", "solution": [], "examples": [{"output": "{\"a\": \"aaa\", \"b\": \"aaa\"}", "input": "mapShare({\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"ccc\"})"}, {"output": "{\"b\": \"xyz\"}", "input": "mapShare({\"b\": \"xyz\", \"c\": \"ccc\"})"}, {"output": "{\"a\": \"aaa\", \"b\": \"aaa\", \"d\": \"hi\"}", "input": "mapShare({\"a\": \"aaa\", \"c\": \"meh\", \"d\": \"hi\"})"}]}, {"signature": "public boolean sameEnds(int[] nums, int len)", "title": "sameEnds", "difficulty": 260.0, "url": "/prob/p134300", "section": "Array-2", "summary": "Return true if the group of N numbers at the start and end of the array are the same. For example, with {5, 6, 45, 99, 13, 5, 6}, the ends are the same for n=0 and n=2, and false for n=1 and n=3. You may assume that n is in the range 0..nums.length inclusive.", "solution": [], "examples": [{"output": "false", "input": "sameEnds([5, 6, 45, 99, 13, 5, 6], 1)"}, {"output": "true", "input": "sameEnds([5, 6, 45, 99, 13, 5, 6], 2)"}, {"output": "false", "input": "sameEnds([5, 6, 45, 99, 13, 5, 6], 3)"}]}, {"signature": "public List<String> noX(List<String> strings)", "title": "noX", "difficulty": 223.0, "url": "/prob/p105967", "section": "Functional-1", "summary": "Given a list of strings, return a list where each string has all its \"x\" removed.", "solution": [], "examples": [{"output": "[\"a\", \"bb\", \"c\"]", "input": "noX([\"ax\", \"bb\", \"cx\"])"}, {"output": "[\"a\", \"bb\", \"c\"]", "input": "noX([\"xxax\", \"xbxbx\", \"xxcx\"])"}, {"output": "[\"\"]", "input": "noX([\"x\"])"}]}, {"signature": "public List<String> copies3(List<String> strings)", "title": "copies3", "difficulty": 209.0, "url": "/prob/p181634", "section": "Functional-1", "summary": "Given a list of strings, return a list where each string is replaced by 3 copies of the string concatenated together.", "solution": [], "examples": [{"output": "[\"aaa\", \"bbbbbb\", \"ccccccccc\"]", "input": "copies3([\"a\", \"bb\", \"ccc\"])"}, {"output": "[\"242424\", \"aaa\", \"\"]", "input": "copies3([\"24\", \"a\", \"\"])"}, {"output": "[\"hellohellohello\", \"theretherethere\"]", "input": "copies3([\"hello\", \"there\"])"}]}, {"signature": "public String repeatFront(String str, int n)", "title": "repeatFront", "difficulty": 233.0, "url": "/prob/p128796", "section": "String-2", "summary": "Given a string and an int n, return a string made of the first n characters of the string, followed by the first n-1 characters of the string, and so on. You may assume that n is between 0 and the length of the string, inclusive (i.e. n >= 0 and n <= str.length()).", "solution": [], "examples": [{"output": "\"ChocChoChC\"", "input": "repeatFront(\"Chocolate\", 4)"}, {"output": "\"ChoChC\"", "input": "repeatFront(\"Chocolate\", 3)"}, {"output": "\"IcI\"", "input": "repeatFront(\"Ice Cream\", 2)"}]}, {"signature": "public Map<String, Integer> word0(String[] strings)", "title": "word0", "difficulty": 303.0, "url": "/prob/p152303", "section": "Map-2", "summary": "Given an array of strings, return a Map<String, Integer> containing a key for every different string in the array, always with the value 0. For example the string \"hello\" makes the pair \"hello\":0. We'll do more complicated counting later, but for this problem the value is simply 0.", "solution": [], "examples": [{"output": "{\"a\": 0, \"b\": 0}", "input": "word0([\"a\", \"b\", \"a\", \"b\"])"}, {"output": "{\"a\": 0, \"b\": 0, \"c\": 0}", "input": "word0([\"a\", \"b\", \"a\", \"c\", \"b\"])"}, {"output": "{\"a\": 0, \"b\": 0, \"c\": 0}", "input": "word0([\"c\", \"b\", \"a\"])"}]}, {"signature": "public String extraFront(String str)", "title": "extraFront", "difficulty": 184.0, "url": "/prob/p172063", "section": "String-1", "summary": "Given a string, return a new string made of 3 copies of the first 2 chars of the original string. The string may be any length. If there are fewer than 2 chars, use whatever is there.", "solution": [], "examples": [{"output": "\"HeHeHe\"", "input": "extraFront(\"Hello\")"}, {"output": "\"ababab\"", "input": "extraFront(\"ab\")"}, {"output": "\"HHH\"", "input": "extraFront(\"H\")"}]}, {"signature": "public String seeColor(String str)", "title": "seeColor", "difficulty": 175.0, "url": "/prob/p199216", "section": "String-1", "summary": "Given a string, if the string begins with \"red\" or \"blue\" return that color string, otherwise return the empty string.", "solution": [], "examples": [{"output": "\"red\"", "input": "seeColor(\"redxx\")"}, {"output": "\"\"", "input": "seeColor(\"xxred\")"}, {"output": "\"blue\"", "input": "seeColor(\"blueTimes\")"}]}, {"signature": "public int[] squareUp(int n)", "title": "squareUp", "difficulty": 318.0, "url": "/prob/p155405", "section": "Array-3", "summary": "Given n>=0, create an array length n*n with the following pattern, shown here for n=3 : {0, 0, 1, \u00a0\u00a0 0, 2, 1, \u00a0\u00a0 3, 2, 1} (spaces added to show the 3 groups).", "solution": [], "examples": [{"output": "[0, 0, 1, 0, 2, 1, 3, 2, 1]", "input": "squareUp(3)"}, {"output": "[0, 1, 2, 1]", "input": "squareUp(2)"}, {"output": "[0, 0, 0, 1, 0, 0, 2, 1, 0, 3, 2, 1, 4, 3, 2, 1]", "input": "squareUp(4)"}]}, {"signature": "public boolean modThree(int[] nums)", "title": "modThree", "difficulty": 251.0, "url": "/prob/p159979", "section": "Array-2", "summary": "Given an array of ints, return true if the array contains either 3 even or 3 odd values all next to each other.", "solution": [], "examples": [{"output": "true", "input": "modThree([2, 1, 3, 5])"}, {"output": "false", "input": "modThree([2, 1, 2, 5])"}, {"output": "true", "input": "modThree([2, 4, 2, 5])"}]}, {"signature": "public int max1020(int a, int b)", "title": "max1020", "difficulty": 178.0, "url": "/prob/p177372", "section": "Warmup-1", "summary": "Given 2 positive int values, return the larger value that is in the range 10..20 inclusive, or return 0 if neither is in that range.", "solution": ["public int max1020(int a, int b) {\n  // First make it so the bigger value is in a\n  if (b > a) {\n    int temp = a;\n    a = b;\n    b = temp;\n  }\n  \n  // Knowing a is bigger, just check a first\n  if (a >= 10 && a <= 20) return a;\n  if (b >= 10 && b <= 20) return b;\n  return 0;\n}"], "examples": [{"output": "19", "input": "max1020(11, 19)"}, {"output": "19", "input": "max1020(19, 11)"}, {"output": "11", "input": "max1020(11, 9)"}]}, {"signature": "public boolean canBalance(int[] nums)", "title": "canBalance", "difficulty": 312.0, "url": "/prob/p158767", "section": "Array-3", "summary": "Given a non-empty array, return true if there is a place to split the array so that the sum of the numbers on one side is equal to the sum of the numbers on the other side.", "solution": [], "examples": [{"output": "true", "input": "canBalance([1, 1, 1, 2, 1])"}, {"output": "false", "input": "canBalance([2, 1, 1, 2, 1])"}, {"output": "true", "input": "canBalance([10, 10])"}]}, {"signature": "public boolean stringE(String str)", "title": "stringE", "difficulty": 181.0, "url": "/prob/p173784", "section": "Warmup-1", "summary": "Return true if the given string contains between 1 and 3 'e' chars.", "solution": ["public boolean stringE(String str) {\n  int count = 0;\n\n  for (int i=0; i<str.length(); i++) {\n    if (str.charAt(i) == 'e') count++;\n    // alternately: str.substring(i, i+1).equals(\"e\")\n  }\n\n  return (count >= 1 && count <= 3);\n}"], "examples": [{"output": "true", "input": "stringE(\"Hello\")"}, {"output": "true", "input": "stringE(\"Heelle\")"}, {"output": "false", "input": "stringE(\"Heelele\")"}]}, {"signature": "public String deFront(String str)", "title": "deFront", "difficulty": 190.0, "url": "/prob/p110141", "section": "String-1", "summary": "Given a string, return a version without the first 2 chars. Except keep the first char if it is 'a' and keep the second char if it is 'b'. The string may be any length. Harder than it looks.", "solution": [], "examples": [{"output": "\"llo\"", "input": "deFront(\"Hello\")"}, {"output": "\"va\"", "input": "deFront(\"java\")"}, {"output": "\"aay\"", "input": "deFront(\"away\")"}]}, {"signature": "public int triangle(int rows)", "title": "triangle", "difficulty": 315.0, "url": "/prob/p194781", "section": "Recursion-1", "summary": "We have triangle made of blocks. The topmost row has 1 block, the next row down has 2 blocks, the next row has 3 blocks, and so on. Compute recursively (no loops or multiplication) the total number of blocks in such a triangle with the given number of rows.", "solution": [], "examples": [{"output": "0", "input": "triangle(0)"}, {"output": "1", "input": "triangle(1)"}, {"output": "3", "input": "triangle(2)"}]}, {"signature": "public Map<String, String> topping1(Map<String, String> map)", "title": "topping1", "difficulty": 212.0, "url": "/prob/p182712", "section": "Map-1", "summary": "Given a map of food keys and topping values, modify and return the map as follows: if the key \"ice cream\" is present, set its value to \"cherry\". In all cases, set the key \"bread\" to have the value \"butter\".", "solution": [], "examples": [{"output": "{\"bread\": \"butter\", \"ice cream\": \"cherry\"}", "input": "topping1({\"ice cream\": \"peanuts\"})"}, {"output": "{\"bread\": \"butter\"}", "input": "topping1({})"}, {"output": "{\"bread\": \"butter\", \"pancake\": \"syrup\"}", "input": "topping1({\"pancake\": \"syrup\"})"}]}, {"signature": "public boolean double23(int[] nums)", "title": "double23", "difficulty": 145.0, "url": "/prob/p145365", "section": "Array-1", "summary": "Given an int array, return true if the array contains 2 twice, or 3 twice. The array will be length 0, 1, or 2.", "solution": [], "examples": [{"output": "true", "input": "double23([2, 2])"}, {"output": "true", "input": "double23([3, 3])"}, {"output": "false", "input": "double23([2, 3])"}]}, {"signature": "public String parenBit(String str)", "title": "parenBit", "difficulty": 378.0, "url": "/prob/p137918", "section": "Recursion-1", "summary": "Given a string that contains a single pair of parenthesis, compute recursively a new string made of only of the parenthesis and their contents, so \"xyz(abc)123\" yields \"(abc)\".", "solution": [], "examples": [{"output": "\"(abc)\"", "input": "parenBit(\"xyz(abc)123\")"}, {"output": "\"(hello)\"", "input": "parenBit(\"x(hello)\")"}, {"output": "\"(xy)\"", "input": "parenBit(\"(xy)1\")"}]}, {"signature": "public boolean love6(int a, int b)", "title": "love6", "difficulty": 120.0, "url": "/prob/p137742", "section": "Logic-1", "summary": "The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6. Note: the function Math.abs(num) computes the absolute value of a number.", "solution": [], "examples": [{"output": "true", "input": "love6(6, 4)"}, {"output": "false", "input": "love6(4, 5)"}, {"output": "true", "input": "love6(1, 5)"}]}, {"signature": "public int greenTicket(int a, int b, int c)", "title": "greenTicket", "difficulty": 160.0, "url": "/prob/p120633", "section": "Logic-1", "summary": "You have a green lottery ticket, with ints a, b, and c on it. If the numbers are all different from each other, the result is 0. If all of the numbers are the same, the result is 20. If two of the numbers are the same, the result is 10.", "solution": [], "examples": [{"output": "0", "input": "greenTicket(1, 2, 3)"}, {"output": "20", "input": "greenTicket(2, 2, 2)"}, {"output": "10", "input": "greenTicket(1, 1, 2)"}]}, {"signature": "public int wordsCount(String[] words, int len)", "title": "wordsCount", "difficulty": 215.0, "url": "/prob/p124620", "section": "AP-1", "summary": "Given an array of strings, return the count of the number of strings with the given length.", "solution": [], "examples": [{"output": "2", "input": "wordsCount([\"a\", \"bb\", \"b\", \"ccc\"], 1)"}, {"output": "1", "input": "wordsCount([\"a\", \"bb\", \"b\", \"ccc\"], 3)"}, {"output": "0", "input": "wordsCount([\"a\", \"bb\", \"b\", \"ccc\"], 4)"}]}, {"signature": "public int withoutDoubles(int die1, int die2, boolean noDoubles)", "title": "withoutDoubles", "difficulty": 151.0, "url": "/prob/p115233", "section": "Logic-1", "summary": "Return the sum of two 6-sided dice rolls, each in the range 1..6. However, if noDoubles is true, if the two dice show the same value, increment one die to the next value, wrapping around to 1 if its value was 6.", "solution": [], "examples": [{"output": "5", "input": "withoutDoubles(2, 3, true)"}, {"output": "7", "input": "withoutDoubles(3, 3, true)"}, {"output": "6", "input": "withoutDoubles(3, 3, false)"}]}, {"signature": "public String pairStar(String str)", "title": "pairStar", "difficulty": 357.0, "url": "/prob/p158175", "section": "Recursion-1", "summary": "Given a string, compute recursively a new string where identical chars that are adjacent in the original string are separated from each other by a \"*\".", "solution": [], "examples": [{"output": "\"hel*lo\"", "input": "pairStar(\"hello\")"}, {"output": "\"x*xy*y\"", "input": "pairStar(\"xxyy\")"}, {"output": "\"a*a*a*a\"", "input": "pairStar(\"aaaa\")"}]}, {"signature": "public String atFirst(String str)", "title": "atFirst", "difficulty": 163.0, "url": "/prob/p139076", "section": "String-1", "summary": "Given a string, return a string length 2 made of its first 2 chars. If the string length is less than 2, use '@' for the missing chars.", "solution": [], "examples": [{"output": "\"he\"", "input": "atFirst(\"hello\")"}, {"output": "\"hi\"", "input": "atFirst(\"hi\")"}, {"output": "\"h@\"", "input": "atFirst(\"h\")"}]}, {"signature": "public boolean hasOne(int n)", "title": "hasOne", "difficulty": 224.0, "url": "/prob/p191212", "section": "AP-1", "summary": "Given a positive int n, return true if it contains a 1 digit. Note: use % to get the rightmost digit, and / to discard the rightmost digit.", "solution": [], "examples": [{"output": "true", "input": "hasOne(10)"}, {"output": "false", "input": "hasOne(22)"}, {"output": "false", "input": "hasOne(220)"}]}, {"signature": "public String fizzString2(int n)", "title": "fizzString2", "difficulty": 135.1, "url": "/prob/p115243", "section": "Logic-1", "summary": "Given an int n, return the string form of the number followed by \"!\". So the int 6 yields \"6!\". Except if the number is divisible by 3 use \"Fizz\" instead of the number, and if the number is divisible by 5 use \"Buzz\", and if divisible by both 3 and 5, use \"FizzBuzz\". Note: the % \"mod\" operator computes the remainder after division, so 23 % 10 yields 3. What will the remainder be when one number divides evenly into another? (See also: ", "solution": [], "examples": [{"output": "\"1!\"", "input": "fizzString2(1)"}, {"output": "\"2!\"", "input": "fizzString2(2)"}, {"output": "\"Fizz!\"", "input": "fizzString2(3)"}]}, {"signature": "public String alarmClock(int day, boolean vacation)", "title": "alarmClock", "difficulty": 118.0, "url": "/prob/p160543", "section": "Logic-1", "summary": "Given a day of the week encoded as 0=Sun, 1=Mon, 2=Tue, ...6=Sat, and a boolean indicating if we are on vacation, return a string of the form \"7:00\" indicating when the alarm clock should ring. Weekdays, the alarm should be \"7:00\" and on the weekend it should be \"10:00\". Unless we are on vacation -- then on weekdays it should be \"10:00\" and weekends it should be \"off\".", "solution": [], "examples": [{"output": "\"7:00\"", "input": "alarmClock(1, false)"}, {"output": "\"7:00\"", "input": "alarmClock(5, false)"}, {"output": "\"10:00\"", "input": "alarmClock(0, false)"}]}, {"signature": "public boolean has22(int[] nums)", "title": "has22", "difficulty": 218.0, "url": "/prob/p121853", "section": "Array-2", "summary": "Given an array of ints, return true if the array contains a 2 next to a 2 somewhere.", "solution": [], "examples": [{"output": "true", "input": "has22([1, 2, 2])"}, {"output": "false", "input": "has22([1, 2, 1, 2])"}, {"output": "false", "input": "has22([2, 1, 2])"}]}, {"signature": "public String plusOut(String str, String word)", "title": "plusOut", "difficulty": 257.0, "url": "/prob/p170829", "section": "String-2", "summary": "Given a string and a non-empty ", "solution": [], "examples": [{"output": "\"++xy++\"", "input": "plusOut(\"12xy34\", \"xy\")"}, {"output": "\"1+++++\"", "input": "plusOut(\"12xy34\", \"1\")"}, {"output": "\"++xy++xy+++xy\"", "input": "plusOut(\"12xy34xyabcxy\", \"xy\")"}]}, {"signature": "public String makeTags(String tag, String word)", "title": "makeTags", "difficulty": 109.0, "url": "/prob/p147483", "section": "String-1", "summary": "The web is built with HTML strings like \"<i>Yay</i>\" which draws Yay as italic text. In this example, the \"i\" tag makes <i> and </i> which surround the word \"Yay\". Given tag and word strings, create the HTML string with tags around the word, e.g. \"<i>Yay</i>\".", "solution": [], "examples": [{"output": "\"<i>Yay</i>\"", "input": "makeTags(\"i\", \"Yay\")"}, {"output": "\"<i>Hello</i>\"", "input": "makeTags(\"i\", \"Hello\")"}, {"output": "\"<cite>Yay</cite>\"", "input": "makeTags(\"cite\", \"Yay\")"}]}, {"signature": "public int diff21(int n)", "title": "diff21", "difficulty": 112.0, "url": "/prob/p116624", "section": "Warmup-1", "summary": "Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21.", "solution": ["public int diff21(int n) {\n  if (n <= 21) {\n    return 21 - n;\n  } else {\n    return (n - 21) * 2;\n  }\n}"], "examples": [{"output": "2", "input": "diff21(19)"}, {"output": "11", "input": "diff21(10)"}, {"output": "0", "input": "diff21(21)"}]}, {"signature": "public boolean cigarParty(int cigars, boolean isWeekend)", "title": "cigarParty", "difficulty": 103.0, "url": "/prob/p159531", "section": "Logic-1", "summary": "When squirrels get together for a party, they like to have cigars. A squirrel party is successful when the number of cigars is between 40 and 60, inclusive. Unless it is the weekend, in which case there is no upper bound on the number of cigars. Return true if the party with the given values is successful, or false otherwise.", "solution": [], "examples": [{"output": "false", "input": "cigarParty(30, false)"}, {"output": "true", "input": "cigarParty(50, false)"}, {"output": "true", "input": "cigarParty(70, true)"}]}, {"signature": "public int count7(int n)", "title": "count7", "difficulty": 321.0, "url": "/prob/p101409", "section": "Recursion-1", "summary": "Given a non-negative int n, return the count of the occurrences of 7 as a digit, so for example 717 yields 2. (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).", "solution": [], "examples": [{"output": "2", "input": "count7(717)"}, {"output": "1", "input": "count7(7)"}, {"output": "0", "input": "count7(123)"}]}, {"signature": "public String stringX(String str)", "title": "stringX", "difficulty": 230.0, "url": "/prob/p171260", "section": "Warmup-2", "summary": "Given a string, return a version where all the \"x\" have been removed. Except an \"x\" at the very start or end should not be removed.", "solution": ["public String stringX(String str) {\n  String result = \"\";\n  for (int i=0; i<str.length(); i++) {\n    // Only append the char if it is not the \"x\" case\n    if (!(i > 0 && i < (str.length()-1) && str.substring(i, i+1).equals(\"x\"))) {\n      result = result + str.substring(i, i+1); // Could use str.charAt(i) here\n    }\n  }\n  return result;\n}"], "examples": [{"output": "\"xHix\"", "input": "stringX(\"xxHxix\")"}, {"output": "\"abcd\"", "input": "stringX(\"abxxxcd\")"}, {"output": "\"xabcdx\"", "input": "stringX(\"xabxxxcdx\")"}]}, {"signature": "public int powerN(int base, int n)", "title": "powerN", "difficulty": 327.0, "url": "/prob/p158888", "section": "Recursion-1", "summary": "Given ", "solution": [], "examples": [{"output": "3", "input": "powerN(3, 1)"}, {"output": "9", "input": "powerN(3, 2)"}, {"output": "27", "input": "powerN(3, 3)"}]}, {"signature": "public String withoutX2(String str)", "title": "withoutX2", "difficulty": 199.0, "url": "/prob/p151359", "section": "String-1", "summary": "Given a string, if one or both of the first 2 chars is 'x', return the string without those 'x' chars, and otherwise return the string unchanged. This is a little harder than it looks.", "solution": [], "examples": [{"output": "\"Hi\"", "input": "withoutX2(\"xHi\")"}, {"output": "\"Hi\"", "input": "withoutX2(\"Hxi\")"}, {"output": "\"Hi\"", "input": "withoutX2(\"Hi\")"}]}, {"signature": "public String middleTwo(String str)", "title": "middleTwo", "difficulty": 145.0, "url": "/prob/p137729", "section": "String-1", "summary": "Given a string of even length, return a string made of the middle two chars, so the string \"string\" yields \"ri\". The string length will be at least 2.", "solution": [], "examples": [{"output": "\"ri\"", "input": "middleTwo(\"string\")"}, {"output": "\"od\"", "input": "middleTwo(\"code\")"}, {"output": "\"ct\"", "input": "middleTwo(\"Practice\")"}]}, {"signature": "public List<Integer> square56(List<Integer> nums)", "title": "square56", "difficulty": 226.0, "url": "/prob/p132748", "section": "Functional-2", "summary": "Given a list of integers, return a list of those numbers squared and the product added to 10, omitting any of the resulting numbers that end in 5 or 6.", "solution": [], "examples": [{"output": "[19, 11]", "input": "square56([3, 1, 4])"}, {"output": "[11]", "input": "square56([1])"}, {"output": "[14]", "input": "square56([2])"}]}, {"signature": "public int[] fix45(int[] nums)", "title": "fix45", "difficulty": 309.0, "url": "/prob/p125819", "section": "Array-3", "summary": "(This is a slightly harder version of the fix34 problem.) Return an array that contains exactly the same numbers as the given array, but rearranged so that every 4 is immediately followed by a 5. Do not move the 4's, but every other number may move. The array contains the same number of 4's and 5's, and every 4 has a number after it that is not a 4. In this version, 5's may appear anywhere in the original array.", "solution": [], "examples": [{"output": "[9, 4, 5, 4, 5, 9]", "input": "fix45([5, 4, 9, 4, 9, 5])"}, {"output": "[1, 4, 5, 1]", "input": "fix45([1, 4, 1, 5])"}, {"output": "[1, 4, 5, 1, 1, 4, 5]", "input": "fix45([1, 4, 1, 5, 5, 4, 1])"}]}, {"signature": "public int[] evenOdd(int[] nums)", "title": "evenOdd", "difficulty": 290.0, "url": "/prob/p105771", "section": "Array-2", "summary": "Return an array that contains the exact same numbers as the given array, but rearranged so that all the even numbers come before all the odd numbers. Other than that, the numbers can be in any order. You may modify and return the given array, or make a new array.", "solution": [], "examples": [{"output": "[0, 0, 0, 1, 1, 1, 1]", "input": "evenOdd([1, 0, 1, 0, 0, 1, 1])"}, {"output": "[2, 3, 3]", "input": "evenOdd([3, 3, 2])"}, {"output": "[2, 2, 2]", "input": "evenOdd([2, 2, 2])"}]}, {"signature": "public int teaParty(int tea, int candy)", "title": "teaParty", "difficulty": 133.0, "url": "/prob/p177181", "section": "Logic-1", "summary": "We are having a party with amounts of tea and candy. Return the int outcome of the party encoded as 0=bad, 1=good, or 2=great. A party is good (1) if both tea and candy are at least 5. However, if either tea or candy is at least double the amount of the other one, the party is great (2). However, in all cases, if either tea or candy is less than 5, the party is always bad (0).", "solution": [], "examples": [{"output": "1", "input": "teaParty(6, 8)"}, {"output": "0", "input": "teaParty(3, 8)"}, {"output": "2", "input": "teaParty(20, 6)"}]}, {"signature": "public Map<String, String> mapAB4(Map<String, String> map)", "title": "mapAB4", "difficulty": 227.0, "url": "/prob/p136950", "section": "Map-1", "summary": "Modify and return the given map as follows: if the keys \"a\" and \"b\" have values that have different lengths, then set \"c\" to have the longer value. If the values exist and have the same length, change them both to the empty string in the map.", "solution": [], "examples": [{"output": "{\"a\": \"aaa\", \"b\": \"bb\", \"c\": \"aaa\"}", "input": "mapAB4({\"a\": \"aaa\", \"b\": \"bb\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aa\", \"b\": \"bbb\", \"c\": \"bbb\"}", "input": "mapAB4({\"a\": \"aa\", \"b\": \"bbb\", \"c\": \"cake\"})"}, {"output": "{\"a\": \"aa\", \"b\": \"bbb\", \"c\": \"bbb\"}", "input": "mapAB4({\"a\": \"aa\", \"b\": \"bbb\"})"}]}, {"signature": "public List<Integer> no9(List<Integer> nums)", "title": "no9", "difficulty": 203.0, "url": "/prob/p124510", "section": "Functional-2", "summary": "Given a list of non-negative integers, return a list of those numbers except omitting any that end with 9. (Note:  % by 10)", "solution": [], "examples": [{"output": "[1, 2]", "input": "no9([1, 2, 19])"}, {"output": "[3]", "input": "no9([9, 19, 29, 3])"}, {"output": "[1, 2, 3]", "input": "no9([1, 2, 3])"}]}, {"signature": "public int strCount(String str, String sub)", "title": "strCount", "difficulty": 384.0, "url": "/prob/p186177", "section": "Recursion-1", "summary": "Given a string and a non-empty substring ", "solution": [], "examples": [{"output": "2", "input": "strCount(\"catcowcat\", \"cat\")"}, {"output": "1", "input": "strCount(\"catcowcat\", \"cow\")"}, {"output": "0", "input": "strCount(\"catcowcat\", \"dog\")"}]}, {"signature": "public boolean splitOdd10(int[] nums)", "title": "splitOdd10", "difficulty": 421.0, "url": "/prob/p171660", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to divide the ints into two groups, so that the sum of one group is a multiple of 10, and the sum of the other group is odd. Every int must be in one group or the other. Write a recursive helper method that takes whatever arguments you like, and make the initial call to your recursive helper from splitOdd10(). (No loops needed.)", "solution": [], "examples": [{"output": "true", "input": "splitOdd10([5, 5, 5])"}, {"output": "false", "input": "splitOdd10([5, 5, 6])"}, {"output": "true", "input": "splitOdd10([5, 5, 6, 1])"}]}, {"signature": "public int[] swapEnds(int[] nums)", "title": "swapEnds", "difficulty": 163.0, "url": "/prob/p118044", "section": "Array-1", "summary": "Given an array of ints, swap the first and last elements in the array. Return the modified array. The array length will be at least 1.", "solution": [], "examples": [{"output": "[4, 2, 3, 1]", "input": "swapEnds([1, 2, 3, 4])"}, {"output": "[3, 2, 1]", "input": "swapEnds([1, 2, 3])"}, {"output": "[5, 6, 7, 9, 8]", "input": "swapEnds([8, 6, 7, 9, 5])"}]}, {"signature": "public boolean lucky13(int[] nums)", "title": "lucky13", "difficulty": 221.0, "url": "/prob/p194525", "section": "Array-2", "summary": "Given an array of ints, return true if the array contains no 1's and no 3's.", "solution": [], "examples": [{"output": "true", "input": "lucky13([0, 2, 4])"}, {"output": "false", "input": "lucky13([1, 2, 3])"}, {"output": "false", "input": "lucky13([1, 2, 4])"}]}, {"signature": "public int[] frontPiece(int[] nums)", "title": "frontPiece", "difficulty": 172.0, "url": "/prob/p142455", "section": "Array-1", "summary": "Given an int array of any length, return a new array of its first 2 elements. If the array is smaller than length 2, use whatever elements are present.", "solution": [], "examples": [{"output": "[1, 2]", "input": "frontPiece([1, 2, 3])"}, {"output": "[1, 2]", "input": "frontPiece([1, 2])"}, {"output": "[1]", "input": "frontPiece([1])"}]}, {"signature": "public boolean array123(int[] nums)", "title": "array123", "difficulty": 224.0, "url": "/prob/p136041", "section": "Warmup-2", "summary": "Given an array of ints, return true if the sequence of numbers 1, 2, 3 appears in the array somewhere.", "solution": ["public boolean array123(int[] nums) {\n  // Note: iterate < length-2, so can use i+1 and i+2 in the loop\n  for (int i=0; i < (nums.length-2); i++) {\n    if (nums[i]==1 && nums[i+1]==2 && nums[i+2]==3) return true;\n  }\n  return false;\n}"], "examples": [{"output": "true", "input": "array123([1, 1, 2, 3, 1])"}, {"output": "false", "input": "array123([1, 1, 2, 4, 1])"}, {"output": "true", "input": "array123([1, 1, 2, 1, 2, 3])"}]}, {"signature": "public String[] fizzBuzz(int start, int end)", "title": "fizzBuzz", "difficulty": 299.0, "url": "/prob/p153059", "section": "Array-2", "summary": "This is slightly more difficult version of the famous FizzBuzz problem which is sometimes given as a first problem for job interviews. (See also: ", "solution": [], "examples": [{"output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"]", "input": "fizzBuzz(1, 6)"}, {"output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\"]", "input": "fizzBuzz(1, 8)"}, {"output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\"]", "input": "fizzBuzz(1, 11)"}]}, {"signature": "public List<Integer> doubling(List<Integer> nums)", "title": "doubling", "difficulty": 200.0, "url": "/prob/p117665", "section": "Functional-1", "summary": "Given a list of integers, return a list where each integer is multiplied by 2.", "solution": [], "examples": [{"output": "[2, 4, 6]", "input": "doubling([1, 2, 3])"}, {"output": "[12, 16, 12, 16, -2]", "input": "doubling([6, 8, 6, 8, -1])"}, {"output": "[]", "input": "doubling([])"}]}, {"signature": "public int[] makeMiddle(int[] nums)", "title": "makeMiddle", "difficulty": 157.0, "url": "/prob/p199519", "section": "Array-1", "summary": "Given an array of ints of even length, return a new array length 2 containing the middle two elements from the original array. The original array will be length 2 or more.", "solution": [], "examples": [{"output": "[2, 3]", "input": "makeMiddle([1, 2, 3, 4])"}, {"output": "[2, 3]", "input": "makeMiddle([7, 1, 2, 3, 4, 9])"}, {"output": "[1, 2]", "input": "makeMiddle([1, 2])"}]}, {"signature": "public boolean twoAsOne(int a, int b, int c)", "title": "twoAsOne", "difficulty": 136.0, "url": "/prob/p113261", "section": "Logic-1", "summary": "Given three ints, a b c, return true if it is possible to add two of the ints to get the third.", "solution": [], "examples": [{"output": "true", "input": "twoAsOne(1, 2, 3)"}, {"output": "true", "input": "twoAsOne(3, 1, 2)"}, {"output": "false", "input": "twoAsOne(3, 2, 2)"}]}, {"signature": "public String minCat(String a, String b)", "title": "minCat", "difficulty": 181.0, "url": "/prob/p105745", "section": "String-1", "summary": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the strings are different lengths, omit chars from the longer string so it is the same length as the shorter string. So \"Hello\" and \"Hi\" yield \"loHi\". The strings may be any length.", "solution": [], "examples": [{"output": "\"loHi\"", "input": "minCat(\"Hello\", \"Hi\")"}, {"output": "\"ellojava\"", "input": "minCat(\"Hello\", \"java\")"}, {"output": "\"javaello\"", "input": "minCat(\"java\", \"Hello\")"}]}, {"signature": "public String front3(String str)", "title": "front3", "difficulty": 136.0, "url": "/prob/p136351", "section": "Warmup-1", "summary": "Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front.", "solution": ["public String front3(String str) {\n  String front;\n  \n  if (str.length() >= 3) {\n    front = str.substring(0, 3);\n  }\n  else {\n    front = str;\n  }\n\n  return front + front + front;\n}"], "examples": [{"output": "\"JavJavJav\"", "input": "front3(\"Java\")"}, {"output": "\"ChoChoCho\"", "input": "front3(\"Chocolate\")"}, {"output": "\"abcabcabc\"", "input": "front3(\"abc\")"}]}, {"signature": "public int[] rotateLeft3(int[] nums)", "title": "rotateLeft3", "difficulty": 118.0, "url": "/prob/p185139", "section": "Array-1", "summary": "Given an array of ints length 3, return an array with the elements \"rotated left\" so {1, 2, 3} yields {2, 3, 1}.", "solution": [], "examples": [{"output": "[2, 3, 1]", "input": "rotateLeft3([1, 2, 3])"}, {"output": "[11, 9, 5]", "input": "rotateLeft3([5, 11, 9])"}, {"output": "[0, 0, 7]", "input": "rotateLeft3([7, 0, 0])"}]}, {"signature": "public String[] fizzArray2(int n)", "title": "fizzArray2", "difficulty": 230.1, "url": "/prob/p178353", "section": "Array-2", "summary": "Given a number n, create and return a new string array of length n, containing the strings \"0\", \"1\" \"2\" .. through n-1. N may be 0, in which case just return a length 0 array. Note: String.valueOf(xxx) will make the String form of most types. The syntax to make a new string array is: new String[desired_length] \u00a0(See also: ", "solution": [], "examples": [{"output": "[\"0\", \"1\", \"2\", \"3\"]", "input": "fizzArray2(4)"}, {"output": "[\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]", "input": "fizzArray2(10)"}, {"output": "[\"0\", \"1\"]", "input": "fizzArray2(2)"}]}, {"signature": "public int[] fix23(int[] nums)", "title": "fix23", "difficulty": 148.0, "url": "/prob/p120347", "section": "Array-1", "summary": "Given an int array length 3, if there is a 2 in the array immediately followed by a 3, set the 3 element to 0. Return the changed array.", "solution": [], "examples": [{"output": "[1, 2, 0]", "input": "fix23([1, 2, 3])"}, {"output": "[2, 0, 5]", "input": "fix23([2, 3, 5])"}, {"output": "[1, 2, 1]", "input": "fix23([1, 2, 1])"}]}, {"signature": "public int caughtSpeeding(int speed, boolean isBirthday)", "title": "caughtSpeeding", "difficulty": 112.0, "url": "/prob/p157733", "section": "Logic-1", "summary": "You are driving a little too fast, and a police officer stops you. Write code to compute the result, encoded as an int value: 0=no ticket, 1=small ticket, 2=big ticket. If speed is 60 or less, the result is 0. If speed is between 61 and 80 inclusive, the result is 1. If speed is 81 or more, the result is 2. Unless it is your birthday -- on that day, your speed can be 5 higher in all cases.", "solution": [], "examples": [{"output": "0", "input": "caughtSpeeding(60, false)"}, {"output": "1", "input": "caughtSpeeding(65, false)"}, {"output": "0", "input": "caughtSpeeding(65, true)"}]}, {"signature": "public int countEvens(int[] nums)", "title": "countEvens", "difficulty": 203.0, "url": "/prob/p162010", "section": "Array-2", "summary": "Return the number of even ints in the given array. Note: the % \"mod\" operator computes the remainder, e.g. 5 % 2 is 1.", "solution": [], "examples": [{"output": "3", "input": "countEvens([2, 1, 2, 3, 4])"}, {"output": "3", "input": "countEvens([2, 2, 0])"}, {"output": "0", "input": "countEvens([1, 3, 5])"}]}, {"signature": "public int scoresSpecial(int[] a, int[] b)", "title": "scoresSpecial", "difficulty": 245.0, "url": "/prob/p140485", "section": "AP-1", "summary": "Given two arrays, A and B, of non-negative int scores. A \"special\" score is one which is a multiple of 10, such as 40 or 90. Return the sum of largest special score in A and the largest special score in B. To practice decomposition, write a separate helper method which finds the largest special score in an array. Write your helper method after your scoresSpecial() method in the JavaBat text area.", "solution": [], "examples": [{"output": "40", "input": "scoresSpecial([12, 10, 4], [2, 20, 30])"}, {"output": "40", "input": "scoresSpecial([20, 10, 4], [2, 20, 10])"}, {"output": "20", "input": "scoresSpecial([12, 11, 4], [2, 20, 31])"}]}, {"signature": "public String conCat(String a, String b)", "title": "conCat", "difficulty": 169.0, "url": "/prob/p132118", "section": "String-1", "summary": "Given two strings, append them together (known as \"concatenation\") and return the result. However, if the concatenation creates a double-char, then omit one of the chars, so \"abc\" and \"cat\" yields \"abcat\".", "solution": [], "examples": [{"output": "\"abcat\"", "input": "conCat(\"abc\", \"cat\")"}, {"output": "\"dogcat\"", "input": "conCat(\"dog\", \"cat\")"}, {"output": "\"abc\"", "input": "conCat(\"abc\", \"\")"}]}, {"signature": "public String changePi(String str)", "title": "changePi", "difficulty": 339.0, "url": "/prob/p170924", "section": "Recursion-1", "summary": "Given a string, compute recursively (no loops) a new string where all appearances of \"pi\" have been replaced by \"3.14\".", "solution": [], "examples": [{"output": "\"x3.14x\"", "input": "changePi(\"xpix\")"}, {"output": "\"3.143.14\"", "input": "changePi(\"pipi\")"}, {"output": "\"3.14p\"", "input": "changePi(\"pip\")"}]}, {"signature": "public int[] zeroFront(int[] nums)", "title": "zeroFront", "difficulty": 281.0, "url": "/prob/p193753", "section": "Array-2", "summary": "Return an array that contains the exact same numbers as the given array, but rearranged so that all the zeros are grouped at the start of the array. The order of the non-zero numbers does not matter. So {1, 0, 0, 1} becomes {0 ,0, 1, 1}. You may modify and return the given array or make a new array.", "solution": [], "examples": [{"output": "[0, 0, 1, 1]", "input": "zeroFront([1, 0, 0, 1])"}, {"output": "[0, 0, 1, 1, 1]", "input": "zeroFront([0, 1, 1, 0, 1])"}, {"output": "[0, 1]", "input": "zeroFront([1, 0])"}]}, {"signature": "public int sumDouble(int a, int b)", "title": "sumDouble", "difficulty": 109.0, "url": "/prob/p154485", "section": "Warmup-1", "summary": "Given two int values, return their sum. Unless the two values are the same, then return double their sum.", "solution": ["public int sumDouble(int a, int b) {\n  // Store the sum in a local variable\n  int sum = a + b;\n  \n  // Double it if a and b are the same\n  if (a == b) {\n    sum = sum * 2;\n  }\n  \n  return sum;\n}"], "examples": [{"output": "3", "input": "sumDouble(1, 2)"}, {"output": "5", "input": "sumDouble(3, 2)"}, {"output": "8", "input": "sumDouble(2, 2)"}]}, {"signature": "public List<String> noZ(List<String> strings)", "title": "noZ", "difficulty": 209.0, "url": "/prob/p105671", "section": "Functional-2", "summary": "Given a list of strings, return a list of the strings, omitting any string that contains a \"z\". (Note: the str.contains(x) method returns a boolean)", "solution": [], "examples": [{"output": "[\"aaa\", \"bbb\"]", "input": "noZ([\"aaa\", \"bbb\", \"aza\"])"}, {"output": "[\"hi\"]", "input": "noZ([\"hziz\", \"hzello\", \"hi\"])"}, {"output": "[\"hello\", \"are\"]", "input": "noZ([\"hello\", \"howz\", \"are\", \"youz\"])"}]}, {"signature": "public boolean makeBricks(int small, int big, int goal)", "title": "makeBricks", "difficulty": 203.0, "url": "/prob/p183562", "section": "Logic-2", "summary": "We want to make a row of bricks that is ", "solution": [], "examples": [{"output": "true", "input": "makeBricks(3, 1, 8)"}, {"output": "false", "input": "makeBricks(3, 1, 9)"}, {"output": "true", "input": "makeBricks(3, 2, 10)"}]}, {"signature": "public String frontTimes(String str, int n)", "title": "frontTimes", "difficulty": 206.0, "url": "/prob/p101475", "section": "Warmup-2", "summary": "Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front;", "solution": ["public String frontTimes(String str, int n) {\n  int frontLen = 3;\n  if (frontLen > str.length()) {\n    frontLen = str.length();\n  }\n  String front = str.substring(0, frontLen);\n  \n  String result = \"\";\n  for (int i=0; i<n; i++) {\n    result = result + front;\n  }\n  return result;\n}"], "examples": [{"output": "\"ChoCho\"", "input": "frontTimes(\"Chocolate\", 2)"}, {"output": "\"ChoChoCho\"", "input": "frontTimes(\"Chocolate\", 3)"}, {"output": "\"AbcAbcAbc\"", "input": "frontTimes(\"Abc\", 3)"}]}, {"signature": "public String[] wordsWithout(String[] words, String target)", "title": "wordsWithout", "difficulty": 242.0, "url": "/prob/p121236", "section": "AP-1", "summary": "Given an array of strings, return a new array without the strings that are equal to the target string. One approach is to count the occurrences of the target string, make a new array of the correct length, and then copy over the correct strings.", "solution": [], "examples": [{"output": "[\"b\", \"c\"]", "input": "wordsWithout([\"a\", \"b\", \"c\", \"a\"], \"a\")"}, {"output": "[\"a\", \"c\", \"a\"]", "input": "wordsWithout([\"a\", \"b\", \"c\", \"a\"], \"b\")"}, {"output": "[\"a\", \"b\", \"a\"]", "input": "wordsWithout([\"a\", \"b\", \"c\", \"a\"], \"c\")"}]}, {"signature": "public int sumDigits(int n)", "title": "sumDigits", "difficulty": 318.0, "url": "/prob/p163932", "section": "Recursion-1", "summary": "Given a non-negative int n, return the sum of its digits recursively (no loops). Note that mod (%) by 10 yields the rightmost digit (126 % 10 is 6), while divide (/) by 10 removes the rightmost digit (126 / 10 is 12).", "solution": [], "examples": [{"output": "9", "input": "sumDigits(126)"}, {"output": "13", "input": "sumDigits(49)"}, {"output": "3", "input": "sumDigits(12)"}]}, {"signature": "public String startWord(String str, String word)", "title": "startWord", "difficulty": 193.0, "url": "/prob/p141494", "section": "String-1", "summary": "Given a string and a second \"word\" string, we'll say that the word matches the string if it appears at the front of the string, except its first char does not need to match exactly. On a match, return the front of the string, or otherwise return the empty string. So, so with the string \"hippo\" the word \"hi\" returns \"hi\" and \"xip\" returns \"hip\". The word will be at least length 1.", "solution": [], "examples": [{"output": "\"hi\"", "input": "startWord(\"hippo\", \"hi\")"}, {"output": "\"hip\"", "input": "startWord(\"hippo\", \"xip\")"}, {"output": "\"h\"", "input": "startWord(\"hippo\", \"i\")"}]}, {"signature": "public boolean either24(int[] nums)", "title": "either24", "difficulty": 239.0, "url": "/prob/p191878", "section": "Array-2", "summary": "Given an array of ints, return true if the array contains a 2 next to a 2 or a 4 next to a 4, but not both.", "solution": [], "examples": [{"output": "true", "input": "either24([1, 2, 2])"}, {"output": "true", "input": "either24([4, 4, 1])"}, {"output": "false", "input": "either24([4, 4, 1, 2, 2])"}]}, {"signature": "public int dateFashion(int you, int date)", "title": "dateFashion", "difficulty": 106.0, "url": "/prob/p103360", "section": "Logic-1", "summary": "You and your date are trying to get a table at a restaurant. The parameter \"you\" is the stylishness of your clothes, in the range 0..10, and \"date\" is the stylishness of your date's clothes. The result getting the table is encoded as an int value with 0=no, 1=maybe, 2=yes. If either of you is very stylish, 8 or more, then the result is 2 (yes). With the exception that if either of you has style of 2 or less, then the result is 0 (no). Otherwise the result is 1 (maybe).", "solution": [], "examples": [{"output": "2", "input": "dateFashion(5, 10)"}, {"output": "0", "input": "dateFashion(5, 2)"}, {"output": "1", "input": "dateFashion(5, 5)"}]}, {"signature": "public List<String> addStar(List<String> strings)", "title": "addStar", "difficulty": 206.0, "url": "/prob/p170181", "section": "Functional-1", "summary": "Given a list of strings, return a list where each string has \"*\" added at its end.", "solution": [], "examples": [{"output": "[\"a*\", \"bb*\", \"ccc*\"]", "input": "addStar([\"a\", \"bb\", \"ccc\"])"}, {"output": "[\"hello*\", \"there*\"]", "input": "addStar([\"hello\", \"there\"])"}, {"output": "[\"**\"]", "input": "addStar([\"*\"])"}]}, {"signature": "public List wordsWithoutList(String[] words, int len)", "title": "wordsWithoutList", "difficulty": 221.0, "url": "/prob/p183407", "section": "AP-1", "summary": "Given an array of strings, return a new List (e.g. an ArrayList) where all the strings of the given length are omitted. See wordsWithout() below which is more difficult because it uses arrays.", "solution": [], "examples": [{"output": "[\"bb\", \"ccc\"]", "input": "wordsWithoutList([\"a\", \"bb\", \"b\", \"ccc\"], 1)"}, {"output": "[\"a\", \"bb\", \"b\"]", "input": "wordsWithoutList([\"a\", \"bb\", \"b\", \"ccc\"], 3)"}, {"output": "[\"a\", \"bb\", \"b\", \"ccc\"]", "input": "wordsWithoutList([\"a\", \"bb\", \"b\", \"ccc\"], 4)"}]}, {"signature": "public String delDel(String str)", "title": "delDel", "difficulty": 160.0, "url": "/prob/p100905", "section": "Warmup-1", "summary": "Given a string, if the string \"del\" appears starting at index 1, return a string where that \"del\" has been deleted. Otherwise, return the string unchanged.", "solution": ["public String delDel(String str) {\n  if (str.length()>=4 && str.substring(1, 4).equals(\"del\")) {\n    // First char + rest of string starting at 4\n    return str.substring(0, 1) + str.substring(4);\n  }\n  // Otherwise return the original string.\n  return str;\n}"], "examples": [{"output": "\"abc\"", "input": "delDel(\"adelbc\")"}, {"output": "\"aHello\"", "input": "delDel(\"adelHello\")"}, {"output": "\"adedbc\"", "input": "delDel(\"adedbc\")"}]}, {"signature": "public String[] firstSwap(String[] strings)", "title": "firstSwap", "difficulty": 380.0, "url": "/prob/p150113", "section": "Map-2", "summary": "We'll say that 2 strings \"match\" if they are non-empty and their first chars are the same. Loop over and then return the given array of non-empty strings as follows: if a string matches an earlier string in the array, swap the 2 strings in the array. A particular first char can only cause 1 swap, so once a char has caused a swap, its later swaps are disabled. Using a map, this can be solved making just one pass over the array. More difficult than it looks.", "solution": [], "examples": [{"output": "[\"ac\", \"ab\"]", "input": "firstSwap([\"ab\", \"ac\"])"}, {"output": "[\"ay\", \"by\", \"cy\", \"cx\", \"bx\", \"ax\", \"aaa\", \"azz\"]", "input": "firstSwap([\"ax\", \"bx\", \"cx\", \"cy\", \"by\", \"ay\", \"aaa\", \"azz\"])"}, {"output": "[\"ay\", \"by\", \"ax\", \"bx\", \"ai\", \"aj\", \"bx\", \"by\"]", "input": "firstSwap([\"ax\", \"bx\", \"ay\", \"by\", \"ai\", \"aj\", \"bx\", \"by\"])"}]}, {"signature": "public String withoutX(String str)", "title": "withoutX", "difficulty": 196.0, "url": "/prob/p151940", "section": "String-1", "summary": "Given a string, if the first or last chars are 'x', return the string without those 'x' chars, and otherwise return the string unchanged.", "solution": [], "examples": [{"output": "\"Hi\"", "input": "withoutX(\"xHix\")"}, {"output": "\"Hi\"", "input": "withoutX(\"xHi\")"}, {"output": "\"Hxi\"", "input": "withoutX(\"Hxix\")"}]}, {"signature": "public boolean lastDigit(int a, int b, int c)", "title": "lastDigit", "difficulty": 145.0, "url": "/prob/p169213", "section": "Logic-1", "summary": "Given three ints, a b c, return true if two or more of them have the same rightmost digit. The ints are non-negative. Note: the % \"mod\" operator computes the remainder, e.g. 17 % 10 is 7.", "solution": [], "examples": [{"output": "true", "input": "lastDigit(23, 19, 13)"}, {"output": "false", "input": "lastDigit(23, 19, 12)"}, {"output": "true", "input": "lastDigit(23, 19, 3)"}]}, {"signature": "public boolean has271(int[] nums)", "title": "has271", "difficulty": 245.0, "url": "/prob/p167430", "section": "Warmup-2", "summary": "Given an array of ints, return true if it contains a 2, 7, 1 pattern: a value, followed by the value plus 5, followed by the value minus 1. Additionally the 271 counts even if the \"1\" differs by 2 or less from the correct value.", "solution": ["public boolean has271(int[] nums) {\n  // Iterate < length-2, so can use i+1 and i+2 in the loop.\n  // Return true immediately when seeing 271.\n  for (int i=0; i < (nums.length-2); i++) {\n    int val = nums[i];\n    if (nums[i+1] == (val+5) &&              // the \"7\" check\n      Math.abs(nums[i+2] - (val-1)) <= 2) {  // the \"1\" check\n        return true;\n    }\n  }\n  \n  // If we get here ... none found.\n  return false;\n}"], "examples": [{"output": "true", "input": "has271([1, 2, 7, 1])"}, {"output": "false", "input": "has271([1, 2, 8, 1])"}, {"output": "true", "input": "has271([2, 7, 1])"}]}, {"signature": "public boolean sameFirstLast(int[] nums)", "title": "sameFirstLast", "difficulty": 106.0, "url": "/prob/p118976", "section": "Array-1", "summary": "Given an array of ints, return true if the array is length 1 or more, and the first element and the last element are equal.", "solution": [], "examples": [{"output": "false", "input": "sameFirstLast([1, 2, 3])"}, {"output": "true", "input": "sameFirstLast([1, 2, 3, 1])"}, {"output": "true", "input": "sameFirstLast([1, 2, 1])"}]}, {"signature": "public int maxSpan(int[] nums)", "title": "maxSpan", "difficulty": 303.0, "url": "/prob/p189576", "section": "Array-3", "summary": "Consider the leftmost and righmost appearances of some value in an array. We'll say that the \"span\" is the number of elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.)", "solution": [], "examples": [{"output": "4", "input": "maxSpan([1, 2, 1, 1, 3])"}, {"output": "6", "input": "maxSpan([1, 4, 2, 1, 4, 1, 4])"}, {"output": "6", "input": "maxSpan([1, 4, 2, 1, 4, 4, 4])"}]}, {"signature": "public boolean arrayFront9(int[] nums)", "title": "arrayFront9", "difficulty": 221.0, "url": "/prob/p186031", "section": "Warmup-2", "summary": "Given an array of ints, return true if one of the first 4 elements in the array is a 9. The array length may be less than 4.", "solution": ["public boolean arrayFront9(int[] nums) {\n  // First figure the end for the loop\n  int end = nums.length;\n  if (end > 4) end = 4;\n  \n  for (int i=0; i<end; i++) {\n    if (nums[i] == 9) return true;\n  }\n  \n  return false;\n}"], "examples": [{"output": "true", "input": "arrayFront9([1, 2, 9, 3, 4])"}, {"output": "false", "input": "arrayFront9([1, 2, 3, 4, 9])"}, {"output": "false", "input": "arrayFront9([1, 2, 3, 4, 5])"}]}, {"signature": "public boolean shareDigit(int a, int b)", "title": "shareDigit", "difficulty": 166.0, "url": "/prob/p153748", "section": "Logic-1", "summary": "Given two ints, each in the range 10..99, return true if there is a digit that appears in both numbers, such as the 2 in 12 and 23. (Note: division, e.g. n/10, gives the left digit while the % \"mod\" n%10 gives the right digit.)", "solution": [], "examples": [{"output": "true", "input": "shareDigit(12, 23)"}, {"output": "false", "input": "shareDigit(12, 43)"}, {"output": "false", "input": "shareDigit(12, 44)"}]}, {"signature": "public Map<String, String> pairs(String[] strings)", "title": "pairs", "difficulty": 320.0, "url": "/prob/p126332", "section": "Map-2", "summary": "Given an array of non-empty strings, create and return a Map<String, String> as follows: for each string add its first character as a key with its last character as the value.", "solution": [], "examples": [{"output": "{\"b\": \"g\", \"c\": \"e\"}", "input": "pairs([\"code\", \"bug\"])"}, {"output": "{\"m\": \"n\"}", "input": "pairs([\"man\", \"moon\", \"main\"])"}, {"output": "{\"g\": \"d\", \"m\": \"n\", \"n\": \"t\"}", "input": "pairs([\"man\", \"moon\", \"good\", \"night\"])"}]}, {"signature": "public boolean groupSum6(int start, int[] nums, int target)", "title": "groupSum6", "difficulty": 406.0, "url": "/prob/p199368", "section": "Recursion-2", "summary": "Given an array of ints, is it possible to choose a group of some of the ints, beginning at the start index, such that the group sums to the given target? However, with the additional constraint that all 6's must be chosen. (No loops needed.)", "solution": [], "examples": [{"output": "true", "input": "groupSum6(0, [5, 6, 2], 8)"}, {"output": "false", "input": "groupSum6(0, [5, 6, 2], 9)"}, {"output": "false", "input": "groupSum6(0, [5, 6, 2], 7)"}]}, {"signature": "public int intMax(int a, int b, int c)", "title": "intMax", "difficulty": 169.0, "url": "/prob/p101887", "section": "Warmup-1", "summary": "Given three int values, a b c, return the largest.", "solution": ["public int intMax(int a, int b, int c) {\n  int max;\n  \n  // First check between a and b\n  if (a > b) {\n    max = a;\n  } else {\n    max = b;\n  }\n  \n  // Now check between max and c\n  if (c > max) {\n    max = c;\n  }\n  \n  return max;\n  \n  // Could use the built in Math.max(x, y) function which selects the larger\n  // of two values.\n}"], "examples": [{"output": "3", "input": "intMax(1, 2, 3)"}, {"output": "3", "input": "intMax(1, 3, 2)"}, {"output": "3", "input": "intMax(3, 2, 1)"}]}, {"signature": "public boolean array6(int[] nums, int index)", "title": "array6", "difficulty": 345.0, "url": "/prob/p108997", "section": "Recursion-1", "summary": "Given an array of ints, compute recursively if the array contains a 6. We'll use the convention of considering only the part of the array that begins at the given index. In this way, a recursive call can pass index+1 to move down the array. The initial call will pass in index as 0.", "solution": [], "examples": [{"output": "true", "input": "array6([1, 6, 4], 0)"}, {"output": "false", "input": "array6([1, 4], 0)"}, {"output": "true", "input": "array6([6], 0)"}]}, {"signature": "public String altPairs(String str)", "title": "altPairs", "difficulty": 233.0, "url": "/prob/p121596", "section": "Warmup-2", "summary": "Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 ... so \"kittens\" yields \"kien\".", "solution": ["public String altPairs(String str) {\n  String result = \"\";\n  \n  // Run i by 4 to hit 0, 4, 8, ...\n  for (int i=0; i<str.length(); i += 4) {\n    // Append the chars between i and i+2\n    int end = i + 2;\n    if (end > str.length()) {\n      end = str.length();\n    }\n    result = result + str.substring(i, end);\n  }\n  \n  return result;\n}"], "examples": [{"output": "\"kien\"", "input": "altPairs(\"kitten\")"}, {"output": "\"Chole\"", "input": "altPairs(\"Chocolate\")"}, {"output": "\"Congrr\"", "input": "altPairs(\"CodingHorror\")"}]}, {"signature": "public int[] fizzArray3(int start, int end)", "title": "fizzArray3", "difficulty": 265.0, "url": "/prob/p142539", "section": "Array-2", "summary": "Given ", "solution": [], "examples": [{"output": "[5, 6, 7, 8, 9]", "input": "fizzArray3(5, 10)"}, {"output": "[11, 12, 13, 14, 15, 16, 17]", "input": "fizzArray3(11, 18)"}, {"output": "[1, 2]", "input": "fizzArray3(1, 3)"}]}, {"signature": "public int scoreUp(String[] key, String[] answers)", "title": "scoreUp", "difficulty": 239.0, "url": "/prob/p180365", "section": "AP-1", "summary": "The \"key\" array is an array containing the correct answers to an exam, like {\"a\", \"a\", \"b\", \"b\"}. the \"answers\" array contains a student's answers, with \"?\" representing a question left blank. The two arrays are not empty and are the same length. Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer.", "solution": [], "examples": [{"output": "6", "input": "scoreUp([\"a\", \"a\", \"b\", \"b\"], [\"a\", \"c\", \"b\", \"c\"])"}, {"output": "11", "input": "scoreUp([\"a\", \"a\", \"b\", \"b\"], [\"a\", \"a\", \"b\", \"c\"])"}, {"output": "16", "input": "scoreUp([\"a\", \"a\", \"b\", \"b\"], [\"a\", \"a\", \"b\", \"b\"])"}]}, {"signature": "public int[] maxEnd3(int[] nums)", "title": "maxEnd3", "difficulty": 124.0, "url": "/prob/p146256", "section": "Array-1", "summary": "Given an array of ints length 3, figure out which is larger, the first or last element in the array, and set all the other elements to be that value. Return the changed array.", "solution": [], "examples": [{"output": "[3, 3, 3]", "input": "maxEnd3([1, 2, 3])"}, {"output": "[11, 11, 11]", "input": "maxEnd3([11, 5, 9])"}, {"output": "[3, 3, 3]", "input": "maxEnd3([2, 11, 3])"}]}, {"signature": "public String stringBits(String str)", "title": "stringBits", "difficulty": 209.0, "url": "/prob/p165666", "section": "Warmup-2", "summary": "Given a string, return a new string made of every other char starting with the first, so \"Hello\" yields \"Hlo\".", "solution": ["public String stringBits(String str) {\n  String result = \"\";\n  // Note: the loop increments i by 2\n  for (int i=0; i<str.length(); i+=2) {\n    result = result + str.substring(i, i+1);\n    // Alternately could use str.charAt(i)\n  }\n  return result;\n}"], "examples": [{"output": "\"Hlo\"", "input": "stringBits(\"Hello\")"}, {"output": "\"H\"", "input": "stringBits(\"Hi\")"}, {"output": "\"Hello\"", "input": "stringBits(\"Heeololeo\")"}]}, {"signature": "public boolean more14(int[] nums)", "title": "more14", "difficulty": 227.0, "url": "/prob/p104627", "section": "Array-2", "summary": "Given an array of ints, return true if the number of 1's is greater than the number of 4's", "solution": [], "examples": [{"output": "true", "input": "more14([1, 4, 1])"}, {"output": "false", "input": "more14([1, 4, 1, 4])"}, {"output": "true", "input": "more14([1, 1])"}]}, {"signature": "int countXX(String str)", "title": "countXX", "difficulty": 207.0, "url": "/prob/p194667", "section": "Warmup-2", "summary": "Count the number of \"xx\" in the given string. We'll say that overlapping is allowed, so \"xxx\" contains 2 \"xx\".", "solution": ["int countXX(String str) {\n  int count = 0;\n  for (int i = 0; i < str.length()-1; i++) {\n    if (str.substring(i, i+2).equals(\"xx\")) count++;\n  }\n  return count;\n}\n\n// Solution notes: the loop is shortened to end at str.length()-1\n// so we can pull out a length 2 substring without going out of bounds.\n// Remember to use equals() to compare strings, not ==."], "examples": [{"output": "1", "input": "countXX(\"abcxx\")"}, {"output": "2", "input": "countXX(\"xxx\")"}, {"output": "3", "input": "countXX(\"xxxx\")"}]}, {"signature": "public boolean scoresIncreasing(int[] scores)", "title": "scoresIncreasing", "difficulty": 203.0, "url": "/prob/p146974", "section": "AP-1", "summary": "Given an array of scores, return true if each score is equal or greater than the one before. The array will be length 2 or more.", "solution": [], "examples": [{"output": "true", "input": "scoresIncreasing([1, 3, 4])"}, {"output": "false", "input": "scoresIncreasing([1, 3, 2])"}, {"output": "true", "input": "scoresIncreasing([1, 1, 4])"}]}, {"signature": "public int teenSum(int a, int b)", "title": "teenSum", "difficulty": 127.0, "url": "/prob/p178728", "section": "Logic-1", "summary": "Given 2 ints, a and b, return their sum. However, \"teen\" values in the range 13..19 inclusive, are extra lucky. So if either value is a teen, just return 19.", "solution": [], "examples": [{"output": "7", "input": "teenSum(3, 4)"}, {"output": "19", "input": "teenSum(10, 13)"}, {"output": "19", "input": "teenSum(13, 2)"}]}, {"signature": "public int centeredAverage(int[] nums)", "title": "centeredAverage", "difficulty": 209.0, "url": "/prob/p136585", "section": "Array-2", "summary": "Return the \"centered\" average of an array of ints, which we'll say is the mean average of the values, except ignoring the largest and smallest values in the array. If there are multiple copies of the smallest value, ignore just one copy, and likewise for the largest value. Use int division to produce the final average. You may assume that the array is length 3 or more.", "solution": [], "examples": [{"output": "3", "input": "centeredAverage([1, 2, 3, 4, 100])"}, {"output": "5", "input": "centeredAverage([1, 1, 5, 5, 10, 8, 7])"}, {"output": "-3", "input": "centeredAverage([-10, -4, -2, -4, -2, 0])"}]}, {"signature": "public int countAbc(String str)", "title": "countAbc", "difficulty": 366.0, "url": "/prob/p161124", "section": "Recursion-1", "summary": "Count recursively the total number of \"abc\" and \"aba\" substrings that appear in the given string.", "solution": [], "examples": [{"output": "1", "input": "countAbc(\"abc\")"}, {"output": "2", "input": "countAbc(\"abcxxabc\")"}, {"output": "2", "input": "countAbc(\"abaxxaba\")"}]}, {"signature": "public int[] copyEvens(int[] nums, int count)", "title": "copyEvens", "difficulty": 230.0, "url": "/prob/p134174", "section": "AP-1", "summary": "Given an array of positive ints, return a new array of length \"count\" containing the first even numbers from the original array. The original array will contain at least \"count\" even numbers.", "solution": [], "examples": [{"output": "[2, 4]", "input": "copyEvens([3, 2, 4, 5, 8], 2)"}, {"output": "[2, 4, 8]", "input": "copyEvens([3, 2, 4, 5, 8], 3)"}, {"output": "[6, 2, 4]", "input": "copyEvens([6, 1, 2, 4, 5, 8], 3)"}]}, {"signature": "public boolean endOther(String a, String b)", "title": "endOther", "difficulty": 215.0, "url": "/prob/p126880", "section": "String-2", "summary": "Given two strings, return true if either of the strings appears at the very end of the other string, ignoring upper/lower case differences (in other words, the computation should not be \"case sensitive\"). Note:  str.toLowerCase() returns the lowercase version of a string.", "solution": [], "examples": [{"output": "true", "input": "endOther(\"Hiabc\", \"abc\")"}, {"output": "true", "input": "endOther(\"AbC\", \"HiaBc\")"}, {"output": "true", "input": "endOther(\"abc\", \"abXabc\")"}]}]